diff -ruN SuperLU_DIST_5.1.3/CMakeLists.txt superlu_dist5-5.1.3/CMakeLists.txt
--- SuperLU_DIST_5.1.3/CMakeLists.txt	2017-02-13 21:51:02.000000000 -0700
+++ superlu_dist5-5.1.3/CMakeLists.txt	2017-02-23 13:07:19.124341169 -0700
@@ -1,183 +1,112 @@
 ######################################################################
 #
-# CMakeLists.txt for SUPERLU_DIST
+# CMakeLists.txt for SUPERLUDIST
 #
 ######################################################################
 
-# Required version
-cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)
-
-# Project version numbers
-project(SuperLU_DIST NONE)
+# Project Version	
+project(superlu_dist)
 set(VERSION_MAJOR "5")
 set(VERSION_MINOR "1")
-set(VERSION_BugFix "3")
+set(VERSION_BugFix "2")
 set(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BugFix})
 
+# Required version
+cmake_minimum_required(VERSION 2.8.4)
+
+option(ENABLE_PARMETIS "Whether to enable parmetis" OFF)
+option(ENABLE_CBLAS "Whether to build blas" OFF)
+option(ENABLE_OPENMP    "Whether to enable OpenMP" OFF)
+option(enable_double    "Enable double precision library" ON)
+option(enable_complex16 "Enable complex16 precision library" ON)
+if (ENABLE_OPENMP)
+  set (USE_OPENMP True)
+endif()
+
 ######################################################################
 #
-# IDEAS: xSDK standards module
-MESSAGE("\nProcess XSDK defaults ...")
-# SET(USE_XSDK_DEFAULTS_DEFAULT TRUE) # Set to false if desired
-INCLUDE("cmake/XSDKDefaults.cmake")
+# Usual initialization stuff
+#
 ######################################################################
 
+set(NOFORTRAN TRUE)
+include(${CMAKE_SOURCE_DIR}/scimake/SciInit.cmake)
+set(SUPERLUDIST_VERSION "${PROJECT_VERSION}")
+set(SUPERLUDIST_REV "${PROJECT_REV}")
+
 ######################################################################
 #
-# Usual initialization stuff
+# Always use rpath to greatest extent.
+# See: http://www.itk.org/Wiki/CMake_RPATH_handling
+# Add -DCMAKE_SKIP_RPATH:BOOL=TRUE to prevent any rpath handling
 #
 ######################################################################
-# setup options
-option(enable_blaslib   "Build the CBLAS library" ${enable_blaslib_DEFAULT})
-option(enable_parmetislib   "Build the ParMETIS library" ON)
-option(enable_doc       "Build doxygen documentation" OFF)
-option(enable_double    "Enable double precision library" ON)
-option(enable_complex16 "Enable complex16 precision library" ON)
-option(enable_examples  "Build examples" ON)
-option(TPL_PARMETIS_LIBRARIES "List of absolute paths to ParMETIS link libraries [].")
-option(TPL_PARMETIS_INCLUDE_DIRS "List of absolute paths to ParMETIS include directories [].")
 
-if (NOT CMAKE_INSTALL_PREFIX)
-  set(CMAKE_INSTALL_PREFIX /usr/local)
-endif()
+if (NOT USE_STATIC_SYSLIBS)
+  if (NOT DEFINED CMAKE_INSTALL_RPATH_USE_LINK_PATH)
+    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+  endif ()
+endif ()
+# Add the automatically determined parts of the RPATH that
+# point to directories outside the build tree to the install RPATH
 
+######################################################################
+#
+# Enable OpenMP
+#
+######################################################################
 
-#---- For shared library
+if (OPENMP_FOUND)
+  option(HAVE_OPENMP "OpenMP threads enabled" on)
+  option(_OPENMP "OpenMP threads enabled" on)
+endif ()
 
-# use, i.e. don't skip the full RPATH for the build tree
-SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
 
-# when building, don't use the install RPATH already
-# (but later on when installing)
-SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
-
-# the RPATH to be used when installing
-set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
-
-# add the automatically determined parts of the RPATH
-# which point to directories outside the build tree to the install RPATH
-SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
-#----
-
-if (BUILD_SHARED_LIBS)
-  message("-- SuperLU_DIST will be built as a shared library.")
-  set(PROJECT_NAME_LIB_EXPORT libsuperlu_dist.so)
-else()
-  message("-- SuperLU_DIST will be built as a static library.")
-  set(PROJECT_NAME_LIB_EXPORT libsuperlu_dist.a)
-endif()
-
-enable_language (C)
-if (XSDK_ENABLE_Fortran)
-  enable_language (Fortran)
-  set(NOFORTRAN FALSE)
-endif()
-set(SUPERLU_VERSION "${PROJECT_VERSION}")
-set(SUPERLU_REV "${PROJECT_REV}")
+######################################################################
+#
+# Enable c99 compatibility
+#
+######################################################################
 
-# The XSDK standard does not allow using internally built BLAS
-if (USE_XSDK_DEFAULTS)
-  set(enable_blaslib_DEFAULT OFF)
-else()
-  set(enable_blaslib_DEFAULT ON)
-endif()
+if (${CMAKE_C_COMPILER_ID} MATCHES "GNU" OR 
+    ${CMAKE_C_COMPILER_ID} MATCHES "Intel")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
+endif ()
 
+######################################################################
+#
+# No underscores with the xl compiler and fix preprocessor statements
+# to be prepended with -Wp because compatibility with how 
+# EVERY OTHER compiler does this is overrated.
+#
+######################################################################
 
-# setup required compiler defines and options.
-## get_directory_property( DirDefs COMPILE_DEFINITIONS )
-set(CMAKE_C_FLAGS "-DDEBUGlevel=0 -DPRNTlevel=0 ${CMAKE_C_FLAGS}")
-if(XSDK_INDEX_SIZE EQUAL 64)
-    message("-- Using 64 bit integer for index size")
-    set(CMAKE_C_FLAGS "-D_LONGINT ${CMAKE_C_FLAGS}")
-endif()	
-set(CMAKE_C_FLAGS_RELEASE "-O3" CACHE STRING "")
+if (${CMAKE_C_COMPILER_ID} MATCHES "XL")
+  add_definitions(-Wp,-DNoChange)
+  remove_definitions(-DHAVE_CONFIG_H)
+  remove_definitions(-DNDEBUG)
+  string(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+endif ()
 
 ######################################################################
 #
 # Find packages
 #
 ######################################################################
-#
-#--------------------- BLAS ---------------------
-if(NOT enable_blaslib)
-#  set(TPL_BLAS_LIBRARIES "" CACHE FILEPATH
-#    "Override of list of absolute path to libs for BLAS.")
-  if(TPL_BLAS_LIBRARIES)
-    set(BLAS_FOUND TRUE)
-  else()
-    find_package(BLAS)
-    if(BLAS_FOUND)
-      set(TPL_BLAS_LIBRARIES "${BLAS_LIBRARIES}" CACHE FILEPATH
-        "Set from FindBLAS.cmake BLAS_LIBRARIES." FORCE)
-    endif()
-  endif()
-endif()
-
-if(BLAS_FOUND)
-    message("-- Using TPL_BLAS_LIBRARIES='${TPL_BLAS_LIBRARIES}'")
-    set(CMAKE_C_FLAGS "-DUSE_VENDOR_BLAS ${CMAKE_C_FLAGS}")
-    set(BLAS_LIB ${TPL_BLAS_LIBRARIES})
-    # fix up BLAS library name
-    string (REPLACE ";" " " BLAS_LIB_STR "${BLAS_LIB}")
-    set(BLAS_LIB_EXPORT ${BLAS_LIB_STR})
+if (ENABLE_CBLAS)
+  include_directories(${CMAKE_SOURCE_DIR}/CBLAS)
 else()
-    message("-- Did not find or specify BLAS, so configure to build internal CBLAS ...")
-    add_subdirectory(CBLAS)
-    set(BLAS_LIB blas)
-    if (BUILD_SHARED_LIBS)  # export to be referenced by downstream makefile
-        set(BLAS_LIB_EXPORT ${CMAKE_SOURCE_DIR}/build/CBLAS/libblas.so)
-    else()
-        set(BLAS_LIB_EXPORT ${CMAKE_SOURCE_DIR}/build/CBLAS/libblas.a)
-    endif()
+  find_package(SciBlasLapack REQUIRED)
+  option(USE_VENDOR_BLAS "Vendor BLAS enabled" on)
 endif()
-
-#--------------------- MPI ---------------------
-find_package(MPI)
-if(MPI_C_FOUND)
-    set(CMAKE_C_FLAGS "${MPI_C_COMPILE_FLAGS} ${CMAKE_C_FLAGS}")
-    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_C_LINK_FLAGS}" )
-endif()
-#--------------------- OpenMP ---------------------
-find_package(OpenMP)
-if(OPENMP_FOUND)
-  set(CMAKE_C_FLAGS "${OpenMP_C_FLAGS} ${CMAKE_C_FLAGS}")
-# On edison, OpenMP_EXE_LINKER_FLAGS is empty
-# set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
-  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_C_FLAGS}")
-# message("-- CMAKE_EXE_LINKER_FLAGS='${CMAKE_EXE_LINKER_FLAGS}'")
+option(HAVE_BLAS "BLAS enabled" on)
+if (ENABLE_PARMETIS)
+  find_package(SciParMetis REQUIRED)
+  option(HAVE_METIS "Have metis" on)
+  option(HAVE_PARMETIS "Have parmetis" on)
 endif()
-#--------------------- ParMETIS ---------------------
-if (enable_parmetislib)   ## want to use parmetis
-  if (NOT TPL_PARMETIS_LIBRARIES)
-    message(FATAL_ERROR "TPL_PARMETIS_LIBRARIES option should be set for PARMETIS support to be enabled.")
-  endif()
-
-  if (NOT TPL_PARMETIS_INCLUDE_DIRS)
-    message(FATAL_ERROR "TPL_PARMETIS_INCLUDE_DIRS option be set for PARMETIS support to be enabled.")
-  endif()
-  foreach(dir ${TPL_PARMETIS_INCLUDE_DIRS})
-    if (NOT EXISTS ${dir})
-      message(FATAL_ERROR "PARMETIS include directory not found: ${dir}")
-    endif()
-    set(CMAKE_C_FLAGS "-I${dir} ${CMAKE_C_FLAGS}")
-  endforeach()
-
-  message("-- Enabled support for PARMETIS")
-  set(PARMETIS_FOUND TRUE)
-
-  set(PARMETIS_LIB ${TPL_PARMETIS_LIBRARIES})
-  # fix up PARMETIS library names
-  string (REPLACE ";" " " PARMETIS_LIB_STR "${PARMETIS_LIB}")
-  set(PARMETIS_LIB_EXPORT ${PARMETIS_LIB_STR})
-
-else()
-  message("-- Will not link with ParMETIS.")
-endif()
-
-# if(NOT enable_parmetislib)
-#  find_package(PARMETIS)    ## does not have this Module yet.
-# endif()
-
+find_package(SciMpi REQUIRED)
+option(HAVE_MPI "Have MPI" on)
 
 ######################################################################
 #
@@ -185,9 +114,17 @@
 #
 ######################################################################
 
-include_directories(${CMAKE_SOURCE_DIR}/SRC)
-include_directories(${TPL_PARMETIS_INCLUDE_DIRS})  ## parmetis
-include_directories(${MPI_C_INCLUDE_PATH})
+include_directories(
+  ${CMAKE_SOURCE_DIR}/SRC
+  ${MPI_INCLUDE_DIRS}
+)
+if (ENABLE_PARMETIS)
+  include_directories(
+    ${Metis_INCLUDE_DIRS}
+    ${ParMetis_INCLUDE_DIRS}
+  )
+endif()
+
 
 ######################################################################
 #
@@ -196,22 +133,20 @@
 ######################################################################
 
 add_subdirectory(SRC)
-
-if(enable_tests)
-  enable_testing()
-  add_subdirectory(TESTING)
+add_subdirectory(INSTALL)
+if (ENABLE_CBLAS)
+  add_subdirectory(CBLAS)
 endif()
 
-if(enable_doc)
-  message(FATAL_ERROR "Documentation build requested but not implemented.")
-  #implement doxygen
-endif()
+######################################################
+#
+# Finalize
+#
+######################################################################
 
-if(enable_examples)
-  enable_testing()
-  add_subdirectory(EXAMPLE)
-endif()
+set(COMMON_INSTALL FALSE)
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "SuperLU DIST ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BugFix}")
+set(CONFIG_FILES)  # Clear out
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config.h.cmake ${PROJECT_BINARY_DIR}/config.h)
+include(${CMAKE_SOURCE_DIR}/scimake/SciFinalize.cmake)
 
-# file(WRITE "make.defs" "# can be exposed to users" ${CMAKE_C_COMPILER})
-# configure_file(${CMAKE_SOURCE_DIR}/make.inc.in ${CMAKE_BINARY_DIR}/make.inc)
-configure_file(${SuperLU_DIST_SOURCE_DIR}/make.inc.in ${SuperLU_DIST_SOURCE_DIR}/make.inc)
diff -ruN SuperLU_DIST_5.1.3/CMakeLists.txt.orig superlu_dist5-5.1.3/CMakeLists.txt.orig
--- SuperLU_DIST_5.1.3/CMakeLists.txt.orig	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/CMakeLists.txt.orig	2017-02-23 12:24:54.000000000 -0700
@@ -0,0 +1,217 @@
+######################################################################
+#
+# CMakeLists.txt for SUPERLU_DIST
+#
+######################################################################
+
+# Required version
+cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)
+
+# Project version numbers
+project(SuperLU_DIST NONE)
+set(VERSION_MAJOR "5")
+set(VERSION_MINOR "1")
+set(VERSION_BugFix "3")
+set(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BugFix})
+
+######################################################################
+#
+# IDEAS: xSDK standards module
+MESSAGE("\nProcess XSDK defaults ...")
+# SET(USE_XSDK_DEFAULTS_DEFAULT TRUE) # Set to false if desired
+INCLUDE("cmake/XSDKDefaults.cmake")
+######################################################################
+
+######################################################################
+#
+# Usual initialization stuff
+#
+######################################################################
+# setup options
+option(enable_blaslib   "Build the CBLAS library" ${enable_blaslib_DEFAULT})
+option(enable_parmetislib   "Build the ParMETIS library" ON)
+option(enable_doc       "Build doxygen documentation" OFF)
+option(enable_double    "Enable double precision library" ON)
+option(enable_complex16 "Enable complex16 precision library" ON)
+option(enable_examples  "Build examples" ON)
+option(TPL_PARMETIS_LIBRARIES "List of absolute paths to ParMETIS link libraries [].")
+option(TPL_PARMETIS_INCLUDE_DIRS "List of absolute paths to ParMETIS include directories [].")
+
+if (NOT CMAKE_INSTALL_PREFIX)
+  set(CMAKE_INSTALL_PREFIX /usr/local)
+endif()
+
+
+#---- For shared library
+
+# use, i.e. don't skip the full RPATH for the build tree
+SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
+
+# when building, don't use the install RPATH already
+# (but later on when installing)
+SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
+
+# the RPATH to be used when installing
+set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+
+# add the automatically determined parts of the RPATH
+# which point to directories outside the build tree to the install RPATH
+SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+#----
+
+if (BUILD_SHARED_LIBS)
+  message("-- SuperLU_DIST will be built as a shared library.")
+  set(PROJECT_NAME_LIB_EXPORT libsuperlu_dist.so)
+else()
+  message("-- SuperLU_DIST will be built as a static library.")
+  set(PROJECT_NAME_LIB_EXPORT libsuperlu_dist.a)
+endif()
+
+enable_language (C)
+if (XSDK_ENABLE_Fortran)
+  enable_language (Fortran)
+  set(NOFORTRAN FALSE)
+endif()
+set(SUPERLU_VERSION "${PROJECT_VERSION}")
+set(SUPERLU_REV "${PROJECT_REV}")
+
+# The XSDK standard does not allow using internally built BLAS
+if (USE_XSDK_DEFAULTS)
+  set(enable_blaslib_DEFAULT OFF)
+else()
+  set(enable_blaslib_DEFAULT ON)
+endif()
+
+
+# setup required compiler defines and options.
+## get_directory_property( DirDefs COMPILE_DEFINITIONS )
+set(CMAKE_C_FLAGS "-DDEBUGlevel=0 -DPRNTlevel=0 ${CMAKE_C_FLAGS}")
+if(XSDK_INDEX_SIZE EQUAL 64)
+    message("-- Using 64 bit integer for index size")
+    set(CMAKE_C_FLAGS "-D_LONGINT ${CMAKE_C_FLAGS}")
+endif()	
+set(CMAKE_C_FLAGS_RELEASE "-O3" CACHE STRING "")
+
+######################################################################
+#
+# Find packages
+#
+######################################################################
+#
+#--------------------- BLAS ---------------------
+if(NOT enable_blaslib)
+#  set(TPL_BLAS_LIBRARIES "" CACHE FILEPATH
+#    "Override of list of absolute path to libs for BLAS.")
+  if(TPL_BLAS_LIBRARIES)
+    set(BLAS_FOUND TRUE)
+  else()
+    find_package(BLAS)
+    if(BLAS_FOUND)
+      set(TPL_BLAS_LIBRARIES "${BLAS_LIBRARIES}" CACHE FILEPATH
+        "Set from FindBLAS.cmake BLAS_LIBRARIES." FORCE)
+    endif()
+  endif()
+endif()
+
+if(BLAS_FOUND)
+    message("-- Using TPL_BLAS_LIBRARIES='${TPL_BLAS_LIBRARIES}'")
+    set(CMAKE_C_FLAGS "-DUSE_VENDOR_BLAS ${CMAKE_C_FLAGS}")
+    set(BLAS_LIB ${TPL_BLAS_LIBRARIES})
+    # fix up BLAS library name
+    string (REPLACE ";" " " BLAS_LIB_STR "${BLAS_LIB}")
+    set(BLAS_LIB_EXPORT ${BLAS_LIB_STR})
+else()
+    message("-- Did not find or specify BLAS, so configure to build internal CBLAS ...")
+    add_subdirectory(CBLAS)
+    set(BLAS_LIB blas)
+    if (BUILD_SHARED_LIBS)  # export to be referenced by downstream makefile
+        set(BLAS_LIB_EXPORT ${CMAKE_SOURCE_DIR}/build/CBLAS/libblas.so)
+    else()
+        set(BLAS_LIB_EXPORT ${CMAKE_SOURCE_DIR}/build/CBLAS/libblas.a)
+    endif()
+endif()
+
+#--------------------- MPI ---------------------
+find_package(MPI)
+if(MPI_C_FOUND)
+    set(CMAKE_C_FLAGS "${MPI_C_COMPILE_FLAGS} ${CMAKE_C_FLAGS}")
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_C_LINK_FLAGS}" )
+endif()
+#--------------------- OpenMP ---------------------
+find_package(OpenMP)
+if(OPENMP_FOUND)
+  set(CMAKE_C_FLAGS "${OpenMP_C_FLAGS} ${CMAKE_C_FLAGS}")
+# On edison, OpenMP_EXE_LINKER_FLAGS is empty
+# set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
+  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_C_FLAGS}")
+# message("-- CMAKE_EXE_LINKER_FLAGS='${CMAKE_EXE_LINKER_FLAGS}'")
+endif()
+#--------------------- ParMETIS ---------------------
+if (enable_parmetislib)   ## want to use parmetis
+  if (NOT TPL_PARMETIS_LIBRARIES)
+    message(FATAL_ERROR "TPL_PARMETIS_LIBRARIES option should be set for PARMETIS support to be enabled.")
+  endif()
+
+  if (NOT TPL_PARMETIS_INCLUDE_DIRS)
+    message(FATAL_ERROR "TPL_PARMETIS_INCLUDE_DIRS option be set for PARMETIS support to be enabled.")
+  endif()
+  foreach(dir ${TPL_PARMETIS_INCLUDE_DIRS})
+    if (NOT EXISTS ${dir})
+      message(FATAL_ERROR "PARMETIS include directory not found: ${dir}")
+    endif()
+    set(CMAKE_C_FLAGS "-I${dir} ${CMAKE_C_FLAGS}")
+  endforeach()
+
+  message("-- Enabled support for PARMETIS")
+  set(PARMETIS_FOUND TRUE)
+
+  set(PARMETIS_LIB ${TPL_PARMETIS_LIBRARIES})
+  # fix up PARMETIS library names
+  string (REPLACE ";" " " PARMETIS_LIB_STR "${PARMETIS_LIB}")
+  set(PARMETIS_LIB_EXPORT ${PARMETIS_LIB_STR})
+
+else()
+  message("-- Will not link with ParMETIS.")
+endif()
+
+# if(NOT enable_parmetislib)
+#  find_package(PARMETIS)    ## does not have this Module yet.
+# endif()
+
+
+######################################################################
+#
+# Include directories
+#
+######################################################################
+
+include_directories(${CMAKE_SOURCE_DIR}/SRC)
+include_directories(${TPL_PARMETIS_INCLUDE_DIRS})  ## parmetis
+include_directories(${MPI_C_INCLUDE_PATH})
+
+######################################################################
+#
+# Add subdirectories
+#
+######################################################################
+
+add_subdirectory(SRC)
+
+if(enable_tests)
+  enable_testing()
+  add_subdirectory(TESTING)
+endif()
+
+if(enable_doc)
+  message(FATAL_ERROR "Documentation build requested but not implemented.")
+  #implement doxygen
+endif()
+
+if(enable_examples)
+  enable_testing()
+  add_subdirectory(EXAMPLE)
+endif()
+
+# file(WRITE "make.defs" "# can be exposed to users" ${CMAKE_C_COMPILER})
+# configure_file(${CMAKE_SOURCE_DIR}/make.inc.in ${CMAKE_BINARY_DIR}/make.inc)
+configure_file(${SuperLU_DIST_SOURCE_DIR}/make.inc.in ${SuperLU_DIST_SOURCE_DIR}/make.inc)
diff -ruN SuperLU_DIST_5.1.3/config.h.cmake superlu_dist5-5.1.3/config.h.cmake
--- SuperLU_DIST_5.1.3/config.h.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/config.h.cmake	2017-02-23 12:43:59.000000000 -0700
@@ -0,0 +1,28 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+
+#cmakedefine CMAKE_C_COMPILER_ID ${CMAKE_C_COMPILER_ID}
+#cmakedefine CMAKE_C_FLAGS ${CMAKE_C_FLAGS}
+#cmakedefine HAVE_BLAS
+#cmakedefine HAVE_CMAKE
+#cmakedefine HAVE_METIS
+#cmakedefine HAVE_MPI
+#cmakedefine HAVE_OPENMP
+#cmakedefine HAVE_PARMETIS
+#cmakedefine HOSTTYPE ${HOSTTYPE}
+#cmakedefine PROJECT_REV ${PROJECT_REV}
+#cmakedefine PROJECT_URL ${PROJECT_URL}
+#cmakedefine UQHOSTNAME ${UQHOSTNAME}
+#cmakedefine USE_VENDOR_BLAS
+#cmakedefine _CRAY
+#cmakedefine _OPENMP
+#cmakedefine __Aix
+#cmakedefine __cray
+#cmakedefine __ifort
+#cmakedefine __gfortran
+#cmakedefine __pathscale
+#cmakedefine __pgi
+#cmakedefine __Opteron
+#cmakedefine __xlf
+
+#endif 
diff -ruN SuperLU_DIST_5.1.3/INSTALL/CMakeLists.txt superlu_dist5-5.1.3/INSTALL/CMakeLists.txt
--- SuperLU_DIST_5.1.3/INSTALL/CMakeLists.txt	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/INSTALL/CMakeLists.txt	2017-02-23 12:43:59.000000000 -0700
@@ -0,0 +1,14 @@
+set(testdmachsrcs dmachtst.c)
+add_executable(testdmach ${testdmachsrcs})
+target_link_libraries(testdmach superlu_dist)
+install(TARGETS testdmach DESTINATION bin)
+
+set(testsmachsrc smachtst.c)
+add_executable(testsmach ${testsmachsrc})
+target_link_libraries(testsmach superlu_dist)
+install(TARGETS testsmach DESTINATION bin)
+
+#set(testtimersrc superlu_timer.c timertst.c)
+#add_executable(testtimer ${testtimersrc})
+#target_link_libraries(testtimer pthread ${Metis_STLIBS} ${ParMetis_STLIBS} ${MPI_STLIBS})
+#install(TARGETS testtimer DESTINATION bin)
diff -ruN SuperLU_DIST_5.1.3/scimake/CMakeLists.txt superlu_dist5-5.1.3/scimake/CMakeLists.txt
--- SuperLU_DIST_5.1.3/scimake/CMakeLists.txt	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/CMakeLists.txt	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,13 @@
+######################################################################
+#
+# @file    CMakeLists.txt
+#
+# @brief   for scimake
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
diff -ruN SuperLU_DIST_5.1.3/scimake/DetermineVisItArchitecture.cmake superlu_dist5-5.1.3/scimake/DetermineVisItArchitecture.cmake
--- SuperLU_DIST_5.1.3/scimake/DetermineVisItArchitecture.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/DetermineVisItArchitecture.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,105 @@
+#*****************************************************************************
+#
+# Copyright(c) 2000 - 2011-2014, Lawrence Livermore National Security, LLC
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+# Produced at the Lawrence Livermore National Laboratory
+# LLNL-CODE-400142
+#
+# This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
+# full Copyright notice is contained in the file COPYRIGHT located at the root
+# full See LICENSE file (EclipseLicense.txt) for conditions of use.
+# of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
+#
+# Redistribution  and  use  in  source  and  binary  forms,  with  or  without
+# modification, are permitted provided that the following conditions are met:
+#
+#  - Redistributions of  source code must  retain the above Copyright notice,
+#  - Redistributions of  source code must  retain the above See LICENSE file (EclipseLicense.txt) for conditions of use.
+#    this list of conditions and the disclaimer below.
+#  - Redistributions in binary form must reproduce the above Copyright notice,
+#  - Redistributions in binary form must reproduce the above See LICENSE file (EclipseLicense.txt) for conditions of use.
+#    this  list of  conditions  and  the  disclaimer(as noted below)  in  the
+#    documentation and/or other materials provided with the distribution.
+#  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
+#    be used to endorse or promote products derived from this software without
+#    specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE
+# ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
+# LLC, THE  U.S.  DEPARTMENT OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR  ANY
+# DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY, OR CONSEQUENTIAL
+# DAMAGES(INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
+# SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
+# CAUSED AND ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
+# LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
+# OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+# DAMAGE.
+#
+# Modifications:
+#   Eric Brugger, Thu Feb 25 16:06:22 PST 2010
+#   I enclosed all variables that were used in tests involving STREQUAL
+#   in ${} and enclosed all literal strings that were used in tests
+#   involving STREQUAL in double quotes so that it would create the
+#   correct architecture string on AIX.
+#
+#   I modified the architecture string it generates on AIX to be either
+#   ibm-aix-pwr or ibm-aix-pwr64.
+#
+#   Brad Whitlock, Tue Jan 25 12:28:55 PST 2011
+#   I made Mac 10.x and later use darwin-x86_64.
+#
+#****************************************************************************/
+
+macro(DETERMINE_VISIT_ARCHITECTURE ARCH)
+    if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
+        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc")
+            set(${ARCH} linux-ppc)
+        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc64")
+            set(${ARCH} linux-ppc64)
+        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
+            set(${ARCH} linux-x86_64)
+        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ia64")
+            set(${ARCH} linux-ia64)
+        else ()
+            set(${ARCH} linux-intel)
+        endif ()
+    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "AIX")
+        if ($ENV{OBJECT_MODE} STREQUAL "32")
+            set(${ARCH} "ibm-aix-pwr")
+        else ()
+            set(${ARCH} "ibm-aix-pwr64")
+        endif ()
+    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
+        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
+          set(${ARCH} darwin-x86_64)
+        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i386")
+          execute_process(COMMAND uname -r
+              OUTPUT_STRIP_TRAILING_WHITESPACE
+              OUTPUT_VARIABLE _OSX_VERSION)
+          string(SUBSTRING ${_OSX_VERSION} 0 1 _OSX_MAJOR_VERSION)
+          if (${_OSX_MAJOR_VERSION} STREQUAL "1")
+            # This will match 10, 11, 12, ...
+            set(${ARCH} darwin-x86_64)
+          else ()
+            set(${ARCH} darwin-i386)
+          endif ()
+        else ()
+          set(${ARCH} darwin-ppc)
+        endif ()
+    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
+        set(${ARCH} "freebsd-${CMAKE_SYSTEM_VERSION}")
+    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "IRIX")
+        set(${ARCH} sgi-irix6-mips2)
+    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
+        set(${ARCH} "sun4-${CMAKE_SYSTEM_VERSION}-sparc")
+    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Tru64")
+        set(${ARCH} dec-osf1-alpha)
+    else ()
+        # Unhandled case. Make up a string.
+        set(VISITARCHTMP "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
+        string(TOLOWER ${VISITARCHTMP} ${ARCH})
+    endif ()
+endmacro(DETERMINE_VISIT_ARCHITECTURE ARCH)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/EclipseLicense.txt superlu_dist5-5.1.3/scimake/EclipseLicense.txt
--- SuperLU_DIST_5.1.3/scimake/EclipseLicense.txt	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/EclipseLicense.txt	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,251 @@
+Eclipse Public License -v 1.0
+
+THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS
+ECLIPSE PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR
+DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF
+THIS AGREEMENT.
+
+1. DEFINITIONS
+
+"Contribution" means:
+
+a) in the case of the initial Contributor, the initial code and
+documentation distributed under this Agreement, and
+
+b) in the case of each subsequent Contributor:
+
+i) changes to the Program, and
+
+ii) additions to the Program;
+
+where such changes and/or additions to the Program originate from
+and are distributed by that particular Contributor. A
+Contribution 'originates' from a Contributor if it was added to
+the Program by such Contributor itself or anyone acting on such
+Contributor's behalf. Contributions do not include additions to
+the Program which: (i) are separate modules of software
+distributed in conjunction with the Program under their own
+license agreement, and (ii) are not derivative works of the
+Program.
+
+"Contributor" means any person or entity that distributes the
+Program.
+
+"Licensed Patents" mean patent claims licensable by a
+Contributor which are necessarily infringed by the use or sale of
+its Contribution alone or when combined with the Program.
+
+"Program" means the Contributions distributed in accordance with
+this Agreement.
+
+"Recipient" means anyone who receives the Program under this
+Agreement, including all Contributors.
+
+
+2. GRANT OF RIGHTS
+
+a) Subject to the terms of this Agreement, each Contributor
+hereby grants Recipient a non-exclusive, worldwide, royalty-free
+copyright license to reproduce, prepare derivative works of,
+publicly display, publicly perform, distribute and sublicense the
+Contribution of such Contributor, if any, and such derivative
+works, in source code and object code form.
+
+b) Subject to the terms of this Agreement, each Contributor
+hereby grants Recipient a non-exclusive, worldwide, royalty-free
+patent license under Licensed Patents to make, use, sell, offer
+to sell, import and otherwise transfer the Contribution of such
+Contributor, if any, in source code and object code form. This
+patent license shall apply to the combination of the Contribution
+and the Program if, at the time the Contribution is added by the
+Contributor, such addition of the Contribution causes such
+combination to be covered by the Licensed Patents. The patent
+license shall not apply to any other combinations which include
+the Contribution. No hardware per se is licensed hereunder.
+
+c) Recipient understands that although each Contributor grants
+the licenses to its Contributions set forth herein, no assurances
+are provided by any Contributor that the Program does not
+infringe the patent or other intellectual property rights of any
+other entity. Each Contributor disclaims any liability to
+Recipient for claims brought by any other entity based on
+infringement of intellectual property rights or otherwise. As a
+condition to exercising the rights and licenses granted
+hereunder, each Recipient hereby assumes sole responsibility to
+secure any other intellectual property rights needed, if any. For
+example, if a third party patent license is required to allow
+Recipient to distribute the Program, it is Recipient's
+responsibility to acquire that license before distributing the
+Program.
+
+d) Each Contributor represents that to its knowledge it has
+sufficient Copyright rights in its Contribution, if any, to grant
+sufficient See LICENSE file (EclipseLicense.txt) for conditions of use.
+the Copyright license set forth in this Agreement.
+the See LICENSE file (EclipseLicense.txt) for conditions of use.
+
+
+3. REQUIREMENTS
+
+A Contributor may choose to distribute the Program in object code
+form under its own license agreement, provided that:
+
+a) it complies with the terms and conditions of this Agreement;
+and
+
+b) its license agreement:
+
+i) effectively disclaims on behalf of all Contributors all
+warranties and conditions, express and implied, including
+warranties or conditions of title and non-infringement, and
+implied warranties or conditions of merchantability and fitness
+for a particular purpose;
+
+ii) effectively excludes on behalf of all Contributors all
+liability for damages, including direct, indirect, special,
+incidental and consequential damages, such as lost profits;
+
+iii) states that any provisions which differ from this Agreement
+are offered by that Contributor alone and not by any other party;
+and
+
+iv) states that source code for the Program is available from
+such Contributor, and informs licensees how to obtain it in a
+reasonable manner on or through a medium customarily used for
+software exchange. When the Program is made available in source
+code form:
+
+a) it must be made available under this Agreement; and
+
+b) a copy of this Agreement must be included with each copy of
+the Program. Contributors may not remove or alter any copyright
+notices contained within the Program.
+
+Each Contributor must identify itself as the originator of its
+Contribution, if any, in a manner that reasonably allows
+subsequent Recipients to identify the originator of the
+Contribution.
+
+
+4. COMMERCIAL DISTRIBUTION
+
+Commercial distributors of software may accept certain
+responsibilities with respect to end users, business partners and
+the like. While this license is intended to facilitate the
+commercial use of the Program, the Contributor who includes the
+Program in a commercial product offering should do so in a manner
+which does not create potential liability for other Contributors.
+Therefore, if a Contributor includes the Program in a commercial
+product offering, such Contributor ("Commercial Contributor")
+hereby agrees to defend and indemnify every other Contributor
+("Indemnified Contributor") against any losses, damages and costs
+(collectively "Losses") arising from claims, lawsuits and other
+legal actions brought by a third party against the Indemnified
+Contributor to the extent caused by the acts or omissions of such
+Commercial Contributor in connection with its distribution of the
+Program in a commercial product offering. The obligations in this
+section do not apply to any claims or Losses relating to any
+actual or alleged intellectual property infringement. In order to
+qualify, an Indemnified Contributor must: a) promptly notify the
+Commercial Contributor in writing of such claim, and b) allow the
+Commercial Contributor to control, and cooperate with the
+Commercial Contributor in, the defense and any related settlement
+negotiations. The Indemnified Contributor may participate in any
+such claim at its own expense.
+
+For example, a Contributor might include the Program in a
+commercial product offering, Product X. That Contributor is then
+a Commercial Contributor. If that Commercial Contributor then
+makes performance claims, or offers warranties related to Product
+X, those performance claims and warranties are such Commercial
+Contributor's responsibility alone. Under this section, the
+Commercial Contributor would have to defend claims against the
+other Contributors related to those performance claims and
+warranties, and if a court requires any other Contributor to pay
+any damages as a result, the Commercial Contributor must pay
+those damages.
+
+
+5. NO WARRANTY
+
+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS
+PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
+ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT
+LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE,
+NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
+PURPOSE. Each Recipient is solely responsible for determining the
+appropriateness of using and distributing the Program and assumes
+all risks associated with its exercise of rights under this
+Agreement , including but not limited to the risks and costs of
+program errors, compliance with applicable laws, damage to or
+loss of data, programs or equipment, and unavailability or
+interruption of operations.
+
+
+6. DISCLAIMER OF LIABILITY
+
+EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER
+RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST
+PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
+IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF
+THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN
+IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+
+
+7. GENERAL
+
+If any provision of this Agreement is invalid or unenforceable
+under applicable law, it shall not affect the validity or
+enforceability of the remainder of the terms of this Agreement,
+and without further action by the parties hereto, such provision
+shall be reformed to the minimum extent necessary to make such
+provision valid and enforceable.
+
+If Recipient institutes patent litigation against any entity
+(including a cross-claim or counterclaim in a lawsuit) alleging
+that the Program itself (excluding combinations of the Program
+with other software or hardware) infringes such Recipient's
+patent(s), then such Recipient's rights granted under Section
+2(b) shall terminate as of the date such litigation is filed. All
+Recipient's rights under this Agreement shall terminate if it
+fails to comply with any of the material terms or conditions of
+this Agreement and does not cure such failure in a reasonable
+period of time after becoming aware of such noncompliance. If all
+Recipient's rights under this Agreement terminate, Recipient
+agrees to cease use and distribution of the Program as soon as
+reasonably practicable. However, Recipient's obligations under
+this Agreement and any licenses granted by Recipient relating to
+the Program shall continue and survive.
+
+Everyone is permitted to copy and distribute copies of this
+Agreement, but in order to avoid inconsistency the Agreement is
+copyrighted and may only be modified in the following manner. The
+Agreement Steward reserves the right to publish new versions
+(including revisions) of this Agreement from time to time. No one
+other than the Agreement Steward has the right to modify this
+Agreement. The Eclipse Foundation is the initial Agreement
+Steward. The Eclipse Foundation may assign the responsibility to
+serve as the Agreement Steward to a suitable separate entity.
+Each new version of the Agreement will be given a distinguishing
+version number. The Program (including Contributions) may always
+be distributed subject to the version of the Agreement under
+which it was received. In addition, after a new version of the
+Agreement is published, Contributor may elect to distribute the
+Program (including its Contributions) under the new version.
+Except as expressly stated in Sections 2(a) and 2(b) above,
+Recipient receives no rights or licenses to the intellectual
+property of any Contributor under this Agreement, whether
+expressly, by implication, estoppel or otherwise. All rights in
+the Program not expressly granted under this Agreement are
+reserved.
+
+This Agreement is governed by the laws of the State of Colorado
+and the intellectual property laws of the United States of
+America. No party to this Agreement will bring a legal action
+under this Agreement more than one year after the cause of action
+arose. Each party waives its rights to a jury trial in any
+resulting litigation.
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Makefile.show superlu_dist5-5.1.3/scimake/Makefile.show
--- SuperLU_DIST_5.1.3/scimake/Makefile.show	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Makefile.show	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,18 @@
+######################################################################
+#
+# Makefile.show: A PETSc Makefile to get PETSc variables
+#
+# $Id: Makefile.show 1079 2016-09-09 00:05:24Z cary $
+#
+# Copyright 2010-2015 Tech-X Corporation.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+# Makefile to grab PETSc make variables
+# PETSC_DIR is passed though CMake
+include ${PETSC_CONF_DIR}/rules
+include ${PETSC_CONF_DIR}/variables
+showvar:
+        -@echo -n  ${${PKG_VARIABLE}}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/mklinks.sh superlu_dist5-5.1.3/scimake/mklinks.sh
--- SuperLU_DIST_5.1.3/scimake/mklinks.sh	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/mklinks.sh	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,37 @@
+#!/bin/sh
+######################################################################
+#
+# @file    mklinks.sh
+#
+# @brief   Make links from one directory to another if distinct.  Create target.
+#          Args:
+#            1: target stamp file
+#            2: source directory
+#            3-: all files to be linked
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+# Get directories and files
+stampfile=$1
+shift
+sourcedir=`(cd $1; pwd -P)`
+shift
+destdir=`pwd -P`
+files="$*"
+echo Linking $* from $sourcedir to $destdir.
+if test "$destdir" = "$sourcedir"; then
+  touch $stampfile
+  echo "Not making links as source directory is destination directory."
+  exit 0
+fi
+rm -f $files
+for i in $files; do
+  ln -s $sourcedir/$i $destdir/$i
+done
+touch $stampfile
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindEpicsExtensions.cmake superlu_dist5-5.1.3/scimake/Modules/FindEpicsExtensions.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindEpicsExtensions.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindEpicsExtensions.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,46 @@
+# - FindEpicsExtensions: Module to find include directories and libraries
+#   for Epics Extensions. This module was implemented as there is no stock
+#   CMake module for Epics.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(EpicsExtensions REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_EPICSEXTENSIONS = Whether have the Epics Extensions library
+#  EpicsExtensions_INCLUDE_DIRS = Location of Epics Extensions includes
+#  EpicsExtensions_LIBRARY_DIRS = Location of Epics Extensions libraries
+#  EpicsExtensions_LIBRARIES    = Required libraries
+#  EpicsExtensions_STLIBS       = Location of Epics Extensions static library
+
+######################################################################
+#
+# FindEpicsExtensions: find includes and libraries for Epics Extensions
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(epicsdir epics-par)
+  set(sddslib SDDSmpi)
+  set(pgapacklib ";pgapack")
+else ()
+  set(epicsdir epics)
+  set(sddslib SDDS1)
+  set(pgapacklib "")
+endif ()
+
+SciFindPackage(
+        PACKAGE EpicsExtensions
+        INSTALL_DIR "${epicsdir}/extensions"
+        HEADERS "awe.h;gsl/gsl_poly.h"
+        LIBRARIES
+  "mdbcommon;matlib;fftpack;${sddslib};rpnlib;mdbmth;namelist;mdblib;meschach;gsl${pgapacklib}"
+        INCLUDE_SUBDIRS "src/SDDS/include;src/SDDS/gsl"
+        LIBRARY_SUBDIRS "lib/linux-x86_64;lib/linux-x86"
+)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciAcis3DInterOp.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciAcis3DInterOp.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciAcis3DInterOp.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciAcis3DInterOp.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,103 @@
+# - FindAcis3DInterOp: Module to find include directories and
+#   libraries for ACIS Acis3D Interop Library
+#
+# Module usage:
+#   find_package(Acis3DInterOp ...)
+#
+# This module will define the following variables:
+#  HAVE_ACIS3DINTEROP, ACIS3DINTEROP_FOUND = Whether libraries and includes are found
+#  Acis3DInterOp_INCLUDE_DIRS    = Location of Acis3DInterOp includes
+#  Acis3DInterOp_LIBRARY_DIRS    = Location of Acis3DInterOp libraries
+#  Acis3DInterOp_LIBRARIES       = Required libraries
+
+######################################################################
+#
+# FindAcis3DInterOp: find includes and libraries for ACIS 3D Interop Libray
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# many of the following libraries may not be needed
+set(Acis3DInterOp_LIBRARY_LIST
+  #SPAIParasolid
+  SPAXAcisAssemblyExporter
+  SPAXAcisAssemblyImporter
+  SPAXAcisBase
+  SPAXAcisGeometryKernelUtils
+  SPAXAcisKernel
+  SPAXAcisManufacturingImporter
+  SPAXAcisMeshExporter
+  SPAXAcisMeshImporter
+  SPAXAcisPMIEntities
+  SPAXAcisPMIImporter
+  SPAXAssemblyRep
+  SPAXBase
+  SPAXCATIAV4Base
+  SPAXCommon
+  SPAXDefaultHeaderExporter
+  SPAXDefaultHeaderImporter
+  SPAXEBOMAssemblyExporter
+  SPAXEBOMAssemblyImporter
+  SPAXEBOMBase
+  #SPAXGeneric
+  #SPAXGenericManufacturingImporter
+  #SPAXGenericPMIImporter
+  SPAXGeometryRepresentation
+  SPAXInterop
+  SPAXInteropTkBRep
+  SPAXInteropTkBase
+  SPAXML
+  SPAXManufacturingRep
+  SPAXMeshRep
+  SPAXPMIRep
+  SPAXProeBase
+  SPAXProeManufacturingExporter
+  SPAXProePMIExporter
+  SPAXPropertiesAssemblyImporter
+  SPAXPropertiesBRepImporter
+  SPAXPropertiesBase
+  SPAXPropertiesHeaderImporter
+  SPAXXMLTk
+  SPAXXercesUtils
+  SPAXicuin38
+  SPAXicuio38
+  SPAXicuuc38
+  SpaACIS
+  icudt38
+  twofish
+  xacis2k
+  xcatia
+  xcore2k
+  xiges
+  #xmil
+  xproe
+  xstep
+  xvda
+)
+
+set(instdirs "Acis3DInterOp")
+
+SciFindPackage(PACKAGE "Acis3DInterOp"
+  INSTALL_DIR ${instdirs}
+  HEADERS "SPAIInterop.h"
+  LIBRARIES ${Acis3DInterOp_LIBRARY_LIST}
+  LIBRARY_SUBDIRS "/bin/macos_a64"
+)
+
+if (ACIS3DINTEROP_FOUND)
+  message(STATUS "[FindSciAcis3DInterOp.cmake] - Found Acis3DInterOp")
+  message(STATUS "[FindSciAcis3DInterOp.cmake] - Acis3DInterOp_INCLUDE_DIRS = ${Acis3DInterOp_INCLUDE_DIRS}")
+  message(STATUS "[FindSciAcis3DInterOp.cmake] - Acis3DInterOp_LIBRARIES = ${Acis3DInterOp_LIBRARIES}")
+  set(HAVE_ACIS3DINTEROP 1 CACHE BOOL "Whether have Acis3DInterOp.")
+else ()
+  message(STATUS "[FindSciAcis3DInterOp.cmake] - Did not find ACIS3DINTEROP, use -DACIS3DINTEROP_DIR to supply the ACIS3DINTEROP installation directory.")
+  if (SciAcis3DInterOp_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciAcis3DInterOp.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciAcisVizExchange.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciAcisVizExchange.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciAcisVizExchange.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciAcisVizExchange.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,52 @@
+# - FindAcisVizExchange: Module to find include directories and
+#   libraries for ACIS Viz Exchange Library
+#
+# Module usage:
+#   find_package(AcisVizExchange ...)
+#
+# This module will define the following variables:
+#  HAVE_ACISVIZEXCHANGE, ACISVIZEXCHANGE_FOUND = Whether libraries and includes are found
+#  AcisVizExchange_INCLUDE_DIRS    = Location of AcisVizExchange includes
+#  AcisVizExchange_LIBRARY_DIRS    = Location of AcisVizExchange libraries
+#  AcisVizExchange_LIBRARIES       = Required libraries
+
+######################################################################
+#
+# FindAcisVizExchange: find includes and libraries for ACIS 3D Interop Libray
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(AcisVizExchange_LIBRARY_LIST
+  SpaACIS
+  SpaHBridge
+  SpaHPart
+  hoops1918
+)
+
+set(instdirs "AcisVizExchange")
+
+SciFindPackage(PACKAGE "AcisVizExchange"
+  INSTALL_DIR ${instdirs}
+  HEADERS "spa_unlock_state.h"
+  LIBRARIES ${AcisVizExchange_LIBRARY_LIST}
+  LIBRARY_SUBDIRS "/bin/macos_a64"
+)
+
+if (ACISVIZEXCHANGE_FOUND)
+  message(STATUS "[FindSciAcisVizExchange.cmake] - Found AcisVizExchange")
+  message(STATUS "[FindSciAcisVizExchange.cmake] - AcisVizExchange_INCLUDE_DIRS = ${AcisVizExchange_INCLUDE_DIRS}")
+  message(STATUS "[FindSciAcisVizExchange.cmake] - AcisVizExchange_LIBRARIES = ${AcisVizExchange_LIBRARIES}")
+  set(HAVE_ACISVIZEXCHANGE 1 CACHE BOOL "Whether have AcisVizExchange.")
+else ()
+  message(STATUS "[FindSciAcisVizExchange.cmake] - Did not find ACISVIZEXCHANGE, use -DACISVIZEXCHANGE_DIR to supply the ACISVIZEXCHANGE installation directory.")
+  if (SciAcisVizExchange_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciAcisVizExchange.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciAdios.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciAdios.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciAdios.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciAdios.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+# - FindSciAdios: Module to find include directories and libraries for
+#   Adios. This module was implemented as there is no stock CMake
+#   module for Adios.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciAdios REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_ADIOS         = Whether have the Adios library
+#  Adios_INCLUDE_DIRS = Location of Adios includes
+#  Adios_LIBRARY_DIRS = Location of Adios libraries
+#  Adios_LIBRARIES    = Required libraries
+
+######################################################################
+#
+# SciFindAdios: find includes and libraries for Adios
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(PACKAGE "Adios"
+              INSTALL_DIR "adios"
+              HEADERS "adios.h"
+              LIBRARIES "adios"
+              MODULES "adios"
+              )
+
+if (ADIOS_FOUND)
+  message(STATUS "Found Adios")
+  set(HAVE_ADIOS 1 CACHE BOOL "Whether have the ADIOS library")
+else ()
+  message(STATUS "Did not find Adios.  Use -DADIOS_DIR to specify the installation directory.")
+  if (SciAdios_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciAtlas.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciAtlas.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciAtlas.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciAtlas.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,51 @@
+# - FindSciAtlas: Module to find include directories and
+#   libraries for Atlas.
+#
+# Module usage:
+#   find_package(SciAtlas ...)
+#
+# This module will define the following variables:
+#  HAVE_ATLAS, ATLAS_FOUND = Whether libraries and includes are found
+#  Atlas_INCLUDE_DIRS = Location of Atlas includes
+#  Atlas_LIBRARY_DIRS = Location of Atlas libraries
+#  Atlas_LIBRARIES    = Required libraries
+
+######################################################################
+#
+# FindSciAtlas: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Note from Jon Rood 8/24/2012:
+# The library order in this probably isn't ideal, but after trying
+# several permutations of linking order, this LIBRARIES line with
+# duplicates works for linking Atlas and MAGMA to GPULib and the optional
+# ALLOW_LIBRARY_DUPLICATES parameter for SciFindPackage was created
+# specifically for doing this. If someone is looking to use SciFindAtlas
+# and wants to change anything here, you should consult the GPULib project.
+
+set(ALLOW_LIBRARY_DUPLICATES TRUE)
+
+SciFindPackage(PACKAGE "Atlas"
+              INSTALL_DIR "atlas"
+              HEADERS "clapack.h;cblas.h"
+              LIBRARIES "lapack;atlas;cblas;f77blas;lapack;atlas;lapack"
+              ALLOW_LIBRARY_DUPLICATES
+              )
+
+if (ATLAS_FOUND)
+  message(STATUS "Atlas found.")
+  set(HAVE_ATLAS 1 CACHE BOOL "Whether have Atlas")
+else ()
+  message(STATUS "Did not find Atlas.  Use -DAtlas_ROOT_DIR to specify the installation directory.")
+  if (SciAtlas_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciBabel.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciBabel.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciBabel.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciBabel.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,62 @@
+# - FindSciBabel: Module to find include directories and libraries
+#   for Babel. This module was implemented as there is no stock
+#   CMake module for Babel.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciBabel REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_BABEL         = Whether have the Babel library
+#  Babel_INCLUDE_DIRS = Location of Babel includes
+#  Babel_LIBRARY_DIRS = Location of Babel libraries
+#  Babel_LIBRARIES    = Required libraries
+#  Babel_STLIBS       = Location of Babel static library
+
+######################################################################
+#
+# FindSciBabel: find includes and libraries for Babel
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Find shared libs
+SciFindPackage(PACKAGE "BabelShared"
+  INSTALL_DIR "babel-shared"
+  HEADERS "sidl.h;sidl.hxx;sidl.inc"
+  INCLUDE_SUBDIRS "include/c;include/cxx;include/f77;include/python2.6/llnl_babel;include/$PYDIR/babel"
+  LIBRARIES "sidlstub_cxx;sidlstub_f90;sidl;chasmlite"
+  MODULES "sidl"
+  MODULE_SUBDIRS "include/f90"
+)
+if (BABELSHARED_FOUND)
+  set(HAVE_BABEL_SHARED 1 CACHE BOOL "Whether have the BABEL_SHARED library")
+endif ()
+
+# Find static libs
+SciFindPackage(PACKAGE "BabelStatic"
+  INSTALL_DIR "babel-static"
+  HEADERS "sidl.h;sidl.hxx;sidl.inc"
+  INCLUDE_SUBDIRS "include/c;include/cxx;include/f77"
+  LIBRARIES "sidlstub_cxx;sidlstub_f90;sidl;chasmlite"
+  MODULES "sidl"
+  MODULE_SUBDIRS "include/f90"
+)
+if (BABELSTATIC_FOUND)
+  set(HAVE_BABEL_STATIC 1 CACHE BOOL "Whether have the BABEL_STATIC library")
+endif ()
+# Make sure these are static
+SciGetStaticLibs("${BabelStatic_LIBRARIES}" BabelStatic_LIBRARIES)
+
+# Combined parameters
+if (BABELSHARED_FOUND OR BABELSTATIC_FOUND)
+  set(HAVE_ANY_BABEL 1 CACHE BOOL "Whether have any BABEL library")
+endif ()
+if (BABELSHARED_FOUND AND BABELSTATIC_FOUND)
+  set(HAVE_BOTH_BABEL 1 CACHE BOOL "Whether have both BABEL libraries")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciBlasLapack.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciBlasLapack.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciBlasLapack.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciBlasLapack.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,162 @@
+# - FindSciBlasLapack: find includes and libraries for lapack and blas
+#
+# This is a work in progress.  The goal is to find Blas and Lapack.
+# Since we make use of the standard CMake find packages, variables
+# are all CAPS, rather than CamelCaps as dictated by Tech-X conventions.
+#
+# This should be included after either Trilinos or PETSc is found,
+# if they are used, so that their third party libraries can be used
+# to set Blas and Lapack.
+#
+# The determining invocation args are
+#  -DLAPACK_LIBRARIES:PATH="<lapacklibs>" -DBLAS_LIBRARIES:PATH="<blaslibs>"
+#
+# One can also set
+#  -DLAPACK_LIBRARY_DIRS:PATH='<lapackdirs>' -DLAPACK_LIBRARY_NAMES:STRING='lapacknames' -DBLAS_LIBRARY_DIRS:PATH='<blasdirs>' -DBLAS_LIBRARY_NAMES:STRING='blasnames'
+#
+# If the libraries are still not found, we use the following search order
+# Optionally: use whatever trilinos linked against
+#   if trilinos found.
+# Optionally: use whatever PETSc linked against if PETSc
+#   found.(This is the FACETS preference.)
+# System optimized(use FCLIBS or equiv to help link):
+#   -framework Accelerate
+#   essl
+#   mkl
+#   acml
+#   /contrib/atlas-ser(the one built againt lapack)
+#   /contrib/altas-clp(the one built against clapack)
+#   Other ATLAS in system directories
+#   Other system lapack-blas in system directories.
+#   Optionally GOTO(as it has a funky license)
+# lapack in /contrib
+# clapack in /contrib
+#
+
+######################################################################
+#
+# FindSciBlasLapack.cmake: find includes and libraries Blas and Lapack
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciSeparateLibs.cmake)
+# Heading
+message("")
+message("--------- FindSciBlasLapack looking for Blas and Lapack ---------")
+
+# Apple is a special case
+if (APPLE)
+  find_library(ACCELERATE_FRAMEWORK Accelerate)
+endif ()
+
+# Allow specification of
+#   LAPACK_LIBRARIES
+#     OR
+#   (LAPACK_LIBRARY_NAMES AND (LAPACK_LIBRARY_DIRS OR LAPACK_DIRS))
+#   and then find the other
+if (APPLE)
+  set(LAPACK_LIBRARIES ${ACCELERATE_FRAMEWORK})
+elseif (LAPACK_LIBRARIES)
+  if (NOT(LAPACK_LIBRARY_DIRS AND LAPACK_LIBRARY_NAMES))
+    SciSeparateLibs(${LAPACK_LIBRARIES} LAPACK_LIBFLAGS LAPACK_LIBRARY_DIRS LAPACK_LIBRARY_NAMES)
+  endif ()
+else ()
+  if (NOT LAPACK_LIBRARY_NAMES)
+    set(LAPACK_LIBRARY_NAMES_SAV ${LAPACK_LIBRARY_NAMES})
+    set(LAPACK_LIBRARY_NAMES lapack)
+  endif ()
+  if (LAPACK_DIRS)
+    set(sfxs lib)
+  elseif (LAPACK_LIBRARY_DIRS)
+    set(sfxs)
+    foreach (libdir ${LAPACK_LIBRARY_DIRS})
+      get_filename_component(dir ${libdir}/.. REALPATH)
+      set(LAPACK_DIRS ${LAPACK_DIRS} ${dir})
+      get_filename_component(sfx ${libdir} NAME)
+      set(sfxs ${sfxs} ${sfx})
+    endforeach ()
+  endif ()
+  message("LAPACK_DIRS = ${LAPACK_DIRS}.")
+  foreach (libname ${LAPACK_LIBRARY_NAMES})
+    if (LAPACK_DIRS)
+      # message("Looking for ${libname} in ${LAPACK_DIRS} / ${sfxs}.")
+      find_library(mylapacklib ${libname} PATHS ${LAPACK_DIRS}
+        PATH_SUFFIXES ${sfxs}
+        NO_DEFAULT_PATH
+      )
+      # message("Result: mylapacklib = ${mylapacklib}.")
+    else ()
+      find_library(mylapacklib ${libname})
+    endif ()
+    if (mylapacklib)
+      set(LAPACK_LIBRARIES ${LAPACK_LIBRARIES} ${mylapacklib})
+    endif ()
+  endforeach ()
+  if (NOT LAPACK_LIBRARIES)
+    set(LAPACK_LIBRARY_NAMES ${LAPACK_LIBRARY_NAMES_SAV})
+  endif ()
+endif ()
+if (LAPACK_LIBRARIES)
+  SciGetStaticLibs("${LAPACK_LIBRARIES}" LAPACK_STLIBS)
+endif ()
+
+# Allow specification of
+#   BLAS_LIBRARIES
+#     OR
+#   (BLAS_LIBRARY_NAMES AND (BLAS_LIBRARY_DIRS OR BLAS_DIRS))
+#   and then find the other
+if (APPLE)
+  set(BLAS_LIBRARIES ${ACCELERATE_FRAMEWORK})
+elseif (BLAS_LIBRARIES)
+#  if (NOT(BLAS_LIBRARY_DIRS AND BLAS_LIBRARY_NAMES))
+#    SciSeparateLibs(${BLAS_LIBRARIES} BLAS_LIBFLAGS LAPACK_LIBRARY_LIBRARIES BLAS_LIBRARY_DIRS BLAS_LIBRARY_NAMES)
+#  endif ()
+else ()
+  if (NOT BLAS_LIBRARY_NAMES)
+    set(BLAS_LIBRARY_NAMES_SAV ${BLAS_LIBRARY_NAMES})
+    set(BLAS_LIBRARY_NAMES blas)
+  endif ()
+  if (BLAS_DIRS)
+    set(sfxs lib)
+  elseif (BLAS_LIBRARY_DIRS)
+    set(sfxs)
+    foreach (libdir ${BLAS_LIBRARY_DIRS})
+      get_filename_component(dir ${libdir}/.. REALPATH)
+      set(BLAS_DIRS ${BLAS_DIRS} ${dir})
+      get_filename_component(sfx ${libdir} NAME)
+      set(sfxs ${sfxs} ${sfx})
+    endforeach ()
+  endif ()
+  foreach (libname ${BLAS_LIBRARY_NAMES})
+    if (BLAS_DIRS)
+      find_library(FOUND${libname} ${libname} PATHS ${BLAS_DIRS}
+        PATH_SUFFIXES ${sfxs}
+        NO_DEFAULT_PATH
+      )
+    else ()
+      find_library(FOUND${libname} ${libname})
+    endif ()
+    if (FOUND${libname})
+      set(BLAS_LIBRARIES ${BLAS_LIBRARIES} ${FOUND${libname}})
+    endif ()
+  endforeach ()
+
+  if (NOT BLAS_LIBRARIES)
+    set(BLAS_LIBRARY_NAMES ${BLAS_LIBRARY_NAMES_SAV})
+  endif ()
+endif ()
+if (BLAS_LIBRARIES)
+  SciGetStaticLibs("${BLAS_LIBRARIES}" BLAS_STLIBS)
+endif ()
+
+message(STATUS "")
+SciPrintCMakeResults(LAPACK)
+message(STATUS "")
+SciPrintCMakeResults(BLAS)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciBoost.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciBoost.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciBoost.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciBoost.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,123 @@
+# - FindSciBoost: Module to find include directories and libraries for
+#   Boost. This module was originally developed to set the
+#   SUPRA_SEARCH_PATH, so that the system path was not checked before
+#   the user specified path, and included the stock FindBoost. This
+#   changed after quite a few modifications, as it would still look at
+#   system path if the libraries weren't found in the user specified
+#   path.
+#
+#   Should be modified to include the stock FindBoost?
+#
+# This module can be included in CMake builds using find_package:
+#   find_package(SciBoost REQUIRED signals filesystem system ...)
+#
+# The components list needs to contain actual names of boost libraries
+# only: signals for libboost_signals, system for libboost_system, etc.
+#
+# This module will define the following variables:
+#   BOOST_FOUND, HAVE_BOOST = True if Boost is found: the include directory was
+#                             found and all the libraries specified were found.
+#   Boost_INCLUDE_DIRS      = Location of Boost includes
+#   Boost_LIBRARY_DIRS      = Location of Boost libraries
+#   Boost_LIBRARIES         = Required libraries
+
+######################################################################
+#
+# FindSciBoost: find includes and libraries for boost
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+# Default: libraries have boost_ prepended.
+set(BOOST_LIB_PREFIX boost_)
+# But Windows static have libboost_ prepended.
+# JRC: Why was this line commented out? Needed for linking shared on Windows.
+# if (WIN32 AND NOT(USE_SHARED_LIBS OR BUILD_SHARED_LIBS OR ENABLE_SHARED))
+# if (WIN32)
+# Will try a compromise
+if (WIN32 AND NOT USE_SHARED_BOOST_LIBS)
+  set(BOOST_LIB_PREFIX libboost_)
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "BOOST_LIB_PREFIX = ${BOOST_LIB_PREFIX}.")
+endif ()
+
+# Set boost libraries to find
+if (DEBUG_CMAKE)
+  message(STATUS "SciBoost_FIND_COMPONENTS = ${SciBoost_FIND_COMPONENTS}.")
+  message(STATUS "SciBoost_FIND_REQUIRED = ${SciBoost_FIND_REQUIRED}.")
+endif ()
+set(SciBoost_LIBRARY_LIST "")
+foreach (COMPONENT ${SciBoost_FIND_COMPONENTS})
+  set(SciBoost_LIBRARY_LIST ${SciBoost_LIBRARY_LIST} ${BOOST_LIB_PREFIX}${COMPONENT})
+endforeach ()
+if (DEBUG_CMAKE)
+  message(STATUS "SciBoost_LIBRARY_LIST = ${SciBoost_LIBRARY_LIST}.")
+endif ()
+
+SciGetInstSubdirs(Boost instdirs)
+if (DEBUG_CMAKE)
+  message(STATUS "Boost instdirs = ${instdirs}.")
+endif ()
+SciFindPackage(PACKAGE "Boost"
+  INSTALL_DIRS ${instdirs}
+  HEADERS boost/thread.hpp OPTIONAL boost/align/aligned_allocator.hpp
+  LIBRARIES "${SciBoost_LIBRARY_LIST}"
+)
+unset(SciBoost_LIBRARY_LIST CACHE)
+if (DEBUG_CMAKE)
+  message(STATUS "Boost_DLLS = ${Boost_DLLS}.")
+endif ()
+
+# Determine whether Boost libs are shared
+set(Boost_LIBS_ARE_SHARED FALSE)
+if (Boost_DLLS)
+  set(Boost_LIBS_ARE_SHARED TRUE)
+else ()
+  list(GET Boost_LIBRARIES 0 blib0)
+  message(STATUS "blib0 = ${blib0}.")
+  if ((blib0 MATCHES "\\.dylib$") OR (blib0 MATCHES "\\.so$") OR (blib0 MATCHES "\\.so\\."))
+    set(Boost_LIBS_ARE_SHARED TRUE)
+  endif ()
+endif ()
+message(STATUS "Boost_LIBS_ARE_SHARED = ${Boost_LIBS_ARE_SHARED}.")
+
+# If Boost libs are shared, one must have different defines
+# http://boost.2283326.n4.nabble.com/Undefined-reference-to-main-with-Boost-Test -Why-td2576147.html
+if (Boost_LIBS_ARE_SHARED)
+  message(STATUS "Setting Boost shared library definitions")
+  set(Boost_DEFINITIONS -DBOOST_ALL_DYN_LINK)
+  if (WIN32 AND NOT Boost_boost_unit_test_framework_LIBRARY)
+# This reverses DYN_LINK for tests.  See boost/test/included/unit_test.hpp.
+    set(Boost_DEFINITIONS ${Boost_DEFINITIONS} -DBOOST_TEST_INCLUDED)
+  endif ()
+endif ()
+message(STATUS "Boost_DEFINITIONS = ${Boost_DEFINITIONS}.")
+
+# Final check
+if (BOOST_FOUND AND NOT Boost_INCLUDE_DIRS)
+  set(BOOST_FOUND FALSE)
+  message(STATUS "Reversing Boost found as Boost_INCLUDE_DIRS is empty.")
+endif ()
+
+if (BOOST_FOUND)
+  # message(STATUS "Found Boost")
+  set(HAVE_BOOST 1 CACHE BOOL "Whether have the Boost library")
+else ()
+  message(STATUS "Did not find Boost.  Use -DBoost_ROOT_DIR to specify installation directory.")
+  if (SciBoost_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed finding boost.")
+  endif ()
+endif ()
+
+# Set names for all the libs
+if ("${BOOST_LIB_PREFIX}" STREQUAL "libboost_")
+  foreach (COMPONENT ${SciBoost_FIND_COMPONENTS})
+    set(Boost_boost_${COMPONENT}_LIBRARY ${Boost_${BOOST_LIB_PREFIX}${COMPONENT}_LIBRARY})
+  endforeach ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciBotan.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciBotan.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciBotan.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciBotan.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,73 @@
+# - FindSciBotann: Module to find include directories and libraries
+#   for Botan. This module was implemented as there is no stock
+#   CMake module for Botan. This is currently being used by QuIDS
+#   project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciBotan REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_BOTAN         = Whether have the Botan library
+#  Botan_INCLUDE_DIRS = Location of Botan includes
+#  Botan_LIBRARY_DIRS = Location of Botan libraries
+#  Botan_LIBRARIES    = Required libraries
+#  Botan_STLIBS       = Static libraries (if found in same directory)
+#  Botan_DLLS         = Windows DLLs (if found in same dir or sister bin dir)
+#
+# ========= ========= ========= ========= ========= =============== ==========
+#
+# Variables used by this module, which can be set before calling find_package
+# to influence default behavior
+#
+# Botan_ROOT_DIR           Specifies the root dir of the Botan installation
+#
+# BUILD_WITH_PYCSH_RUNTIME Specifies to look for installation dirs,
+#                          botan-pycsh or botan-sersh
+# ENABLE_SHARED OR BUILD_WITH_SHARED_RUNTIME OR BUILD_SHARED_LIBS
+#                          operative if BUILD_WITH_PYCSH_RUNTIME not set
+#                          Specify to look for installation dir, botan-sersh.
+
+######################################################################
+#
+# SciFindBotan: find includes and libraries for Botan.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (BUILD_WITH_PYCSH_RUNTIME)
+  set(instdirs botan-pycsh botan-sersh)
+elseif (ENABLE_SHARED OR BUILD_WITH_SHARED_RUNTIME OR BUILD_SHARED_LIBS)
+  set(instdirs botan-sersh)
+else ()
+  set(instdirs botan)
+endif ()
+
+SciFindPackage(
+  PACKAGE Botan
+  INSTALL_DIRS ${instdirs}
+  HEADERS botan/botan.h
+  LIBRARIES botan
+)
+
+if (BOTAN_FOUND)
+  message(STATUS "Found Botan")
+  set(HAVE_BOTAN 1 CACHE BOOL "Whether have the BOTAN library")
+  if (WIN32 AND Botan_DLLS)
+# Botan sets this in its installed include files
+    # set(Botan_DEFINITIONS {$Botan_DEFINITIONS})
+  endif ()
+  message(STATUS "Botan_DEFINITIONS = ${Botan_DEFINITIONS}.")
+else ()
+  message(STATUS "Did not find Botan.  Use -DBOTAN_DIR to specify the installation directory.")
+  if (SciBotan_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCarve.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCarve.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCarve.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCarve.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,48 @@
+# - FindSciCarve: Module to find include directories and
+#   libraries for Carve.
+#
+# Module usage:
+#   find_package(SciCarve ...)
+#
+# This module will define the following variables:
+#  HAVE_CARVE, CARVE_FOUND = Whether libraries and includes are found
+#  Carve_INCLUDE_DIRS      = Location of Carve includes
+#  Carve_LIBRARY_DIRS      = Location of Carve libraries
+#  Carve_LIBRARIES         = Required libraries
+
+##################################################################
+#
+# Find module for CARVE
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+##################################################################
+
+set(Carve_LIBRARY_LIST
+  carve
+)
+
+SciFindPackage(
+  PACKAGE Carve
+  HEADERS carve.hpp
+  INCLUDE_SUBDIRS include/carve include
+  LIBRARIES ${Carve_LIBRARY_LIST}
+  PROGRAMS convert intersect slice triangulate view
+)
+
+if (CARVE_FOUND)
+  message(STATUS "[FindSciCarve.cmake] - Found CARVE")
+  message(STATUS "[FindSciCarve.cmake] - Carve_INCLUDE_DIRS = ${Carve_INCLUDE_DIRS}")
+  message(STATUS "[FindSciCarve.cmake] - Carve_LIBRARIES = ${Carve_LIBRARIES}")
+  set(HAVE_CARVE 1 CACHE BOOL "Whether have Carve.")
+else ()
+  message(STATUS "[FindSciCarve.cmake] - Did not find CARVE, use -DCARVE_DIR to supply the CARVE installation directory.")
+  if (SciCarve_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciCarve.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCfitsio.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCfitsio.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCfitsio.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCfitsio.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,44 @@
+# - FindSciCfitsion: Module to find include directories and libraries
+#   for Cfitsio. This module was implemented as there is no stock
+#   CMake module for Cfitsio. This is currently being used by QuIDS
+#   project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciCfitsio REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_CFITSIO         = Whether have the Cfitsio library
+#  Cfitsio_INCLUDE_DIRS = Location of Cfitsio includes
+#  Cfitsio_LIBRARY_DIRS = Location of Cfitsio libraries
+#  Cfitsio_LIBRARIES    = Required libraries
+#  Cfitsio_STLIBS       = Location of Cfitsio static library
+
+######################################################################
+#
+# SciFindCfitsio: find includes and libraries for Cfitsio.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "Cfitsio"
+              INSTALL_DIR "cfitsio"
+              HEADERS "fitsio.h"
+              LIBRARIES "cfitsio"
+              )
+
+if (CFITSIO_FOUND)
+  message(STATUS "Found Cfitsio")
+  set(HAVE_CFITSIO 1 CACHE BOOL "Whether have the CFITSIO library")
+else ()
+  message(STATUS "Did not find Cfitsio.  Use -DCFITSIO_DIR to specify the installation directory.")
+  if (SciCfitsio_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCgm.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCgm.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCgm.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCgm.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,50 @@
+# - FindSciCgm: Module to find include directories and
+#   libraries for Cgm.
+#
+# Module usage:
+#   find_package(SciCgm ...)
+#
+# This module will define the following variables:
+#  HAVE_CGM, CGM_FOUND = Whether libraries and includes are found
+#  Cgm_INCLUDE_DIRS       = Location of Cgm includes
+#  Cgm_LIBRARY_DIRS       = Location of Cgm libraries
+#  Cgm_LIBRARIES          = Required libraries
+#  Cgm_DLLS               =
+
+######################################################################
+#
+# FindCgm: find includes and libraries of cgm
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (NOT DEFINED CGM_COMPONENTS)
+  set(cgmfindlibs cgm)
+else ()
+  set(cgmfindlibs ${CGM_COMPONENTS})
+endif ()
+
+set(USE_PYC_LIBS TRUE)
+if (NOT DEFINED USE_SHARED_LIBS)
+  set(USE_SHARED_LIBS TRUE)
+endif ()
+SciGetInstSubdirs(cgm instdirs)
+
+SciFindPackage(PACKAGE "Cgm"
+  INSTALL_DIRS ${instdirs}
+  HEADERS "cgm_version.h"
+  LIBRARIES "${cgmfindlibs}"
+  LIBRARY_SUBDIRS lib/${CXX_COMP_LIB_SUBDIR} lib
+)
+
+if (CGM_FOUND)
+  message(STATUS "Found Cgm")
+else ()
+  message(STATUS "Did not find Cgm.  Use -DCgm_ROOT_DIR to specify the installation directory.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciChecker.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciChecker.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciChecker.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciChecker.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,36 @@
+# - FindSciChecker: Module to find scan_build
+#
+# Module usage:
+#   find_package(SciChecker ...)
+#
+# This module will define the following variables:
+#  CHECKER_FOUND         = Whether Checker was found
+#  Checker_scan_build    = Path to scan_build executable
+
+######################################################################
+#
+# SciChecker: Find Checker
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+message("")
+message("--------- FindSciChecker looking for scan_build ---------")
+
+SciFindPackage(PACKAGE Checker
+  PROGRAMS "scan-build"
+  PROGRAM_SUBDIRS .
+)
+
+if (CHECKER_FOUND)
+  message(STATUS "Checker_scan_build found.")
+  message(STATUS "Checker_scan_build = ${Checker_scan_build}")
+else ()
+  message(STATUS "Checker_scan_build not found. API documentation cannot be built.")
+  set(ENABLE_DEVELDOCS FALSE)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciChombo.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciChombo.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciChombo.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciChombo.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,101 @@
+# - FindSciChombo: Module to find include directories and
+#   libraries for Chombo.
+#
+# Module usage:
+#   find_package(SciChombo ...)
+#
+# This module will define the following variables:
+#  HAVE_CHOMBO, CHOMBO_FOUND = Whether libraries and includes are found
+#  Chombo_INCLUDE_DIRS       = Location of Chombo includes
+#  Chombo_LIBRARY_DIRS       = Location of Chombo libraries
+#  Chombo_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindChombo: find includes and libraries for Chombo.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+if (ENABLE_PARALLEL)
+  set(CH_MPI "1")
+endif ()
+
+if (NOT CH_CXX)
+  if (ENABLE_PARALLEL)
+    set(REL_CMAKE_CXX_COMPILER "mpicxx")
+  else ()
+    get_filename_component(REL_CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER} NAME)
+  endif ()
+else ()
+  set(REL_CMAKE_CXX_COMPILER ${CH_CXX})
+endif ()
+
+if (NOT CH_FC)
+  if (ENABLE_PARALLEL)
+    set(REL_CMAKE_Fortran_COMPILER "mpif90")
+  else ()
+    get_filename_component(REL_CMAKE_Fortran_COMPILER ${CMAKE_Fortran_COMPILER} NAME)
+  endif ()
+else ()
+  set(REL_CMAKE_Fortran_COMPILER ${CH_FC})
+endif ()
+
+# Sets name for debug builds
+if (CH_DEBUG)
+  set(DEBUG_NAME "dbg")
+endif ()
+
+################################################################################
+# Look for par(ser)2d(3d)dbg version of chombo
+
+if (ENABLE_PARALLEL)
+
+   if (CH_SPACEDIM MATCHES "2")
+     message(STATUS "Looking for parallel 2D Chombo")
+     SciFindPackage(PACKAGE "Chombo"
+          INSTALL_DIR "chombo-par2d${DEBUG_NAME}"
+        LIBRARIES chombo
+        HEADERS "Box.H;CH_assert.H;CH_HDF5.H" )
+   endif ()
+
+   if (CH_SPACEDIM MATCHES "3")
+     message(STATUS "Looking for parallel 3D Chombo")
+     SciFindPackage(PACKAGE "Chombo"
+          INSTALL_DIR "chombo-par3d"
+        LIBRARIES chombo
+        HEADERS "Box.H;CH_assert.H;CH_HDF5.H" )
+   endif ()
+
+else ()
+
+   if (CH_SPACEDIM MATCHES "2")
+     message(STATUS "Looking for serial 2D Chombo")
+     SciFindPackage(PACKAGE "Chombo"
+          INSTALL_DIR "chombo-ser2d${DEBUG_NAME}"
+        LIBRARIES chombo
+        HEADERS "Box.H;CH_assert.H;CH_HDF5.H" )
+   endif ()
+
+   if (CH_SPACEDIM MATCHES "3")
+     message(STATUS "Looking for serial 3D Chombo")
+     SciFindPackage(PACKAGE "Chombo"
+          INSTALL_DIR "chombo-ser3d"
+        LIBRARIES chombo
+        HEADERS "Box.H;CH_assert.H;CH_HDF5.H" )
+   endif ()
+
+endif (ENABLE_PARALLEL)
+###############################################################################
+
+if (CHOMBO_FOUND)
+  message(STATUS "Found Chombo")
+  set(HAVE_CHOMBO 1 CACHE BOOL "Whether have the Chombo library")
+else ()
+  message(STATUS "Did not find Chombo.  Use -DCHOMBO_DIR to specify the installation directory.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCLapackCMake.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCLapackCMake.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCLapackCMake.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCLapackCMake.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,47 @@
+# - FindSciCLapackscimake: Module to find include directories and
+#   libraries for CLapackscimake.
+#
+# Module usage:
+#   find_package(SciCLapackscimake ...)
+#
+# This module will define the following variables:
+#  HAVE_CLAPACKCMAKE, CLAPACKCMAKE_FOUND = Whether libraries and includes are found
+#  CLapackscimake_INCLUDE_DIRS = Location of CLapackscimake includes
+#  CLapackscimake_LIBRARY_DIRS = Location of CLapackscimake libraries
+#  CLapackscimake_LIBRARIES    = Required libraries
+
+######################################################################
+#
+# FindCLapackscimake: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(clapack_libs "lapack;blas;")
+if (BUILD_WITH_SHARED_RUNTIME)
+  set(clapack_libs "${clapack_libs}libf2c")
+else ()
+  set(clapack_libs "${clapack_libs}f2c")
+endif ()
+
+  SciFindPackage(PACKAGE "CLapackscimake"
+                INSTALL_DIR "clapack_cmake"
+                HEADERS "clapack.h;f2c.h;blaswrap.h"
+                LIBRARIES ${clapack_libs}
+                )
+
+if (CLAPACKSCIMAKE_FOUND)
+  message(STATUS "CLapackscimake found.")
+  set(HAVE_CLAPACKCMAKE 1 CACHE BOOL "Whether have CLapackscimake")
+else ()
+  message(STATUS "Did not find CLapackscimake.  Use -DCLapackscimake_ROOT_DIR to specify the installation directory.")
+  if (SciCLapackscimake_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCppCheck.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCppCheck.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCppCheck.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCppCheck.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,33 @@
+# - FindSciCppCheck: Module to find cppcheck
+#
+# Module usage:
+#   find_package(SciCppCheck ...)
+#
+# This module will define the following variables:
+#  CPPCHECK_FOUND         = Whether CppCheck was found
+#  CppCheck_cppcheck    = Path to cppcheck executable
+
+######################################################################
+#
+# SciCppCheck: Find CppCheck
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+message("")
+message("--------- FindSciCppCheck looking for cppcheck ---------")
+
+SciFindPackage(PACKAGE CppCheck
+  PROGRAMS "cppcheck"
+)
+
+if (CPPCHECK_FOUND)
+  message(STATUS "CppCheck_cppcheck found.")
+  message(STATUS "CppCheck_cppcheck = ${CppCheck_cppcheck}")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCubit.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCubit.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCubit.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCubit.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,59 @@
+# - FindSciCubit: Module to find include directories and
+#   libraries for Cubit.
+#
+# Module usage:
+#   find_package(SciCubit ...)
+#
+# This module will define the following variables:
+#  HAVE_CUBIT, CUBIT_FOUND = Whether libraries and includes are found
+#  Cubit_INCLUDE_DIRS        = Location of Cubit includes
+#  Cubit_LIBRARY_DIRS        = Location of Cubit libraries
+#  Cubit_LIBRARIES           = Required libraries
+
+##################################################################
+#
+# Find module for CUBIT
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+##################################################################
+
+set(Cubit_LIBRARY_LIST
+  CMLTet
+  SpacACIS
+  cbtverdict
+  cubit_geom
+  cubit_util
+  cubitgui
+  cubiti19
+  gtcAttrib
+  libifcoremd
+  libifportmd
+  libmmd
+  lpsolve55
+  mesquite
+)
+
+SciFindPackage(
+  PACKAGE Cubit
+  INSTALL_DIR cubit
+  HEADERS CubitGUIInterface.hpp
+  LIBRARIES "${Cubit_LIBRARY_LIST}"
+)
+
+if (CUBIT_FOUND)
+  message(STATUS "[FindSciCubit.cmake] - Found Cubit")
+  message(STATUS "[FindSciCubit.cmake] - Cubit_INCLUDE_DIRS = ${Cubit_INCLUDE_DIRS}")
+  message(STATUS "[FindSciCubit.cmake] - Cubit_LIBRARIES = ${Cubit_LIBRARIES}")
+  set(HAVE_CUBIT 1 CACHE BOOL "Whether have Cubit.")
+else ()
+  message(STATUS "[FindSciCubit.cmake] - Did not find Cubit, use -DCUBIT_DIR to supply the CUBIT installation directory.")
+  if (SciCubit_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciCubit.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCuda.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCuda.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCuda.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCuda.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,279 @@
+######################################################################
+#
+# @file    FindSciCuda: Find include directories and libraries for FindSciCuda.cmake
+#
+# @brief   Find locations of CUDA items
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Module usage:
+#   find_package(SciCuda ...)
+#
+# This module will define the following variables:
+#  HAVE_CUDA, CUDA_FOUND   = Whether libraries and includes are found
+#  CUDA_INCLUDE_DIRS       = Location of Cuda includes
+#  CUDA_LIBRARY_DIRS       = Location of Cuda libraries
+#  CUDA_LIBRARIES          = Required libraries
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+message("")
+message("--------- Looking for CUDA -----------")
+
+if (NOT SciCuda_FIND_VERSIONS)
+  set(SciCuda_FIND_VERSIONS 7.5 7.0)
+endif ()
+message(STATUS "SciCuda_FIND_VERSIONS = ${SciCuda_FIND_VERSIONS}.")
+if (NOT WIN32)
+  foreach (scver ${SciCuda_FIND_VERSIONS})
+    if (EXISTS /usr/local/cuda-${scver})
+      set(ENV{CUDA_BIN_PATH} /usr/local/cuda-${scver})
+# CUDA_BIN_PATH has to be set as an environment variable.
+# Should not set CUDA_TOOLKIT_ROOT_DIR as this will cause regeneration of
+# .depend files and a rebuild.
+      # set(CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda-${scver})
+      break ()
+    endif ()
+  endforeach ()
+endif ()
+
+# CUDA not working with Intel
+message(STATUS "${CMAKE_CXX_COMPILER_ID}")
+if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
+  set(SCI_ENABLE_CUDA FALSE)
+endif()
+
+# Look for explicit enabling of CUDA from configure line or environment
+if (NOT DEFINED SCI_ENABLE_CUDA)
+  set(SCI_ENABLE_CUDA $ENV{SCI_ENABLE_CUDA})
+endif ()
+
+# Message if CUDA explicitly enabled
+if (DEFINED SCI_ENABLE_CUDA)
+  if (SCI_ENABLE_CUDA)
+    message(STATUS "CUDA explicitly enabled.")
+  else ()
+    message(STATUS "CUDA explicitly disabled.")
+  endif ()
+else ()
+# If CUDA not explicitly enabled, determine whether to use based on
+# whether supported
+  set(COMPILER_BAD_4_CUDA FALSE)
+# This not a complete matrix, as assumes CUDA-7.0
+  if ((${C_COMPILER_ID} STREQUAL Clang) AND NOT
+      (${C_VERSION} VERSION_LESS 700.0.0))
+    set(COMPILER_BAD_4_CUDA TRUE)
+  elseif ((${C_COMPILER_ID} STREQUAL GNU) AND NOT
+      (${C_VERSION} VERSION_LESS 5.0.0))
+    set(COMPILER_BAD_4_CUDA TRUE)
+  endif ()
+  if(COMPILER_BAD_4_CUDA)
+    message(STATUS "CUDA not supported with ${C_COMPILER_ID}-${C_VERSION}.")
+    if (LINUX)
+      message(STATUS "Comment out the #error line in include/host_config.h in your CUDA installation to use CUDA anyway.")
+      message(STATUS "See https://www.pugetsystems.com/labs/articles/Install-NVIDIA-CUDA-on-Fedora-22-with-gcc-5-1-654")
+      message(STATUS "Also set SCI_ENABLE_CUDA=TRUE on the configure line or in your environment.")
+    endif ()
+    set(SCI_ENABLE_CUDA FALSE)
+  else ()
+    set(SCI_ENABLE_CUDA TRUE)
+  endif ()
+endif ()
+
+if (SCI_ENABLE_CUDA)
+  find_package(CUDA ${SciCuda_FIND_VERSION})
+else ()
+  set(CUDA_FOUND FALSE)
+endif ()
+SciPrintVar(CUDA_FOUND)
+if (CUDA_FOUND)
+  SciPrintVar(CUDA_VERSION)
+endif ()
+
+# Macro to do what is needed when CUDA is found
+macro(SciDoCudaFound)
+
+# Make calling a __host__ function from a __host__ __device__ function
+# an error.
+  list(APPEND CUDA_NVCC_FLAGS "--Werror cross-execution-space-call")
+
+  string(FIND ${CMAKE_CXX_FLAGS} "-std=c++11" POS)
+  if (NOT ${POS} EQUAL -1)
+    if (CUDA_VERSION LESS 7.0)
+      message(WARNING "Cuda support of -std=c++11 requires a minimum CUDA version of 7.0")
+      set(CUDA_FOUND FALSE)
+      SciPrintVar(CUDA_FOUND)
+      return()
+    else ()
+# This fails at cmake-3.4.1, succeeds at cmake-3.2.2, where at the former
+# FindCUDA.cmake says
+# -Xcompile -std=c++ will choke nvcc (it uses the C preprocessor)
+# Seems that this is true for CUDA-7.5 or cmake-3.4.1
+      if (${CMAKE_VERSION} VERSION_LESS "3.4.0" OR NOT CUDA_PROPAGATE_HOST_FLAGS)
+        list(APPEND CUDA_NVCC_FLAGS "-std=c++11")
+      endif ()
+    endif ()
+  endif ()
+# CUDA_VERSION is the found version
+  if (CUDA_VERSION LESS 5.0)
+    message(FATAL_ERROR "SciCuda requires a minimum CUDA version of 5.0")
+  endif ()
+# Set the optimization and debug type flags
+  if (CMAKE_BUILD_TYPE MATCHES Debug)
+    list(APPEND CUDA_NVCC_FLAGS -g -G -lineinfo)
+  elseif (CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
+    list(APPEND CUDA_NVCC_FLAGS -g -O2 --use_fast_math)
+  else ()
+    list(APPEND CUDA_NVCC_FLAGS -O3 --use_fast_math --ptxas-options=-v)
+  endif ()
+
+# Query devices and make sure we have enough compute capabilty
+# and then set flags according to the compute capabiltiy found.
+  set(deviceUtility ${TxSim_ROOT_DIR}/bin/devices)
+  if (WIN32)
+    set(deviceUtility ${TxSim_ROOT_DIR}/bin/devices.exe)
+  endif ()
+  message(STATUS "deviceUtility = ${deviceUtility}")
+
+# Allow user to set specific flags with SCI_CUDA_ARCH_FLAGS
+  if (NOT DEFINED SCI_CUDA_ARCH_FLAGS)
+# Minimum compute capability for printf is 30
+    list(APPEND CUDA_NVCC_FLAGS --generate-code arch=compute_30,code=sm_30)
+    if (NOT (CUDA_VERSION LESS 6.0))
+      list(APPEND CUDA_NVCC_FLAGS --generate-code arch=compute_50,code=sm_50)
+    endif ()
+# Add other compute capabilities on request
+    if (CUDA_ALL_COMPUTE_CAPABILITIES)
+      # compute_20 is required for old cards (e.g. 2070s on enrico)
+      list(APPEND CUDA_NVCC_FLAGS
+          --generate-code arch=compute_20,code=sm_20
+          --generate-code arch=compute_20,code=sm_21
+          --generate-code arch=compute_35,code=sm_35
+      )
+      if (NOT (CUDA_VERSION LESS 7.0))
+        list(APPEND CUDA_NVCC_FLAGS --generate-code arch=compute_52,code=sm_52)
+      endif ()
+    endif ()
+  else ()
+    list(APPEND CUDA_NVCC_FLAGS ${SCI_CUDA_ARCH_FLAGS})
+  endif ()
+
+# find_cuda_helper_libs(cusparse)
+  if (CUDA_CUDART_LIBRARY AND NOT CUDA_LIBRARY_DIRS)
+    get_filename_component(CUDA_LIBRARY_DIRS ${CUDA_CUDART_LIBRARY}
+      DIRECTORY CACHE
+    )
+  endif ()
+
+  if (ENABLE_PARALLEL)
+# This is needed to get around nvcc finding what mpicc is linked to
+# and using that, which then prevents the openmpi compilers from knowing
+# what configuration file to use.
+    set(CUDA_HOST_COMPILER ${CMAKE_C_COMPILER})
+# list(APPEND CUDA_NVCC_FLAGS -ccbin ${SCI_SERIAL_C_COMPILER})
+  endif ()
+
+# If CMake version >= 2.8.11, need to add the CUDA library manually
+  if (${CMAKE_VERSION} VERSION_GREATER 2.8.10)
+    if (CUDA_CUDA_LIBRARY)
+      get_filename_component(CUDA_CUDA_DIR ${CUDA_CUDA_LIBRARY}/.. REALPATH)
+      set(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_CUDA_LIBRARY})
+      if (LINUX)
+        set(CUDA_LIBRARIES ${CUDA_LIBRARIES} "-Wl,-rpath -Wl,${CUDA_CUDA_DIR}")
+      endif ()
+    else ()
+      message(WARNING "CUDA_CUDA_LIBRARY not found, so link may fail.")
+    endif ()
+  endif ()
+
+# The cuda library may not be in the frameworks area
+  find_library(CUDA_cuda_SHLIB cuda
+    PATHS /usr/local/cuda-${CUDA_VERSION}
+    PATH_SUFFIXES lib64 lib
+    NO_DEFAULT_PATH
+  )
+  if (CUDA_cuda_SHLIB)
+    get_filename_component(CUDA_cuda_SHLIB_DIR ${CUDA_cuda_SHLIB}
+      DIRECTORY CACHE
+    )
+    set(CUDA_LIBRARY_DIRS ${CUDA_LIBRARY_DIRS} ${CUDA_cuda_SHLIB_DIR})
+  else ()
+    set(CUDA_cuda_SHLIB ${CUDA_CUDA_LIBRARY})
+  endif ()
+
+# Find the cudadevrt library
+  find_library(CUDA_CUDADEVRT_LIBRARY
+    NAMES cudadevrt
+    PATHS ${CUDA_LIBRARY_DIRS}
+    )
+
+  if (CUDA_FOUND)
+    set(CUDA_BASE_LIBRARIES ${CUDA_cusparse_LIBRARY} ${CUDA_CUDART_LIBRARY})
+# cublas is linked to cuda as opposed to dlopening it.  So it cannot
+# be linked but must be dlopened.
+    if (APPLE)
+# Could we instead use "-undefined dynamic_lookup"?
+      set(CUDA_BASE_LIBRARIES ${CUDA_BASE_LIBRARIES} ${CUDA_cuda_SHLIB})
+    endif ()
+  else ()
+    return()
+  endif ()
+
+# Print results
+  SciPrintCMakeResults(CUDA)
+  foreach (sfx VERSION CUDA_LIBRARY cuda_SHLIB NVCC_EXECUTABLE
+      HOST_FLAGS NVCC_FLAGS TOOLKIT_ROOT_DIR TOOLKIT_INCLUDE INCLUDE_DIRS
+      LIBRARY_DIRS LIBRARIES CUDART_LIBRARY
+      curand_LIBRARY cublas_LIBRARY
+      cusparse_LIBRARY cufft_LIBRARY npp_LIBRARY cupti_LIBRARY
+      CUDADEVRT_LIBRARY
+      BASE_LIBRARIES
+  )
+    SciPrintVar(CUDA_${sfx})
+  endforeach ()
+
+# Flags to be added when CUDA is found on Windows
+  if (${CXX_COMPILER_ID} STREQUAL MSVC)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /FS")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /FS")
+  endif ()
+
+endmacro()
+
+# This to be a separate option.  Otherwise just use capability 2.0.
+option(CUDA_ALL_COMPUTE_CAPABILITIES
+  "Whether to compile for all cuda compute capabilities" OFF
+)
+if (CUDA_FOUND)
+  SciDoCudaFound() # Can undo cuda found
+endif ()
+if (CUDA_FOUND)
+  set(HAVE_CUDA_TOOLKIT TRUE)
+  message(STATUS "After CUDA additions:")
+  SciPrintVar(CMAKE_C_FLAGS)
+  SciPrintVar(CMAKE_CXX_FLAGS)
+else ()
+  set(HAVE_CUDA_TOOLKIT FALSE)
+endif ()
+SciPrintVar(HAVE_CUDA_TOOLKIT)
+
+# Macros covering presence or absence of cuda
+macro(scicuda_add_library)
+  if (HAVE_CUDA_TOOLKIT)
+    cuda_add_library(${ARGV})
+  else ()
+    add_library(${ARGV})
+  endif ()
+endmacro()
+
+macro(scicuda_add_executable)
+  if (HAVE_CUDA_TOOLKIT)
+    cuda_add_executable(${ARGV})
+  else ()
+    add_executable(${ARGV})
+  endif ()
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciCusp.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciCusp.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciCusp.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciCusp.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+# - FindSciCusp: Module to find include directories for cusp.
+#
+# Module usage:
+#   find_package(SciCusp ...)
+#
+# Variables used by this module, which can be set before calling find_package
+# to influence default behavior
+# Eigen3_ROOT_DIR          Specifies the root dir of the eigen3 installation
+#
+# This module will define the following variables:
+#  HAVE_CUSP,CUSP_FOUND = Whether libraries and includes are found
+#  Cusp_INCLUDE_DIRS       = Location of cusp includes
+
+######################################################################
+#
+# FindSciCusp: find includes for cusp
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Try to find an installation of eigen3 in the system include directory.
+SciFindPackage(PACKAGE "Cusp"
+              INSTALL_DIR "cusp"
+              HEADERS "version.h"
+                  INCLUDE_SUBDIRS include include/cusp
+              )
+
+if (CUSP_FOUND)
+  message(STATUS "Found Cusp")
+  set(HAVE_CUSP 1 CACHE BOOL "Whether have Cusp")
+else ()
+  message(STATUS "Did not find Cusp.  Use -DCUSP_DIR to specify the installation directory.")
+  if (SciCusp_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciDagmc.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciDagmc.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciDagmc.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciDagmc.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,76 @@
+# - FindTxDagmc: Module to find include directories and
+#   libraries for Dagmc.
+#
+# Module usage:
+#   find_package(TxDagmc ...)
+#
+# This module will define the following variables:
+#  HAVE_DAGMC, DAGMC_FOUND = Whether libraries and includes are found
+#  Dagmc_INCLUDE_DIRS       = Location of Dagmc includes
+#  Dagmc_LIBRARY_DIRS       = Location of Dagmc libraries
+#  Dagmc_LIBRARIES          = Required libraries
+
+###########################################################
+#
+# Find module for Dagmc installation
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+###########################################################
+
+if (DEFINED DAGMC_DIR)
+  message(STATUS "[FindDagmc.cmake] - DAGMC_DIR is ${DAGMC_DIR}")
+endif ()
+
+# We have a problem in SciFindPackage
+# where if the executable has the same name as a directory
+# scimake's find_program() will return the DIRECTORY instead
+# of the executable on windows (as scimake is a windows program
+# and the cygwin soft link just looks like a file).
+SciGetInstSubdirs(hdf5 instdirs)
+SciFindPackage(
+  PACKAGE Dagmc
+  PROGRAMS DagGeant4 dagmc_get_materials.py
+  FILES shape_zoo_unmerged.h5m shape_zoo_merged.h5m test_geom.h5m test_uwuw.h5m
+  FILE_SUBDIRS tests
+  LIBRARIES dagsolid dagmciface
+)
+
+if (DAGMC_FOUND)
+  message(STATUS "Found Dagmc")
+  set(HAVE_DAGMC 1 CACHE BOOL "Whether have Dagmc")
+
+  get_filename_component(DAGMC_DIR ${Dagmc_PROGRAM_DIRS}/.. REALPATH)
+  if (DEBUG_CMAKE)
+    message(STATUS "DAGMC_DIR is ${DAGMC_DIR}")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message("Trying to run executable ${Dagmc_gpuSpinTrack} to determine Dagmc version.")
+  endif ()
+
+# Dagmc_VERSION is required by SciComposerBase.cmake to set the package
+# installer name.  It is provided by executing "executable --version",
+# and contains version number/revision number.
+  if (FALSE)
+    include(${TXCMAKE_DIR}/TxEngFindVersion.cmake)
+    TxEngFindVersion(${Dagmc_DagGeant4} EXE_VERSION EXE_REVISION)
+    set(Dagmc_VERSION ${EXE_VERSION})
+    set(DAGMC_VERSION ${EXE_VERSION})
+    set(Dagmc_REVISION ${EXE_REVISION})
+  else ()
+    set(Dagmc_VERSION runknown)
+    set(Dagmc_REVISION runknown)
+  endif ()
+else ()
+  message(STATUS "Dagmc not found. Use -DDAGMC_DIR to specify the installation directory.")
+  if (TxDagmc_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+  set(Dagmc_VERSION "Dagmc-NOTFOUND")
+  set(Dagmc_REVISION "Dagmc-NOTFOUND")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciDakota.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciDakota.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciDakota.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciDakota.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,83 @@
+# - FindTxDakota: Module to find include directories and
+#   libraries for Dakota.
+#
+# Module usage:
+#   find_package(TxDakota ...)
+#
+# This module will define the following variables:
+#  HAVE_DAKOTA, DAKOTA_FOUND = Whether libraries and includes are found
+#  Dakota_INCLUDE_DIRS       = Location of Dakota includes
+#  Dakota_LIBRARY_DIRS       = Location of Dakota libraries
+#  Dakota_LIBRARIES          = Required libraries
+
+###########################################################
+#
+# Find module for Dakota installation
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2016-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+###########################################################
+
+if (DEFINED DAKOTA_DIR)
+  message(STATUS "[FindDakota.cmake] - DAKOTA_DIR is ${DAKOTA_DIR}")
+endif ()
+
+SciGetInstSubdirs(Dakota-ser instdirs)
+
+SciFindPackage(
+  PACKAGE Dakota
+  INSTALL_DIRS ${instdirs}
+  PROGRAMS dakota
+)
+
+if (DAKOTA_FOUND)
+  message(STATUS "Found Dakota")
+  set(HAVE_DAKOTA 1 CACHE BOOL "Whether have Dakota")
+
+  # Derive the base Dakota directory
+  set(Dakota_FOUND_PROGRAM ${Dakota_dakota})
+  if (NOT Dakota_FOUND_PROGRAM)
+    set(Dakota_FOUND_PROGRAM ${Dakota_dakota})
+  endif ()
+
+# This can only happen if there is something wrong with SciFindPackage,
+# and so a fatal error is appropriate.
+  if (NOT Dakota_FOUND_PROGRAM)
+    message(FATAL_ERROR "Neither Dakota executable was found?  Failing.")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message(STATUS "Using path ${Dakota_FOUND_PROGRAM} to derive base Dakota directory.")
+  endif ()
+
+  get_filename_component(DAKOTA_DIR ${Dakota_FOUND_PROGRAM} PATH)
+  # get_filename_component(DAKOTA_DIR ${DAKOTA_DIR} PATH)
+  get_filename_component(DAKOTA_DIR ${DAKOTA_DIR}/.. REALPATH)
+  if (DEBUG_CMAKE)
+    message(STATUS "DAKOTA_DIR is ${DAKOTA_DIR}")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message("Trying to run executable ${Dakota_FOUND_PROGRAM} to determine Dakota version.")
+  endif ()
+
+# Dakota_VERSION is required by SciComposerBase.cmake to set the package
+# installer name.  It is provided by executing "executable --version",
+# and contains version number/revision number.
+  include(${TXCMAKE_DIR}/TxEngFindVersion.cmake)
+  TxEngFindVersion(${Dakota_FOUND_PROGRAM} EXE_VERSION EXE_REVISION)
+  set(Dakota_VERSION ${EXE_VERSION})
+  set(DAKOTA_VERSION ${EXE_VERSION})
+  set(Dakota_REVISION ${EXE_REVISION})
+else ()
+  message(STATUS "Dakota not found. Use -DDAKOTA_DIR to specify the installation directory.")
+  if (SciDakota_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+  set(Dakota_VERSION "DakotaNotFound")
+  set(Dakota_REVISION "DakotaNotFound")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciDocutils.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciDocutils.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciDocutils.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciDocutils.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,19 @@
+######################################################################
+#
+# FindSciDocutils
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+include(FindPackageHandleStandardArgs)
+
+find_program(RST2HTML_EXECUTABLE NAMES rst2html rst2html.py)
+find_package_handle_standard_args(Docutils DEFAULT_MSG RST2HTML_EXECUTABLE)
+
+find_program(RST2LATEX_EXECUTABLE NAMES rst2latex rst2latex.py)
+find_package_handle_standard_args(Docutils DEFAULT_MSG RST2LATEX_EXECUTABLE)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciDoxygen.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciDoxygen.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciDoxygen.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciDoxygen.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,52 @@
+# - FindSciDoxygen: Module to find doxygen and setup apidocs target for
+#   Doxygen.
+#
+# Module usage:
+#   find_package(SciDoxygen ...)
+#
+# This module will define the following variables:
+#  DOXYGEN_FOUND         = Whether Doxygen was found
+#  DOXYGEN_PROGRAM    = Path to doxygen executable
+
+######################################################################
+#
+# SciDoxygen: Find Doxygen and set up apidocs target
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+message("")
+message("--------- FindSciDoxygen looking for doxygen ---------")
+find_package(Doxygen)
+
+if (NOT DOXYGEN_FOUND)
+  message(STATUS "Doxygen not found by default CMake module, falling back to SciFindPackage module.")
+  SciFindPackage(PACKAGE Doxygen
+    PROGRAMS "doxygen"
+  )
+  if (DOXYGEN_FOUND)
+    set(DOXYGEN_PROGRAM "${Doxygen_doxygen}")
+  endif ()
+endif ()
+
+# Maintain backward compatibility
+if (NOT DOXYGEN_PROGRAM)
+  set(DOXYGEN_PROGRAM ${DOXYGEN_EXECUTABLE})
+elseif (NOT DOXYGEN_EXECUTABLE)
+  set(DOXYGEN_EXECUTABLE ${DOXYGEN_PROGRAM})
+endif ()
+
+if (DOXYGEN_FOUND)
+  message(STATUS "DOXYGEN_PROGRAM found.")
+  message(STATUS "DOXYGEN_PROGRAM = ${DOXYGEN_PROGRAM}")
+  message(STATUS "DOXYGEN_EXECUTABLE = ${DOXYGEN_EXECUTABLE}")
+else ()
+  message(STATUS "DOXYGEN_PROGRAM not found. API documentation cannot be built.")
+  set(ENABLE_DEVELDOCS FALSE)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciEigen3.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciEigen3.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciEigen3.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciEigen3.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,49 @@
+# - FindSciEigen3: Module to find include directories for Eigen3.
+#
+# Module usage:
+#   find_package(SciEigen3 ...)
+#
+# Variables used by this module, which can be set before calling find_package
+# to influence default behavior
+# Eigen3_ROOT_DIR          Specifies the root dir of the eigen3 installation
+#
+# This module will define the following variables:
+#  HAVE_EIGEN3,EIGEN3_FOUND = Whether libraries and includes are found
+#  Eigen3_INCLUDE_DIRS       = Location of Gsl includes
+
+######################################################################
+#
+# FindEigen3: find includes for Eigen3
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Try to find an installation of eigen3 in the system include directory.
+find_path(Eigen3_SYS_DIR
+    signature_of_eigen3_matrix_library
+    PATHS "/usr/local/include/eigen3")
+if (NOT(${Eigen3_SYS_DIR} MATCHES Eigen3_SYS_DIR-NOTFOUND))
+  set(Eigen3_ROOT_DIR ${Eigen3_ROOT_DIR} ${Eigen3_SYS_DIR})
+endif ()
+
+SciFindPackage(PACKAGE "Eigen3"
+              INSTALL_DIR "eigen3"
+              INCLUDE_SUBDIRS include/eigen3
+              HEADERS "Eigen/Core"
+             )
+
+if (EIGEN3_FOUND)
+  message(STATUS "Found Eigen3")
+  set(HAVE_EIGEN3 1 CACHE BOOL "Whether have Eigen3")
+else ()
+  message(STATUS "Did not find Eigen3.  Use -DEIGEN3_DIR to specify the installation directory.")
+  if (SciEigen3_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciExodusii.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciExodusii.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciExodusii.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciExodusii.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,47 @@
+# - FindSciExodusii: Module to find include directories and libraries
+#   for ExodusII. This module was implemented as there is no stock
+#   CMake module for ExodusII.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciExodusii REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_EXODUSII   = Whether have the ExodusII library
+#  Exodusii_INCLUDE_DIRS = Location of ExodusII includes
+#  Exodusii_LIBRARY_DIRS = Location of ExodusII libraries
+#  Exodusii_LIBRARIES    = Required libraries
+#  Exodusii_STLIBS       = Location of ExodusII static library
+
+######################################################################
+#
+# SciFindExodusii: find includes and libraries for ExodusII.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(instdirs exodusii)
+
+set(desiredlibs exodusII)
+set(desiredIncs "exodusII.h" "exodusII_int.h")
+
+SciFindPackage(PACKAGE "Exodusii"
+  INSTALL_DIR ${instdirs}
+  HEADERS     ${desiredIncs}
+  LIBRARIES   ${desiredlibs}
+)
+
+if (EXODUSII_FOUND)
+  message(STATUS "Found Exodusii")
+  set(HAVE_EXODUSII 1 CACHE BOOL "Whether have the EXODUSII library")
+else ()
+  message(STATUS "Did not find Exodusii.  Use -DEXODUSII_DIR to specify the installation directory.")
+  if (SciExodusii_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFacetsIfc.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFacetsIfc.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFacetsIfc.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFacetsIfc.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,39 @@
+######################################################################
+#
+# @file    FindSciFacetsIfc.cmake
+#
+# @brief   For finding libraries and include directories for FacetsIfc
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+# - FindSciFacetsIfc: Module to find include directories and
+#   libraries for FacetsIfc.
+#
+# Module usage:
+#   find_package(SciFacetsIfc ...)
+#
+# This module will define the following variables:
+#  HAVE_FACETSIFC, FACETSIFC_FOUND = Whether libraries and includes are found
+#  FacetsIfc_INCLUDE_DIRS       = Location of FacetsIfc includes
+#  FacetsIfc_LIBRARY_DIRS       = Location of FacetsIfc libraries
+#  FacetsIfc_LIBRARIES          = Required libraries
+
+SciFindPackage(PACKAGE "FacetsIfc"
+              HEADERS "FacetsIfc.h"
+              )
+
+if (FACETSIFC_FOUND)
+  message(STATUS "Found FacetsIfc")
+  set(HAVE_FACETSIFC 1 CACHE BOOL "Whether have FacetsIfc")
+else ()
+  message(STATUS "Did not find FacetsIfc.  Use -DFacetsIfc_ROOT_DIR to specify the installation directory.")
+  if (SciFacetsIfc_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFcIoWrappers.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFcIoWrappers.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFcIoWrappers.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFcIoWrappers.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,71 @@
+# - FindSciFcIoWrappers: Module to find include directories and
+#   libraries for Fc IO Wrappers
+#
+# Module usage:
+#   find_package(SciFcIoWrappers ...)
+#
+# This module will define the following variables:
+#  HAVE_FCIOWRAPPERS, FCIOWRAPPERS_FOUND = Whether libraries and includes are found
+#  FcIoWrappers_INCLUDE_DIRS       = Location of FcIoWrappers includes
+#  FcIoWrappers_LIBRARY_DIRS       = Location of FcIoWrappers libraries
+#  FcIoWrappers_LIBRARIES          = Required libraries
+#
+# If
+
+######################################################################
+#
+# FindSciFcIoWrappers: find includes and libraries for Fcio Wrappers
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir "fciowrappers-par;fciowrappers-ben")
+else ()
+  set(instdir "fciowrappers")
+endif ()
+SciFindPackage(PACKAGE "FcIoWrappers"
+  INSTALL_DIR "${instdir}"
+  HEADERS "vshdf5_dummy.h"
+  MODULES "ezcdf;ezcdf_attrib;ezcdf_genget;ezcdf_genput;ezcdf_inqvar;ezcdf_opncls;hdf5_api"
+  LIBRARIES "ezcdf;vshdf5"
+  LIBRARY_SUBDIRS "lib"
+)
+
+if (FCIOWRAPPERS_FOUND)
+  set(HAVE_FCIOWRAPPERS 1 CACHE BOOL "Whether have the FCIOWRAPPERS library")
+endif ()
+
+# Get dependencies - allow for builds without netcdf
+string(FIND "${FcIoWrappers_LIBRARY_NAMES}" "vshdf5" VSHDF5_LOC)
+string(COMPARE NOTEQUAL "-1" ${VSHDF5_LOC} FC_VSHDF5_FOUND)
+if (FCIOWRAPPERS_FOUND OR ${FC_VSHDF5_FOUND})
+# Find share directory (FcIoWrappers_ROOT_DIR may not be set)
+  if (NOT FcIoWrappers_ROOT_DIR)
+    foreach (libdir ${FcIoWrappers_LIBRARY_DIRS})
+      if (EXISTS ${libdir}/../share)
+        SciGetRealDir(${libdir}/.. FcIoWrappers_ROOT_DIR)
+      endif ()
+    endforeach ()
+    message(STATUS "Setting FcIoWrappers_ROOT_DIR = ${FcIoWrappers_ROOT_DIR}")
+  endif ()
+  if (FcIoWrappers_ROOT_DIR)
+    include(${SCIMAKE_DIR}/SciGetDepsFromInstall.cmake)
+# Get hdf5 libraries
+    SciGetDepsFromInstall(Hdf5 "${FcIoWrappers_ROOT_DIR}" HDF5)
+    message(STATUS "HDF5_FOUND = ${HDF5_FOUND}.")
+    SciGetDepsFromInstall(Z "${FcIoWrappers_ROOT_DIR}" Z)
+    message(STATUS "Z_FOUND = ${Z_FOUND}.")
+# Get netcdf libraries
+    if (FCIOWRAPPERS_FOUND)
+      SciGetDepsFromInstall(Netcdf "${FcIoWrappers_ROOT_DIR}" NETCDF)
+      message(STATUS "NETCDF_FOUND = ${NETCDF_FOUND}.")
+    endif ()
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFftw3.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFftw3.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFftw3.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFftw3.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,58 @@
+# - FindSciFftw3: Module to find include directories and
+#   libraries for Fftw3
+#
+# Module usage:
+#   find_package(SciFftw3 ...)
+#
+# This module will define the following variables:
+#  HAVE_FFTW3, FFTW3_FOUND = Whether libraries and includes are found
+#  Fftw3_INCLUDE_DIRS       = Location of Polyswift includes
+#  Fftw3_LIBRARY_DIRS       = Location of Polyswift libraries
+#  Fftw3_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciFftw3: find includes and libraries for Fftw3
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (DEFINED Fftw3_FIND_VERSION)
+  set(Fftw3_SEARCH "fftw3${Fftw3_FIND_VERSION}")
+elseif (ENABLE_PARALLEL)
+  set(Fftw3_SEARCH "fftw3-par")
+else ()
+  set(Fftw3_SEARCH "fftw3")
+endif ()
+
+if (ENABLE_PARALLEL)
+  message(STATUS "Looking for parallel FFTW3")
+  SciFindPackage(PACKAGE "Fftw3"
+                INSTALL_DIR "${Fftw3_SEARCH}"
+                HEADERS "fftw3.h;fftw3.f;fftw3-mpi.h"
+                LIBRARIES "fftw3;libfftw3_mpi"
+                )
+else ()
+  message(STATUS "Looking for serial FFTW3")
+  SciFindPackage(PACKAGE "Fftw3"
+                INSTALL_DIR "${Fftw3_SEARCH}"
+                HEADERS "fftw3.h;fftw3.f"
+                LIBRARIES "fftw3"
+                )
+endif ()
+
+if (FFTW3_FOUND)
+  message(STATUS "Found Fftw3")
+  set(HAVE_FFTW3 1 CACHE BOOL "Whether have the FFTW3 library")
+else ()
+  message(STATUS "Did not find Fftw3.  Use -DFFTW3_DIR to specify the installation directory.")
+  if (SciFftw3_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFftw.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFftw.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFftw.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFftw.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,50 @@
+# - FindSciFftw: Module to find include directories and
+#   libraries for Fftw.
+#
+# Module usage:
+#   find_package(SciFftw ...)
+#
+# This module will define the following variables:
+#  HAVE_FFTW, FFTW_FOUND = Whether libraries and includes are found
+#  Fftw_INCLUDE_DIRS       = Location of Fftw includes
+#  Fftw_LIBRARY_DIRS       = Location of Fftw libraries
+#  Fftw_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindFftw: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  message(STATUS "Looking for parallel FFTW")
+  SciFindPackage(PACKAGE "Fftw"
+                INSTALL_DIR "fftw-par"
+                HEADERS "fftw.h;rfftw.h;fftw_mpi.h;rfftw_mpi.h"
+                LIBRARIES "fftw;rfftw;fftw_mpi;rfftw_mpi"
+                )
+else ()
+  message(STATUS "Looking for serial FFTW")
+  SciFindPackage(PACKAGE "Fftw"
+                INSTALL_DIR "fftw"
+                HEADERS "fftw.h;rfftw.h"
+                LIBRARIES "fftw;rfftw"
+                )
+endif ()
+
+if (FFTW_FOUND)
+  message(STATUS "Found Fftw")
+  set(HAVE_FFTW 1 CACHE BOOL "Whether have the FFTW library")
+else ()
+  message(STATUS "Did not find Fftw.  Use -DFFTW_DIR to specify the installation directory.")
+  if (SciFftw_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFluxgrid.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFluxgrid.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFluxgrid.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFluxgrid.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,32 @@
+# - FindSciFluxgrid: Module to find include directories and libraries
+#   for Fluxgrid. This module was implemented as there is no stock
+#   CMake module for Fluxgrid.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciFluxgrid REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_FLUXGRID         = Whether have the Fluxgrid library
+#  Fluxgrid_INCLUDE_DIRS = Location of Fluxgrid includes
+#  Fluxgrid_LIBRARY_DIRS = Location of Fluxgrid libraries
+#  Fluxgrid_LIBRARIES    = Required libraries
+#  Fluxgrid_STLIBS       = Location of Fluxgrid static library
+
+######################################################################
+#
+# FindSciFluxgrid: find includes and libraries for FLUXGRID
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Find shared libs
+SciFindPackage(PACKAGE "Fluxgrid"
+  INSTALL_DIR "fluxgrid"
+  PROGRAMS "fluxgrid"
+)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFmcfm.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFmcfm.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFmcfm.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFmcfm.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,47 @@
+# - FindSciFmcfm: Module to find include directories and
+#   libraries for Fmcfm.
+#
+# Module usage:
+#   find_package(SciFmcfm ...)
+#
+# This module will define the following variables:
+#  HAVE_FMCFM, FMCFM_FOUND = Whether libraries and includes are found
+#  Fmcfm_INCLUDE_DIRS       = Location of Fmcfm includes
+#  Fmcfm_LIBRARY_DIRS       = Location of Fmcfm libraries
+#  Fmcfm_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciFmcfm: find includes and libraries for Fmcfm
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir fmcfm-par)
+else ()
+  set(instdir fmcfm)
+endif ()
+SciFindPackage(PACKAGE "Fmcfm"
+  INSTALL_DIR "${instdir}"
+  HEADERS "FmGlf23TransportModel.h;FmNclassTransportModel.h;FmGyroTransportModel.h;FmTglfTransportModel.h"
+  LIBRARIES "fmcfmcppwrap;fmcfmcxx;fmcfmwrap;fmcfm"
+  LIBRARY_SUBDIRS "lib/${Fortran_COMP_LIB_SUBDIR};lib"
+)
+
+if (FMCFM_FOUND)
+  # message(STATUS "Found FMCFM")
+  set(HAVE_FMCFM 1 CACHE BOOL "Whether have the FMCFM library")
+# Find gacodes
+  include(${SCIMAKE_DIR}/SciGetDepsFromInstall.cmake)
+# Get gacodes libraries
+  SciGetDepsFromInstall(GaCode ${Fmcfm_DIR} GACODE)
+# Get ntcctransport libraries
+  SciGetDepsFromInstall(NtccTransport ${Fmcfm_DIR} NTCCTRANSPORT)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciFreeType.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciFreeType.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciFreeType.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciFreeType.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,41 @@
+# - FindSciFreeType: Module to find include directories and
+#   libraries for FreeType.
+#
+# Module usage:
+#   find_package(SciFreeType ...)
+#
+# This module will define the following variables:
+#  HAVE_FREETYPE, FREETYPE_FOUND = Whether libraries and includes are found
+#  FreeType_INCLUDE_DIRS       = Location of FreeType includes
+#  FreeType_LIBRARY_DIRS       = Location of FreeType libraries
+#  FreeType_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindFreeType: find includes and libraries for z(compression)
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(
+  PACKAGE   FreeType
+  HEADERS   ft2build.h
+  INCLUDE_SUBDIRS include include/freetype2
+  LIBRARIES freetype
+)
+
+if (FREETYPE_FOUND)
+  # message(STATUS "Found FreeType")
+  set(HAVE_FREETYPE 1 CACHE BOOL "Whether have FreeType")
+else ()
+  message(STATUS "Did not find FreeType.")
+  if (SciFreeType_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciG4engine.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciG4engine.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciG4engine.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciG4engine.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,81 @@
+# - FindSciG4engine: Module to find include directories and
+#   libraries for G4engine.
+#
+# Module usage:
+#   find_package(SciG4engine ...)
+#
+# This module will define the following variables:
+#  HAVE_G4ENGINE, G4ENGINE_FOUND = Whether libraries and includes are found
+#  G4engine_INCLUDE_DIRS       = Location of G4engine includes
+#  G4engine_LIBRARY_DIRS       = Location of G4engine libraries
+#  G4engine_LIBRARIES          = Required libraries
+
+###########################################################
+#
+# Find module for G4engine installation
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+###########################################################
+
+if (DEFINED G4ENGINE_DIR)
+  message(STATUS "[FindSciG4engine.cmake] - G4ENGINE_DIR is ${G4ENGINE_DIR}")
+endif ()
+
+# We have a problem in SciFindPackage
+# where if the executable has the same name as a directory
+# scimake's find_program() will return the DIRECTORY instead
+# of the executable on windows (as scimake is a windows program
+# and the cygwin soft link just looks like a file).
+SciFindPackage(
+  PACKAGE G4engine
+  INSTALL_DIR g4engine-sersh
+  PROGRAMS g4engine
+)
+
+if (G4ENGINE_FOUND)
+  message(STATUS "Found G4engine")
+  set(HAVE_G4ENGINE 1 CACHE BOOL "Whether have G4engine")
+
+  set(G4engine_FOUND_PROGRAM ${G4engine_g4engine})
+# This can only happen if there is something wrong with SciFindPackage,
+# and so a fatal error is appropriate.
+  if (NOT G4engine_FOUND_PROGRAM)
+    message(FATAL_ERROR "Neither G4engine executable was found?  Failing.")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message(STATUS "Using path ${G4engine_FOUND_PROGRAM} to derive base G4engine directory.")
+  endif ()
+
+  get_filename_component(G4ENGINE_DIR ${G4engine_FOUND_PROGRAM} PATH)
+  # get_filename_component(G4ENGINE_DIR ${G4ENGINE_DIR} PATH)
+  get_filename_component(G4ENGINE_DIR ${G4ENGINE_DIR}/.. REALPATH)
+  if (DEBUG_CMAKE)
+    message(STATUS "G4ENGINE_DIR is ${G4ENGINE_DIR}")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message("Trying to run executable ${G4engine_FOUND_PROGRAM} to determine G4engine version.")
+  endif ()
+
+# G4engine_VERSION is required by SciComposerBase.cmake to set the package
+# installer name.  It is provided by executing "executable --version",
+# and contains version number/revision number.
+  include(${TXCMAKE_DIR}/TxEngFindVersion.cmake)
+  TxEngFindVersion(${G4engine_FOUND_PROGRAM} EXE_VERSION EXE_REVISION)
+  set(G4engine_VERSION ${EXE_VERSION})
+  set(G4ENGINE_VERSION ${EXE_VERSION})
+  set(G4engine_REVISION ${EXE_REVISION})
+else ()
+  message(STATUS "G4engine not found. Use -DG4ENGINE_DIR to specify the installation directory.")
+  if (SciG4engine_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+  set(G4engine_VERSION "G4engineNotFound")
+  set(G4engine_REVISION "G4engineNotFound")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciG4examples.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciG4examples.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciG4examples.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciG4examples.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,40 @@
+# - FindSciG4examples: Module to find examples for G4engine.
+#
+# Module usage:
+#   find_package(SciG4examples ...)
+#
+
+###########################################################
+#
+# Find module for G4engine examples  installation
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+###########################################################
+
+# The command line override is PKG_ROOT_DIR
+if (DEFINED G4EXAMPLES_ROOT_DIR)
+  message(STATUS "[FindSciG4examples.cmake] - G4EXAMPLES_ROOT_DIR is ${G4EXAMPLES_ROOT_DIR}")
+endif ()
+
+SciFindPackage(
+  PACKAGE G4examples
+  INSTALL_DIR g4examples-lite
+  FILES description.ini
+)
+
+if (G4EXAMPLES_FOUND)
+  get_filename_component(G4examples_DIR "${G4examples_FILES}" PATH)
+# EXAMPLES_DIR used in TxComposerBase to install the examples into the composer.
+  set(EXAMPLES_DIR "${G4examples_DIR}")
+  message(STATUS "[FindSciG4examples.cmake] - EXAMPLES_DIR is ${G4examples_DIR}")
+else ()
+  message(STATUS "G4examples not found. Use -DEXAMPLES_DIR to specify the installation directory.")
+  if (G4examples_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciG4userdocs.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciG4userdocs.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciG4userdocs.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciG4userdocs.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,37 @@
+# - FindSciG4userdcos: Module to find user docs for G4engine.
+#
+# Module usage:
+#   find_package(SciG4userdocs ...)
+#
+
+###########################################################
+#
+# Find module for G4engine user documentation installation
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+###########################################################
+
+if (DEFINED G4USERDOCS_DIR)
+  message(STATUS "[FindSciG4userdocs.cmake] - G4USERDOCS_DIR is ${G4USERDOCS_DIR}")
+endif ()
+
+SciFindPackage(
+  PACKAGE G4userdocs
+  INSTALL_DIR g4userdocs-lite
+  FILES html/DagMCDocumentation.html
+)
+
+if (G4USERDOCS_FOUND)
+  get_filename_component(USERDOCS_DIR "${G4userdocs_FILES}" PATH)
+  message(STATUS "[FindSciG4userdocs.cmake] - USERDOCS_DIR is ${USERDOCS_DIR}")
+else ()
+  message(STATUS "G4userdocs not found. Use -DG4USERDOCS_DIR to specify the installation directory.")
+  if (G4userdocs_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGaCode.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGaCode.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGaCode.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGaCode.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,60 @@
+# - FindSciGaCode: Module to find include directories and
+#   libraries for GaCode
+#
+# Module usage:
+#   find_package(SciGaCode ...)
+#
+# This module will define the following variables:
+#  HAVE_GACODE, GACODE_FOUND = Whether libraries and includes are found
+#  GaCode_INCLUDE_DIRS       = Location of Polyswift includes
+#  GaCode_LIBRARY_DIRS       = Location of Polyswift libraries
+#  GaCode_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciGaCode: find includes and libraries for gacode
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir "gacode-par")
+  set(GaCode_INST_MODS gyro_interface neo_interface tglf_interface)
+  set(GaCode_INST_LIBS gacodegyro gacodeneo gacodetglf gacodeshared)
+else ()
+  set(instdir "gacode")
+  set(GaCode_INST_MODS tglf_interface)
+  set(GaCode_INST_LIBS gacodetglf gacodeshared)
+endif ()
+
+SciFindPackage(PACKAGE GaCode
+  INSTALL_DIRS ${instdir}
+  MODULES ${GaCode_INST_MODS}
+  LIBRARIES ${GaCode_INST_LIBS}
+)
+
+if (GACODE_FOUND)
+  set(HAVE_GACODE 1 CACHE BOOL "Whether have the gacode library")
+  set(HAVE_GaCode 1 CACHE BOOL "Whether have the gacode library")
+  include(${SCIMAKE_DIR}/SciGetDepsFromInstall.cmake)
+# Get fciowrappers libraries
+#  SciGetDepsFromInstall(Fciowrappers ${GaCode_DIR} FCIOWRAPPERS)
+# Get hdf5 libraries
+#  SciGetDepsFromInstall(Hdf5 ${FcIoWrappers_DIR} HDF5)
+# Get netcdf libraries
+#  SciGetDepsFromInstall(Netcdf ${FcIoWrappers_DIR} NETCDF)
+
+  # This should be improved with if statements.
+  set(HAVE_TGLF 1 CACHE BOOL "Whether gacode has TGLF")
+  set(HAVE_Tglf 1 CACHE BOOL "Whether gacode has TGLF")
+  if (ENABLE_PARALLEL)
+     set(HAVE_GYRO 1 CACHE BOOL "Whether gacode has GYRO")
+     set(HAVE_Gyro 1 CACHE BOOL "Whether gacode has GYRO")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGeant4.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGeant4.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGeant4.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGeant4.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,75 @@
+# - FindSciGeant4: Module to find include directories and
+#   libraries for Geant4.
+#
+# Module usage:
+#   find_package(SciGeant4 ...)
+#
+# This module will define the following variables:
+#  HAVE_GEANT4, GEANT4_FOUND = Whether libraries and includes are found
+#  Geant4_INCLUDE_DIRS       = Location of Geant4 includes
+#  Geant4_LIBRARY_DIRS       = Location of Geant4 libraries
+#  Geant4_LIBRARIES          = Required libraries
+#  Geant4_DLLS               =
+
+######################################################################
+#
+# FindGeant4: find includes and libraries for hdf5
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(Geant4_LIBRARY_LIST
+  G4FR
+  G4GMocren
+  G4RayTracer
+  G4Tree
+  G4VRML
+  G4analysis
+  G4clhep
+  G4digits_hits
+  G4error_propagation
+  G4event
+  G4geometry
+  G4global
+  G4graphics_reps
+  G4intercoms
+  G4interfaces
+  G4materials
+  G4modeling
+  G4parmodels
+  G4particles
+  G4persistency
+  G4physicslists
+  G4processes
+  G4readout
+  G4run
+  G4track
+  G4tracking
+  G4visHepRep
+  G4visXXX
+  G4vis_management
+  G4zlib
+)
+
+# The below should be optional
+  # G4OpenGL
+  # G4gl2ps
+
+SciFindPackage(
+  PACKAGE "Geant4"
+  HEADERS "globals.hh"
+  INCLUDE_SUBDIRS include/Geant4
+  LIBRARIES ${Geant4_LIBRARY_LIST}
+)
+
+if (GEANT4_FOUND)
+  message(STATUS "Found Geant4")
+else ()
+  message(STATUS "Did not find Geant4.  Use -DGeant4_ROOT_DIR to specify the installation directory.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGPerfTools.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGPerfTools.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGPerfTools.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGPerfTools.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,69 @@
+# - FindSciGPerfTools: Module to find include directories and libraries
+#   for GPerfTools. This module was implemented as there is no stock
+#   CMake module for GPerfTools.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciGPerfTools REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_GPERFTOOLS         = Whether have the GPerfTools library
+#  GPerfTools_INCLUDE_DIRS = Location of GPerfTools includes
+#  GPerfTools_LIBRARY_DIRS = Location of GPerfTools libraries
+#  GPerfTools_LIBRARIES    = Required libraries
+#  GPerfTools_STLIBS       = Location of GPerfTools static library
+
+######################################################################
+#
+# SciFindGPerfTools: find includes and libraries for GPerfTools.
+#
+# $Rev: 1134 $ $Date: 2017-02-14 13:29:47 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2016-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (WIN32)
+  set(GPERFTOOLS_LIB_PREFIX "")
+else (WIN32)
+  set(GPERFTOOLS_LIB_PREFIX "lib")
+endif (WIN32)
+
+if (WIN32)
+  set(GPERFTOOLS_LIB_SUFFIX "lib")
+else (WIN32)
+  set(GPERFTOOLS_LIB_SUFFIX "a")
+endif (WIN32)
+
+if (NOT DEFINED GPerfTools_SEARCH)
+  if (DEFINED GPerfTools_FIND_VERSION)
+    set(GPerfTools_SEARCH "gperftools${GPerfTools_FIND_VERSION}")
+  else ()
+    set(GPerfTools_SEARCH "gperftools")
+  endif ()
+endif ()
+if (NOT DEFINED GPerfTools_SEARCH_HEADERS)
+  set(GPerfTools_SEARCH_HEADERS "gperftools/tcmalloc.h")
+endif ()
+if (NOT DEFINED GPerfTools_SEARCH_LIBS)
+  set(GPerfTools_SEARCH_LIBS "${GPERFTOOLS_LIB_PREFIX}tcmalloc_minimal.${GPERFTOOLS_LIB_SUFFIX}")
+endif ()
+
+SciFindPackage(PACKAGE "GPerfTools"
+              INSTALL_DIR ${GPerfTools_SEARCH}
+              HEADERS ${GPerfTools_SEARCH_HEADERS}
+              LIBRARIES ${GPerfTools_SEARCH_LIBS}
+              )
+
+if (GPERFTOOLS_FOUND)
+  message(STATUS "Found GperfTools")
+  set(HAVE_GPERFTOOLS 1 CACHE BOOL "Whether have the GPerfTools library")
+else ()
+  message(STATUS "Did not find GPerfTools. Use -DGPERFTOOLS_DIR to specify the installation directory.")
+  if (SciGPerfTools_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGraphviz.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGraphviz.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGraphviz.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGraphviz.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,39 @@
+# - FindSciGraphviz: Module to find dot
+#
+# Module usage:
+#   find_package(SciGraphviz ...)
+#
+# This module will define the following variables:
+#  GRAPHVIZ_FOUND  = Whether Graphviz was found
+#  Graphviz_dot    = Path to dot executable
+
+######################################################################
+#
+# SciGraphviz: Find Graphviz
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+message("")
+message("--------- FindSciGraphviz looking for dot ---------")
+
+SciFindPackage(PACKAGE Graphviz
+  PROGRAMS "dot"
+)
+
+if (GRAPHVIZ_FOUND)
+  message(STATUS "Graphviz_dot found.")
+  message(STATUS "Graphviz_dot = ${Graphviz_dot}")
+  get_filename_component(GRAPHVIZ_DOT_DIR ${Graphviz_dot} DIRECTORY)
+  message(STATUS "GRAPHVIZ_DOT_DIR = ${GRAPHVIZ_DOT_DIR}")
+else ()
+  message(STATUS "Graphviz_dot not found.")
+  # message(STATUS "Graphviz_dot not found. API documentation cannot be built.")
+  # set(ENABLE_DEVELDOCS FALSE)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGras.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGras.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGras.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGras.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,80 @@
+# - FindTxGras: Module to find include directories and
+#   libraries for Gras.
+#
+# Module usage:
+#   find_package(TxGras ...)
+#
+# This module will define the following variables:
+#  HAVE_GRAS, GRAS_FOUND = Whether libraries and includes are found
+#  Gras_INCLUDE_DIRS       = Location of Gras includes
+#  Gras_LIBRARY_DIRS       = Location of Gras libraries
+#  Gras_LIBRARIES          = Required libraries
+
+###########################################################
+#
+# Find module for Gras installation
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2016-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+###########################################################
+
+if (DEFINED GRAS_DIR)
+  message(STATUS "[FindGras.cmake] - GRAS_DIR is ${GRAS_DIR}")
+endif ()
+
+SciGetInstSubdirs(Gras-sersh instdirs)
+
+SciFindPackage(
+  PACKAGE Gras
+  INSTALL_DIRS ${instdirs}
+  PROGRAMS gras
+)
+
+if (GRAS_FOUND)
+  message(STATUS "Found Gras")
+  set(HAVE_GRAS 1 CACHE BOOL "Whether have Gras")
+
+  # Derive the base Gras directory
+  set(Gras_FOUND_PROGRAM ${Gras_gras})
+  if (NOT Gras_FOUND_PROGRAM)
+    set(Gras_FOUND_PROGRAM ${Gras_gras})
+  endif ()
+
+# This can only happen if there is something wrong with SciFindPackage,
+# and so a fatal error is appropriate.
+  if (NOT Gras_FOUND_PROGRAM)
+    message(FATAL_ERROR "No Gras executable was found?  Failing.")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message(STATUS "Using path ${Gras_FOUND_PROGRAM} to derive base Gras directory.")
+  endif ()
+
+  get_filename_component(GRAS_DIR ${Gras_FOUND_PROGRAM} PATH)
+  # get_filename_component(GRAS_DIR ${GRAS_DIR} PATH)
+  get_filename_component(GRAS_DIR ${GRAS_DIR}/.. REALPATH)
+  if (DEBUG_CMAKE)
+    message(STATUS "GRAS_DIR is ${GRAS_DIR}")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message("Trying to run executable ${Gras_FOUND_PROGRAM} to determine Gras version.")
+  endif ()
+
+#  include(${TXCMAKE_DIR}/TxEngFindVersion.cmake)
+#  TxEngFindVersion(${Gras_FOUND_PROGRAM} EXE_VERSION EXE_REVISION)
+#  set(Gras_VERSION ${EXE_VERSION})
+#  set(GRAS_VERSION ${EXE_VERSION})
+#  set(Gras_REVISION ${EXE_REVISION})
+else ()
+  message(STATUS "Gras not found. Use -DGRAS_DIR to specify the installation directory.")
+  if (SciGras_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+  set(Gras_VERSION "GrasNotFound")
+  set(Gras_REVISION "GrasNotFound")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGrin.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGrin.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGrin.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGrin.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,72 @@
+# - FindSciGrin: Module to find include directories and libraries
+#   for Grin. This module was implemented as there is no stock
+#   CMake module for Grin.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciGrin REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_GRIN         = Whether have the Grin library
+#  Grin_INCLUDE_DIRS = Location of Grin includes
+#  Grin_LIBRARY_DIRS = Location of Grin libraries
+#  Grin_LIBRARIES    = Required libraries
+#  Grin_STLIBS       = Location of Grin static library
+
+######################################################################
+#
+# SciFindGrin: find includes and libraries for Grin.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (WIN32)
+  set(GRIN_LIB_PREFIX "")
+else (WIN32)
+  set(GRIN_LIB_PREFIX "lib")
+endif (WIN32)
+
+if (WIN32)
+  set(GRIN_LIB_SUFFIX "lib")
+else (WIN32)
+  set(GRIN_LIB_SUFFIX "a")
+endif (WIN32)
+
+if (DEFINED GRIN_FIND_VERSION)
+  set(Grin_SEARCH "grin${GRIN_FIND_VERSION}")
+else ()
+  set(Grin_SEARCH "grin")
+endif ()
+
+#
+#  Define what to search for
+#
+set(Grin_MESSAGE_SEARCH "grin")
+if (NOT DEFINED Grin_SEARCH_HEADERS)
+  set(Grin_SEARCH_HEADERS "datatype.h;GrExprParser.h;hyper2f1.h;gamma.h;grfblk;lapack_names.h;GrBasisFunctions.h;GrGaussQuadrature.h;MvConst.h;GrCmdLineArgParser.h;GrGreenFunctions.h;MvCubspline.h;GrContourGeometry.h;GrHDF5.h;MvFunctors.h;GrContourGeometryReader.h;GrInfinityVacuumMatrix.h;MvMatrix.h;GrContourMatrices.h;GrResponseMatrixLaplaceN.h;MvSolve.h;GrContourSolver.h;GrSegment.h;MvVector.h;GrContourTopology.h;GrTypes.h;param1;GrDiracLaplaceNField.h;GrVacuumMatrices.h;psi.h;greenp.h;GrWall.h;GrExprAdaptor.h;GrXYReader.h;")
+endif ()
+if (NOT DEFINED Grin_SEARCH_LIBS)
+  set(Grin_SEARCH_LIBS "${GRIN_LIB_PREFIX}4m3d.${GRIN_LIB_SUFFIX};${GRIN_LIB_PREFIX}grin.${GRIN_LIB_SUFFIX};${GRIN_LIB_PREFIX}mv.${GRIN_LIB_SUFFIX};${GRIN_LIB_PREFIX}pppack.${GRIN_LIB_SUFFIX};${GRIN_LIB_PREFIX}specfun.${GRIN_LIB_SUFFIX};${GRIN_LIB_PREFIX}vacuum.${GRIN_LIB_SUFFIX}")
+endif ()
+
+SciFindPackage(PACKAGE "Grin"
+              INSTALL_DIR ${Grin_SEARCH}
+              HEADERS  ${Grin_SEARCH_HEADERS}
+              LIBRARIES ${Grin_SEARCH_LIBS}
+              )
+
+if (GRIN_FOUND)
+  message(STATUS "Found ${Grin_MESSAGE_SEARCH}")
+  set(HAVE_GRIN 1 CACHE BOOL "Whether have the ${Grin_MESSAGE_SEARCH} library")
+else ()
+  message(STATUS "Did not find ${Grin_MESSAGE_SEARCH}. Use -DGRIN_DIR to specify the installation directory.")
+  if (SciGrin_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciGsl.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciGsl.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciGsl.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciGsl.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+# - FindSciGsl: Module to find include directories and
+#   libraries for Gsl.
+#
+# Module usage:
+#   find_package(SciGsl ...)
+#
+# This module will define the following variables:
+#  HAVE_GSL, GSL_FOUND = Whether libraries and includes are found
+#  Gsl_INCLUDE_DIRS       = Location of Gsl includes
+#  Gsl_LIBRARY_DIRS       = Location of Gsl libraries
+#  Gsl_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindGsl: find includes and libraries for GSL
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(PACKAGE "Gsl"
+              INSTALL_DIR "gsl"
+              HEADERS "gsl/gsl_math.h;gsl/gsl_sf_legendre.h"
+              LIBRARIES "gsl;gslcblas"
+              INCLUDE_SUBDIRS "include"
+              LIBRARY_SUBDIRS "lib"
+             )
+
+if (GSL_FOUND)
+  message(STATUS "Found Gsl")
+  set(HAVE_GSL 1 CACHE BOOL "Whether have Gsl")
+else ()
+  message(STATUS "Did not find Gsl.  Use -DGSL_DIR to specify the installation directory.")
+  if (SciGsl_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciHdf5.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciHdf5.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciHdf5.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciHdf5.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,191 @@
+# - FindSciHdf5: Module to find include directories and
+#   libraries for Hdf5.
+#
+# Module usage:
+#   find_package(SciHdf5 ...)
+#
+# This module will define the following variables:
+#  HAVE_HDF5, HDF5_FOUND   = Whether libraries and includes are found
+#  Hdf5_INCLUDE_DIRS       = Location of Hdf5 includes
+#  Hdf5_LIBRARY_DIRS       = Location of Hdf5 libraries
+#  Hdf5_LIBRARIES          = Required libraries
+#  Hdf5_DLLS               =
+
+######################################################################
+#
+# FindSciHdf5: find includes and libraries for hdf5
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# The names of the hdf5 libraries can vary, so instead we find
+# the includes and look for the cmake file.  But for that, we
+# need the version.
+message("")
+message(STATUS "Initial search for Hdf5 components")
+
+SciGetInstSubdirs(Hdf5 instdirs)
+
+SciFindPackage(PACKAGE "Hdf5"
+  INSTALL_DIRS ${instdirs}
+  HEADERS hdf5.h H5pubconf.h
+# Last in list is for finding within VisIt installation
+  INCLUDE_SUBDIRS include include/hdf5/include
+  MODULE_SUBDIRS include
+      include/static  # 1.8.16
+  FIND_QUIETLY
+)
+
+# The version is given by H5_PACKAGE_VERSION in H5pubconf.h
+if (NOT Hdf5_H5pubconf_h)
+  set(Hdf5_FOUND FALSE)
+  message(FATAL_ERROR "Hfpubconf.h not found.")
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "Hdf5_H5pubconf_h = ${Hdf5_H5pubconf_h}.")
+  message(STATUS "Hdf5_H5pubconf_h_INCLUDE_DIR = ${Hdf5_H5pubconf_h_INCLUDE_DIR}.")
+endif ()
+file(STRINGS ${Hdf5_H5pubconf_h} line
+  REGEX "^#define *H5_PACKAGE_VERSION"
+)
+if (DEBUG_CMAKE)
+  message(STATUS "line = ${line}.")
+endif ()
+string(REGEX REPLACE "#define *H5_PACKAGE_VERSION*" "" val "${line}")
+string(REGEX REPLACE "\"" "" Hdf5_VERSION "${val}")
+string(STRIP "${Hdf5_VERSION}" Hdf5_VERSION)
+message(STATUS "Hdf5_VERSION = ${Hdf5_VERSION}.")
+
+# Fill in what we know
+if (${Hdf5_hdf5_h_INCLUDE_DIR} MATCHES "include/hdf5/include$")
+  get_filename_component(Hdf5_ROOT_DIR ${Hdf5_hdf5_h_INCLUDE_DIR}/../../.. REALPATH)
+else ()
+  get_filename_component(Hdf5_ROOT_DIR ${Hdf5_hdf5_h_INCLUDE_DIR}/.. REALPATH)
+endif ()
+message(STATUS "Hdf5_ROOT_DIR = ${Hdf5_ROOT_DIR}.")
+
+# Version known, can look for config file
+SciFindPackage(PACKAGE "Hdf5"
+  CONFIG_SUBDIRS
+# They keep changing the location
+    lib/cmake/hdf5-${Hdf5_VERSION}   # 1.8.6
+    share/cmake/hdf5-${Hdf5_VERSION} # 1.8.7
+    share/cmake/hdf5   # 1.8.12
+    share/cmake        # 1.8.18
+    cmake        # 1.8.16-windows
+  # USE_CONFIG_FILE # Cannot always source, so decide later
+  CONFIG_FILE_ONLY
+  FIND_QUIETLY
+)
+message(STATUS "Hdf5_CONFIG_CMAKE = ${Hdf5_CONFIG_CMAKE}.")
+
+# Not all version have good files to source
+if (FALSE)
+if (${Hdf5_VERSION} STREQUAL 1.8.12 OR ${Hdf5_VERSION} STREQUAL 1.8.9)
+  message(STATUS "Not using ${Hdf5_CONFIG_CMAKE}.")
+else ()
+  include(${Hdf5_CONFIG_CMAKE})
+  if (DEBUG_CMAKE)
+    message(STATUS "After including ${Hdf5_CONFIG_CMAKE}, HDF5_LIBRARIES = ${HDF5_LIBRARIES}.")
+  endif ()
+endif ()
+endif ()
+
+# Get the libraries in proper order
+if (HDF5_LIBRARIES)
+  set(hlibs ${HDF5_LIBRARIES})
+else ()
+  file(GLOB hlibs ${Hdf5_ROOT_DIR}/lib/*hdf5*)
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "hlibs = ${hlibs}.")
+endif ()
+set(hlnms)
+foreach (lb ${hlibs})
+  get_filename_component(ln ${lb} NAME_WE)
+# Remove leading lib
+  string(REGEX REPLACE "^lib" "" ln "${ln}")
+  set(hlnms ${hlnms} ${ln})
+endforeach ()
+if (DEBUG_CMAKE)
+  message(STATUS "hlnms = ${hlnms}.")
+endif ()
+if (Hdf5_NEEDED_LIBS)
+  set(desiredlibs ${Hdf5_NEEDED_LIBS})
+else ()
+  set(desiredlibs)
+  foreach (nm hdf5_tools hdf5_toolsdll hdf5_hl_fortran hdf5_hl_f90cstub
+    hdf5_fortran hdf5_f90cstub hdf5_hl hdf5_hldll hdf5 hdf5dll
+    hdf5_debug
+  )
+    list(FIND hlnms ${nm} indx)
+    if (NOT(${indx} EQUAL -1))
+      set(desiredlibs ${desiredlibs} ${nm})
+    endif ()
+  endforeach ()
+  set(desiredlibs ${desiredlibs} OPTIONAL)
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "desiredlibs = ${desiredlibs}.")
+endif ()
+
+# Get execs
+file(GLOB hexecs ${Hdf5_ROOT_DIR}/bin/h5diff* ${Hdf5_ROOT_DIR}/bin/h5ls*)
+set(desiredexecs)
+foreach (ex ${hexecs})
+  get_filename_component(en ${ex} NAME_WE)
+  set(desiredexecs ${desiredexecs} ${en})
+endforeach ()
+
+if (DEBUG_CMAKE)
+  message(STATUS "Looking for the HDF5 libraries, ${desiredlibs}.")
+endif ()
+
+set(desiredmods)
+# We may have a working Fortran compiler, but perhaps don't
+# have a fortran Hdf5 build.
+if (NOT DEFINED Hdf5_Fortran_REQUIRED)
+  set(Hdf5_Fortran_REQUIRED ${CMAKE_Fortran_COMPILER_WORKS})
+endif ()
+if (Hdf5_Fortran_REQUIRED)
+  set(desiredmods hdf5)
+endif ()
+SciFindPackage(PACKAGE "Hdf5"
+  PROGRAMS ${desiredexecs}
+  HEADERS hdf5.h
+  LIBRARIES ${desiredlibs}
+  MODULES ${desiredmods}
+  INCLUDE_SUBDIRS include include/hdf5/include # Last for VisIt installation
+  MODULE_SUBDIRS include/fortran lib
+      include         # 1.8.13
+      include/static  # 1.8.16
+)
+
+if (HDF5_FOUND)
+# Backward compatibility
+  set(HAVE_HDF5 1 CACHE BOOL "Whether have the HDF5 library")
+  set(OLD_H5S_SELECT_HYPERSLAB_IFC 0 CACHE BOOL
+    "Whether using the old 1.6.3 H5Sselect_hyperslab interface")
+  if (WIN32 AND Hdf5_DLLS)
+    set(Hdf5_DEFINITIONS ${Hdf5_DEFINITIONS} -DH5_BUILT_AS_DYNAMIC_LIB)
+    message(STATUS "Adding to Hdf5_DEFINITIONS that H5 build dynamic.")
+    SciPrintVar(Hdf5_DEFINITIONS)
+  endif ()
+# if linux add dl to the libraries variable
+# JRC: Cannot do this here as interferes with static linking of vorpal.
+# Must be done in the CMakeLists.txt where the executable is being linked.
+  if (LINUX)
+    # set(Hdf5_LIBRARIES ${Hdf5_LIBRARIES} dl)
+  endif ()
+else ()
+  message(STATUS "Did not find Hdf5.  Use -DHdf5_ROOT_DIR to specify the installation directory.")
+  if (SciHdf5_FIND_REQUIRED)
+    message(FATAL_ERROR "Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciHypre.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciHypre.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciHypre.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciHypre.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,65 @@
+# - FindSciHypre: Module to find include directories and libraries
+#   for Hypre. This module was implemented as there is no stock
+#   CMake module for Hypre.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciHypre REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_HYPRE         = Whether have the Hypre library
+#  Hypre_INCLUDE_DIRS = Location of Hypre includes
+#  Hypre_LIBRARY_DIRS = Location of Hypre libraries
+#  Hypre_LIBRARIES    = Required libraries
+#  Hypre_STLIBS       = Location of Hypre static library
+
+######################################################################
+#
+# SciFindHypre: find includes and libraries for Hypre.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (WIN32)
+  set(HYPRE_LIB_PREFIX "")
+else (WIN32)
+  set(HYPRE_LIB_PREFIX "lib")
+endif (WIN32)
+
+if (WIN32)
+  set(HYPRE_LIB_SUFFIX "lib")
+else (WIN32)
+  set(HYPRE_LIB_SUFFIX "a")
+endif (WIN32)
+
+if (NOT DEFINED Hypre_SEARCH)
+  set(Hypre_SEARCH "hypre")
+endif ()
+if (NOT DEFINED Hypre_SEARCH_HEADERS)
+  set(Hypre_SEARCH_HEADERS "HYPRE.h")
+endif ()
+if (NOT DEFINED Hypre_SEARCH_LIBS)
+  set(Hypre_SEARCH_LIBS "${HYPRE_LIB_PREFIX}HYPRE.${HYPRE_LIB_SUFFIX}")
+endif ()
+
+SciFindPackage(PACKAGE "Hypre"
+              INSTALL_DIR ${Hypre_SEARCH}
+              HEADERS ${Hypre_SEARCH_HEADERS}
+              LIBRARIES ${Hypre_SEARCH_LIBS}
+              )
+
+if (HYPRE_FOUND)
+  message(STATUS "Found HYPRE")
+  set(HAVE_HYPRE 1 CACHE BOOL "Whether have the HYPRE library")
+else ()
+  message(STATUS "Did not find HYPRE. Use -DHYPRE_DIR to specify the installation directory.")
+  if (SciHypre_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciIdl.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciIdl.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciIdl.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciIdl.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,143 @@
+# - FindSciIdl: Module to find the IDL executable.
+#
+# Module usage:
+#   find_package(SciIdl ...)
+#
+# Specify IDL_ROOT to indicate the location of an IDL distribution.
+#
+# This module will define the following variables:
+#   IDL_FOUND           = whether IDL was found
+#   Idl_PLATFORM_EXT    = DLM extension, i.e., darwin.x86_64, linux.x86, x86_64...
+#   Idl_INCLUDE_DIR     = IDL include directory
+#   Idl_LIBRARY         = IDL shared library location
+#   Idl_EXECUTABLE      = IDL command
+#   Idl_PATH_SEP        = character to separate IDL paths
+
+######################################################################
+#
+# FindSciIdl.cmake: Find the IDL executable
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# convenience variable for ITT's install dir, should be fixed to use
+# Program Files env var but it is problematic in cygwin
+if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
+  set(_Idl_PROGRAM_FILES_DIR "C:/Program Files")
+  set(_Idl_NAME "IDL")
+  set(_Idl_OS "")
+  set(_Idl_KNOWN_COMPANIES "Exelis" "ITT")
+  set(_Idl_EXECUTABLE_EXT ".exe")
+  set(Idl_PATH_SEP ";")
+elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "CYGWIN")
+  set(_Idl_PROGRAM_FILES_DIR "/cygdrive/c/Program Files")
+  set(_Idl_NAME "IDL")
+  set(_Idl_OS "")
+  set(_Idl_KNOWN_COMPANIES "Exelis" "ITT")
+  set(_Idl_EXECUTABLE_EXT ".exe")
+  set(Idl_PATH_SEP ";")
+
+  set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
+  set(CMAKE_FIND_LIBRARY_PREFIXES "")
+elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
+  set(_Idl_PROGRAM_FILES_DIR "/Applications")
+  set(_Idl_NAME "idl")
+  set(_Idl_OS "darwin.")
+  set(_Idl_KNOWN_COMPANIES "exelis" "itt")
+  set(_Idl_EXECUTABLE_EXT "")
+  set(Idl_PATH_SEP ":")
+elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
+  set(_Idl_PROGRAM_FILES_DIR "/usr/local")
+  set(_Idl_NAME "idl")
+  set(_Idl_OS "linux.")
+  set(_Idl_KNOWN_COMPANIES "exelis" "itt")
+  set(_Idl_EXECUTABLE_EXT "")
+  set(Idl_PATH_SEP ":")
+endif ()
+
+# find idl based on version numbers, if you want a specific one, set
+# it prior to running configure
+if (NOT DEFINED Idl_FIND_VERSION)
+  set(_Idl_KNOWN_VERSIONS "84" "83" "82" "81" "80" "71" "706")
+# IDL 8.0 is in a different location than other versions on Windows (extra IDL directory in path)
+  foreach (_Idl_COMPANY ${_Idl_KNOWN_COMPANIES})
+    list(APPEND
+         _Idl_SEARCH_DIRS
+         "${_Idl_PROGRAM_FILES_DIR}/${_Idl_COMPANY}/${_Idl_NAME}/${_Idl_NAME}80")
+    list(APPEND
+         _Idl_SEARCH_DIRS
+         "${_Idl_PROGRAM_FILES_DIR}/${_Idl_COMPANY}/${_Idl_NAME}/${_Idl_NAME}81")
+    foreach (_Idl_KNOWN_VERSION ${_Idl_KNOWN_VERSIONS})
+      list(APPEND _Idl_SEARCH_DIRS
+           "${_Idl_PROGRAM_FILES_DIR}/${_Idl_COMPANY}/${_Idl_NAME}${_Idl_KNOWN_VERSION}")
+    endforeach (_Idl_KNOWN_VERSION ${_Idl_KNOWN_VERSIONS})
+  endforeach (_Idl_COMPANY ${_Idl_KNOWN_COMPANIES})
+endif ()
+
+if (NOT "$ENV{IDL_DIR}" STREQUAL "")
+  set(_Idl_SEARCH_DIRS "$ENV{IDL_DIR}")
+endif ()
+
+find_path(Idl_INCLUDE_DIR
+  idl_export.h
+  PATHS ${_Idl_SEARCH_DIRS}
+  HINTS ${IDL_ROOT}
+  PATH_SUFFIXES external/include
+)
+
+if ("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
+  set(Idl_BIN_EXT "x86")
+elseif ("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
+  set(Idl_BIN_EXT "x86_64")
+else ()
+  set (Idl_BIN_EXT "unknown")
+endif ()
+
+set(Idl_PLATFORM_EXT "${_Idl_OS}${Idl_BIN_EXT}")
+
+find_library(Idl_LIBRARY
+  NAMES idl
+  PATHS ${_Idl_SEARCH_DIRS}
+  HINTS ${IDL_ROOT}
+  PATH_SUFFIXES /bin/bin.${Idl_PLATFORM_EXT}
+)
+
+if (Idl_INCLUDE_DIR AND Idl_LIBRARY)
+  set(IDL_FOUND TRUE)
+endif ()
+
+if (IDL_FOUND)
+  # find the version
+  get_filename_component(Idl_ROOT "${Idl_INCLUDE_DIR}/../.." ABSOLUTE)
+  set(_Idl_VERSION_FILENAME "${Idl_ROOT}/version.txt")
+
+  if (EXISTS "${_Idl_VERSION_FILENAME}")
+    file(READ "${_Idl_VERSION_FILENAME}" _Idl_VERSION)
+    string(STRIP "${_Idl_VERSION}" Idl_VERSION)
+  endif ()
+
+  if (WIN32 OR CYGWIN)
+    set(Idl_EXECUTABLE "${Idl_ROOT}/bin/bin.${Idl_BIN_EXT}/idl${_Idl_EXECUTABLE_EXT}")
+  else ()
+    set(Idl_EXECUTABLE "${Idl_ROOT}/bin/idl${_Idl_EXECUTABLE_EXT}")
+  endif ()
+
+  if (NOT SciIdl_FIND_QUIETLY)
+    if (DEFINED Idl_VERSION)
+      message(STATUS "Found IDL: ${Idl_LIBRARY} (found version \"${Idl_VERSION}\")")
+    else ()
+      message(STATUS "Found IDL: ${Idl_LIBRARY} (no version file found)")
+    endif ()
+  endif ()
+  set(HAVE_IDL 1 CACHE BOOL "Whether have IDL")
+else ()
+   if (SciIdl_FIND_REQUIRED)
+      message(FATAL_ERROR "Did not find IDL. Use -DIdl_INCLUDE_DIR and -DIdl_LIBRARY to specify IDL location.")
+   endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciLibssh.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciLibssh.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciLibssh.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciLibssh.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,74 @@
+# - FindSciLibsshn: Module to find include directories and libraries
+#   for Libssh. This module was implemented as there is no stock
+#   CMake module for Libssh. This is currently being used by QuIDS
+#   project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciLibssh REQUIRED)
+#
+# Input variables
+# ENABLE_SHARED if true, will look for shared installation of libssh
+# USE_SHARED_LIBS same as above.
+#
+# This module will define the following variables:
+#  HAVE_LIBSSH         = Whether have the Libssh library
+#  Libssh_INCLUDE_DIRS = Location of Libssh includes
+#  Libssh_LIBRARY_DIRS = Location of Libssh libraries
+#  Libssh_LIBRARIES    = Required libraries
+#  Libssh_STLIBS       = Location of Libssh static library
+
+######################################################################
+#
+# SciFindLibssh: find includes and libraries for Libssh.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(CMAKE_FIND_LIBRARY_SUFFIXES_SAV ${CMAKE_FIND_LIBRARY_SUFFIXES})
+set(libsubdirs lib)
+if (USE_PYC_LIBS)
+# Shared libs in ser for libssh
+  set(instdirs libssh-pycsh libssh)
+else ()
+  set(instdirs libssh)
+endif ()
+if (NOT (USE_SHARED_LIBS OR BUILD_SHARED_LIBS OR
+    (WIN32 AND BUILD_WITH_SHARED_RUNTIME)))
+  set(libsubdirs lib/static ${libsubdirs})
+  if (WIN32)
+    set(CMAKE_FIND_LIBRARY_SUFFIXES .lib)
+  else ()
+    set(CMAKE_FIND_LIBRARY_SUFFIXES .a)
+  endif ()
+endif ()
+# message(STATUS "libsubdirs = ${libsubdirs}.")
+
+SciFindPackage(
+  PACKAGE "Libssh"
+  INSTALL_DIRS ${instdirs}
+  HEADERS "libssh/libssh.h"
+  LIBRARY_SUBDIRS ${libsubdirs}
+  LIBRARIES "ssh"
+)
+set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_SAV})
+
+if (LIBSSH_FOUND)
+  message(STATUS "Found Libssh")
+  set(HAVE_LIBSSH 1 CACHE BOOL "Whether have the LIBSSH library")
+  if (WIN32 AND Libssh_DLLS)
+    set(Libssh_DEFINITIONS ${Libssh_DEFINITIONS} -ULIBSSH_STATIC)
+  else ()
+    set(Libssh_DEFINITIONS ${Libssh_DEFINITIONS} -DLIBSSH_STATIC)
+  endif ()
+else ()
+  message(STATUS "Did not find Libssh.  Use -DLibssh_ROOT_DIR to specify the installation directory.")
+  if (SciLibssh_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciLibXml2.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciLibXml2.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciLibXml2.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciLibXml2.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,44 @@
+# - FindSciLibXml2n: Module to find include directories and libraries
+#   for LibXml2. This module was implemented as there is no stock
+#   CMake module for LibXml2.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciLibXml2 REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_LIBXML2         = Whether have the LibXml2 library
+#  LibXml2_INCLUDE_DIRS = Location of LibXml2 includes
+#  LibXml2_LIBRARY_DIRS = Location of LibXml2 libraries
+#  LibXml2_LIBRARIES    = Required libraries
+#  LibXml2_STLIBS       = Location of LibXml2 static library
+
+######################################################################
+#
+# SciFindLibXml2: find includes and libraries for LibXml2.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "LibXml2"
+               INSTALL_DIR libxml2
+               INCLUDE_SUBDIRS include/libxml2
+               HEADERS libxml/tree.h
+               LIBRARIES "libxml2.a"
+              )
+
+if (LIBXML2_FOUND)
+  message(STATUS "Found LibXml2")
+  set(HAVE_LIBXML2 1 CACHE BOOL "Whether have the LIBXML2 library")
+else ()
+  message(STATUS "Did not find LibXml2.  Use -DLIBXML2_DIR to specify the installation directory.")
+  if (SciLibXml2_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMagma.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMagma.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMagma.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMagma.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,51 @@
+# - FindSciMagma: Module to find the MAGMA library.
+#
+# Module usage:
+#   find_package(SciMagma ...)
+#
+# Should probably be modified to use SciFindPackage...
+
+######################################################################
+#
+# FindSciMagma.cmake: Find the MAGMA library.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (WIN32)
+  set(MAGMA_LIB_PREFIX "lib")
+  set(MAGMA_LIB_SUFFIX ".lib")
+else ()
+  set(MAGMA_LIB_PREFIX "lib")
+  set(MAGMA_LIB_SUFFIX ".a")
+endif ()
+
+SciFindPackage(PACKAGE "magma"
+  INSTALL_DIR "${magma_ROOT_DIR}"
+  LIBRARIES "${MAGMA_LIB_PREFIX}magma${MAGMA_LIB_SUFFIX}"
+  HEADERS "magma.h"
+  INCLUDE_SUBDIRS "include"
+  LIBRARY_SUBDIRS "lib"
+  ALLOW_LIBRARY_DUPLICATES TRUE
+)
+
+if (MAGMA_FOUND)
+  message(STATUS "Found MAGMA.")
+  set(HAVE_MAGMA 1 CACHE BOOL "Whether have MAGMA")
+else ()
+   if (SciMagma_FIND_REQUIRED)
+     message(FATAL_ERROR "Could not find MAGMA")
+   else ()
+     if (magma_ROOT_DIR)
+       message(STATUS "MAGMA not found in ${magma_ROOT_DIR}")
+     else ()
+       message(STATUS "Not searching for MAGMA")
+     endif ()
+   endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMathJax.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMathJax.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMathJax.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMathJax.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,53 @@
+# - FindSciMathJax: This module looks for MathJax java code.
+# MathJax is a web capable, javascript display engine for mathematics.
+# See http://www.mathjax.org
+#
+# This module works from the variable
+#
+#  MATHJAXJS =  the full path or url to MathJax.js
+#
+# This modules defines the following variables:
+#
+#  MathJax_MathJax_js = the full path or url to MathJax.js
+#  MathJax_ROOT_DIR        = If not a url, the directory containing MathJax.js
+#
+
+######################################################################
+#
+# FindSciMathJax
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# if MATHJAXJS is defined, use that
+if (MATHJAXJS)
+  message(STATUS "MATHJAXJS = ${MATHJAXJS}.  Will use that.")
+  set(MathJax_MathJax_js ${MATHJAXJS})
+  if (NOT "${MATHJAXJS}" MATCHES "^http")
+    get_filename_component(MathJax_ROOT_DIR ${MathJax_MathJax_js}/.. REALPATH)
+  endif ()
+  set(MATHJAX_FOUND TRUE)
+else ()
+  message(STATUS "MATHJAXJS not defined.  Will have to find it.")
+# Key of build to find same kind
+  if (MATHJAX_ROOTDIR)
+    # set(instdirs "INSTALL_DIRS ${MATHJAX_ROOTDIR}")
+    SciFindPackage(PACKAGE MathJax INSTALL_DIRS ${MATHJAX_ROOTDIR} FILES MathJax.js)
+  elseif ("${CMAKE_INSTALL_PREFIX}" MATCHES "-lite\$")
+    # set(instdirs "INSTALL_DIRS MathJax-lite")
+    SciFindPackage(PACKAGE MathJax INSTALL_DIRS MathJax-lite FILES MathJax.js)
+  else ()
+    # set(instdirs "INSTALL_DIRS MathJax")
+    SciFindPackage(PACKAGE MathJax INSTALL_DIRS MathJax FILES MathJax.js)
+  endif ()
+  # SciFindPackage(PACKAGE MathJax ${instdirs} FILES MathJax.js)
+  get_filename_component(MathJax_ROOT_DIR ${MathJax_MathJax_js}/.. REALPATH)
+endif ()
+message(STATUS "  MathJax_ROOT_DIR          = ${MathJax_ROOT_DIR}")
+message(STATUS "  MathJax_MathJax_js   = ${MathJax_MathJax_js}")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMdsplus.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMdsplus.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMdsplus.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMdsplus.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+# - FindSciMdsplus: Module to find include directories and
+#   libraries for Mdsplus.
+#
+# Module usage:
+#   find_package(SciMdsplus ...)
+#
+# This module will define the following variables:
+#  HAVE_MDSPLUS, MDSPLUS_FOUND = Whether libraries and includes are found
+#  Mdsplus_INCLUDE_DIRS        = Location of Mdsplus includes
+#  Mdsplus_LIBRARY_DIRS        = Location of Mdsplus libraries
+#  Mdsplus_LIBRARIES           = Required libraries
+
+######################################################################
+#
+# FindMdsplus: find includes and libraries for mdsplus
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(PACKAGE "Mdsplus"
+              INSTALL_DIR "mdsplus"
+              HEADERS "mdsdescrip.h" "mdslib.h"
+              LIBRARIES "MdsLib"
+              INCLUDE_SUBDIRS "include"
+              LIBRARY_SUBDIRS "lib"
+              )
+
+if (MDSPLUS_FOUND)
+  message(STATUS "Found Mdsplus")
+  set(HAVE_MDSPLUS 1 CACHE BOOL "Whether have the mdsplus library")
+else ()
+   message(STATUS "Did not find Mdsplus.  Use -DMdsplus_ROOT_DIR to specify the installation directory.")
+   if (SciMdsplus_FIND_REQUIRED)
+       message(FATAL_ERROR "Failing.")
+   endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMesa.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMesa.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMesa.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMesa.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,49 @@
+# - FindSciMesa: Module to find include directories and
+#   libraries for Mesa.
+#
+# Module usage:
+#   find_package(SciMesa ...)
+#
+# This module will define the following variables:
+#  HAVE_MESA, MESA_FOUND = Whether libraries and includes are found
+#  Mesa_INCLUDE_DIRS       = Location of Mesa includes
+#  Mesa_LIBRARY_DIRS       = Location of Mesa libraries
+#  Mesa_LIBRARIES          = Required libraries
+
+#################################################
+#
+# Find module for Mesa
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+#################################################
+
+if (NOT DEFINED Mesa_LIBRARY_LIST)
+  set(Mesa_LIBRARY_LIST MesaGL OSMesa)
+endif ()
+
+# JRC: I believe it is conventional to look for includes with the GL dir
+# prepended.
+SciFindPackage(
+  PACKAGE Mesa
+  HEADERS GL/gl.h
+  LIBRARIES MesaGL OSMesa
+  INCLUDE_SUBDIRS include include/mesa/include # First for Visit
+)
+
+if (MESA_FOUND)
+  # message(STATUS "[FindMesa.cmake] - Found Mesa")
+  # message(STATUS "[FindMesa.cmake] - Mesa_INCLUDE_DIRS = ${Mesa_INCLUDE_DIRS}")
+  # message(STATUS "[FindMesa.cmake] - Mesa_LIBRARIES = ${Mesa_LIBRARIES}")
+  set(HAVE_Mesa 1 CACHE BOOL "Whether have Vtk.")
+else ()
+  message(STATUS "[FindMesa.cmake] - Did not find Mesa, use -DMesa_ROOT_DIR to supply the Mesa installation directory.")
+  if (SciMesa_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindMesa.cmake] - Failed to find Mesa.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMetis.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMetis.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMetis.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMetis.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,44 @@
+# - FindSciMetis: Module to find include directories and libraries
+#   for Metis. This module was implemented as there is no stock
+#   CMake module for Metis. This is currently being used by QuIDS
+#   project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciMetis REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_METIS         = Whether have the Metis library
+#  Metis_INCLUDE_DIRS = Location of Metis includes
+#  Metis_LIBRARY_DIRS = Location of Metis libraries
+#  Metis_LIBRARIES    = Required libraries
+#  Metis_STLIBS       = Location of Metis static library
+
+######################################################################
+#
+# SciFindMetis: find includes and libraries for Metis.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "Metis"
+              INSTALL_DIR "metis"
+              HEADERS "metis.h"
+              LIBRARIES "metis"
+              )
+
+if (METIS_FOUND)
+  message(STATUS "Found Metis")
+  set(HAVE_METIS 1 CACHE BOOL "Whether have the METIS library")
+else ()
+  message(STATUS "Did not find Metis.  Use -DMETIS_DIR to specify the installation directory.")
+  if (SciMetis_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMex.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMex.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMex.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMex.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,37 @@
+# - FindSciMex: Module to find include directories and
+#   libraries for Mex.
+#
+# Module usage:
+#   find_package(SciMex ...)
+#
+# May need to be changed to use SciFindPackge()
+
+########################################################################
+#
+# FindSciMex
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+########################################################################
+
+find_file(MEX NAMES mex.bat mex HINTS ENV PATH)
+
+if (MEX)
+  set(MEX_FOUND TRUE)
+endif ()
+
+if (MEX_FOUND)
+  if (NOT MEX_FIND_QUIETLY)
+    message(STATUS "Found MEX: ${MEX}")
+  endif ()
+  set(HAVE_MEX 1 CACHE BOOL "Whether have MEX")
+else ()
+   if (SciMex_FIND_REQUIRED)
+      message(FATAL_ERROR "Could not find MEX")
+   endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMkl.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMkl.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMkl.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMkl.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,91 @@
+# - FindSciMkl: Module to find include directories and
+#   libraries for Mkl.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+# Module usage:
+#   find_package(SciMkl ...)
+#
+# This module will define the following variables:
+#  HAVE_MKL, MKL_FOUND = Whether libraries and includes are found
+#  Mkl_INCLUDE_DIRS = Location of Mkl includes
+#  Mkl_LIBRARY_DIRS = Location of Mkl libraries
+#  Mkl_LIBRARIES    = Required libraries
+#  Mkl_STLIB        = Static libraries
+#  Iomp5_LIBRARIES  = Openmp intel libraries
+#
+######################################################################
+#
+#  Order of precedence: Command-line, environment, hard-code try
+#
+if ("${Mkl_ROOT_DIR}" STREQUAL "")
+  if (NOT "$ENV{MKLROOT}" STREQUAL "")
+     set(Mkl_ROOT_DIR "$ENV{MKLROOT}")
+  endif ()
+endif ()
+
+# Try hard-code directory if not specified already
+if ("${Mkl_ROOT_DIR}" STREQUAL "")
+  if (WIN32)
+    set(Mkl_ROOT_DIR "C:/Program Files (x86)/Intel/Composer XE/mkl")
+  else (WIN32)
+    set(Mkl_ROOT_DIR "/usr/local/intel/mkl")
+  endif (WIN32)
+endif ()
+
+#
+#  Allow architecture modification: intel64 or mic
+#
+if ("${Mkl_ARCH}" STREQUAL "")
+  set(Mkl_ARCH "intel64")
+endif ()
+
+#
+#  By default, just use the blas and lapack, but some may want
+#  to use scalapack and pardiso as well
+#
+if ("${Mkl_SEARCH_LIBS}" STREQUAL "")
+  if (ENABLE_MKL_SCALAPACK)
+    set(Mkl_SEARCH_LIBS "mkl_scalapack_lp64;mkl_intel_lp64;mkl_core;mkl_intel_thread;mkl_blacs_intelmpi_lp64")
+  else ()
+    set(Mkl_SEARCH_LIBS "mkl_intel_lp64;mkl_intel_thread;mkl_core")
+  endif ()
+endif ()
+
+#
+#  Now start the searching
+#
+SciFindPackage(PACKAGE "Mkl"
+              LIBRARIES ${Mkl_SEARCH_LIBS}
+              INCLUDE_SUBDIRS "include"
+              LIBRARY_SUBDIRS "lib/${Mkl_ARCH}"
+              )
+
+if (NOT MKL_FOUND)
+  message(STATUS "Did not find Mkl.  Use -DMkl_ROOT_DIR and, if using OpenMP, Iomp5_ROOT_DIR to specify the installation directory.")
+  if (SciMkl_FIND_REQUIRED)
+    message(FATAL_ERROR "Finding MKL failed.")
+  endif ()
+endif ()
+if (MKL_FOUND)
+  message(STATUS "Mkl found.")
+  set(HAVE_MKL 1 CACHE BOOL "Whether have Mkl")
+endif ()
+
+#
+#  IOMP5 is sometimes needed to get link to work.
+#  Go ahead and find it to be available.
+#
+#  Set iomp_dir
+get_filename_component(Iomp5_ROOT_DIR ${Mkl_ROOT_DIR}/../compiler/lib/${Mkl_ARCH} REALPATH)
+
+# Not quite sure about this -- this comes from Rood
+if (WIN32)
+  SciFindPackage(PACKAGE "Iomp5" LIBRARIES "libiomp5md")
+else ()
+  SciFindPackage(PACKAGE "Iomp5" LIBRARIES "iomp5")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMoab.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMoab.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMoab.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMoab.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,50 @@
+# - FindSciMoab: Module to find include directories and
+#   libraries for Moab.
+#
+# Module usage:
+#   find_package(SciMoab ...)
+#
+# This module will define the following variables:
+#  HAVE_MOAB, MOAB_FOUND = Whether libraries and includes are found
+#  Moab_INCLUDE_DIRS       = Location of Moab includes
+#  Moab_LIBRARY_DIRS       = Location of Moab libraries
+#  Moab_LIBRARIES          = Required libraries
+#  Moab_DLLS               =
+
+######################################################################
+#
+# FindMoab: find includes and libraries for hdf5
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (NOT DEFINED MOAB_COMPONENTS)
+  set(moabfindlibs dagmc iMesh MOAB)
+else ()
+  set(moabfindlibs ${MOAB_COMPONENTS})
+endif ()
+
+set(USE_PYC_LIBS TRUE)
+if (NOT DEFINED USE_SHARED_LIBS)
+  set(USE_SHARED_LIBS TRUE)
+endif ()
+SciGetInstSubdirs(moab instdirs)
+
+SciFindPackage(PACKAGE "Moab"
+  INSTALL_DIRS ${instdirs}
+  HEADERS "moab/Core.hpp"
+  LIBRARIES "${moabfindlibs}"
+  LIBRARY_SUBDIRS lib/${CXX_COMP_LIB_SUBDIR} lib
+)
+
+if (MOAB_FOUND)
+  message(STATUS "Found Moab")
+else ()
+  message(STATUS "Did not find Moab.  Use -DMoab_ROOT_DIR to specify the installation directory.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMpi.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMpi.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMpi.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMpi.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,312 @@
+# - FindSciMpi: This module looks for MPI first as being in the compilers, i.e.,
+# MPI compiler wrappers, by trying to compile sample code.  It then
+# looks for MPI using the standard CMake module, unless the compilers
+# have the Cray names, in which case we know that this will fail.
+#
+# The following variables are set:
+#
+# SCI_HAVE_MPICXX_COMPILER_WRAPPER: TRUE if the C++ compiler automatically
+#   includes and links to MPI.  If this is named 'CC', then no further MPI
+#   searching is done.
+# SCI_HAVE_MPIFC_COMPILER_WRAPPER: TRUE if the Fortran compiler automatically
+#   includes and links to MPI.  If this is named 'ftn', then no further
+#   MPI searching is done.
+# SCIMPI_FOUND is set to TRUE if either of the above is true.
+#
+# In the case where we further search using the standard MPI module,
+# and that is successfule, the following additional variables are set:
+#
+# MPI_INCLUDE_DIRS: the directories containing the C/C++ MPI header files
+# MPI_MODULE_DIRS:  the directories containing the Fortran module files
+#                   and the Fortran include files
+# MPI_LIBRARY_DIRS: the directories containing the MPI libraries
+# MPI_PROGRAMS:  mpiexec
+
+######################################################################
+#
+# FindSciMpi: check whether the compiler wraps MPI, if not, find MPI
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(SEARCH_FOR_MPI TRUE)
+set(HAVE_MPI 0 CACHE BOOL "Whether have MPI")
+
+# Determine whether mpi is already in the C++ compiler
+try_compile(SCI_HAVE_MPICXX_COMPILER_WRAPPER ${PROJECT_BINARY_DIR}/scimake
+  ${SCIMAKE_DIR}/trycompile/mpi_h.cxx)
+if (SCI_HAVE_MPICXX_COMPILER_WRAPPER)
+  message(STATUS "Using C/C++ compiler wrappers.")
+# If so, set that to the compiler
+  set(MPI_C_COMPILER ${CMAKE_C_COMPILER})
+  set(MPI_CXX_COMPILER ${CMAKE_CXX_COMPILER})
+  set(SCIMPI_FOUND TRUE)
+# Search for MPI libraries not possible with Cray compiler wrappers
+  if (${CMAKE_CXX_COMPILER} MATCHES "CC$")
+    set(SEARCH_FOR_MPI FALSE)
+  endif ()
+else ()
+  set(SCI_SERIAL_C_COMPILER ${CMAKE_C_COMPILER})
+endif ()
+
+# If have fortran determine whether mpi is already in the Fortran compiler
+if (CMAKE_Fortran_COMPILER_WORKS)
+  try_compile(SCI_HAVE_MPIFC_COMPILER_WRAPPER ${PROJECT_BINARY_DIR}/scimake
+    ${SCIMAKE_DIR}/trycompile/mpi_mod.f90)
+  if (SCI_HAVE_MPIFC_COMPILER_WRAPPER)
+    message(STATUS "Using Fortran compiler wrapper.")
+    set(MPI_Fortran_COMPILER ${CMAKE_Fortran_COMPILER})
+    set(SCIMPI_FOUND TRUE)
+  endif ()
+# Search for MPI libraries not possible with Cray compiler wrappers
+  if (${CMAKE_Fortran_COMPILER} MATCHES "ftn$")
+    set(SEARCH_FOR_MPI FALSE)
+  endif ()
+endif ()
+
+# If building parallel Fortran on 64 bit Windows
+# and using the MinGW compiler(s), as instructed on
+# https://ice.txcorp.com/trac/bilder/wiki/InstallMinGW, the
+# following sets the mpi variables directly because
+# find_package(MPI REQUIRED) gets this wrong.
+if (WIN32 AND "$ENV{PROCESSOR_ARCHITECTURE}" STREQUAL "AMD64" AND
+  ("${CMAKE_Fortran_COMPILER}" STREQUAL "C:/MinGW/bin/mingw32-gfortran.exe"))
+  message(STATUS "Using mingw32-gfortran.exe and linking to the MPI libraries distributed with HPC (To get the MPI libraries to link correctly, follow the instructions on https://ice.txcorp.com/trac/bilder/wiki/InstallMinGW exactly).")
+  set(MPI_Fortran C:/winsame/contrib-mingw/microsoft-hpc-mingw/lib/amd64/msmpi.lib)
+  if (${CMAKE_C_COMPILER} MATCHES "C:/MinGW/bin/mingw32-gcc.exe")
+    message(STATUS "Using mingw32-gcc and linking to the MPI libraries distributed with HPC.")
+    set(MPI_C C:/winsame/contrib-mingw/microsoft-hpc-mingw/lib/amd64/msmpi.lib)
+  else ()
+    if (${CMAKE_C_COMPILER} STREQUAL "")
+      message(STATUS "No C compiler set.")
+    else ()
+      message(STATUS "WARNING: CMAKE_C_COMPILER is set to ${CMAKE_C_COMPILER}.  When setting CMAKE_Fortran_COMPILER to C:/MinGW/bin/mingw32-gfortran.exe for parallel Fortran builds with mixed C on 64 bit Windows, set CMAKE_C_COMPILER to C:/MinGW/bin/mingw32-gcc and follow the instructions on https://ice.txcorp.com/trac/bilder/wiki/InstallMinGW exactly to ensure the MPI libraries distributed with HPC get linked correctly.")
+    endif ()
+  endif ()
+  if (${CMAKE_CXX_COMPILER} MATCHES "C:/MinGW/bin/mingw32-g\\+\\+.exe")
+    message(STATUS "Using mingw32-g++ and linking to the MPI libraries distributed with HPC.")
+    set(MPI_CXX C:/winsame/contrib-mingw/microsoft-hpc-mingw/lib/amd64/msmpi.lib)
+  else ()
+    if (${CMAKE_CXX_COMPILER} STREQUAL "")
+      message(STATUS "No C++ compiler set.")
+    else ()
+      message(STATUS "WARNING: CMAKE_CXX_COMPILER is set to ${CMAKE_CXX_COMPILER}.  When setting CMAKE_Fortran_COMPILER to C:/MinGW/bin/mingw32-gfortran.exe for parallel Fortran builds with mixed C++ on 64 bit Windows, set CMAKE_CXX_COMPILER to C:/MinGW/bin/mingw32-g++ and follow the instructions on https://ice.txcorp.com/trac/bilder/wiki/InstallMinGW exactly to ensure the MPI libraries distributed with HPC get linked correctly.")
+    endif ()
+  endif ()
+  set(MPI_PROGRAMS C:/winsame/contrib-mingw/microsoft-hpc-mingw/Bin/mpiexec.exe)
+  set(MPI_INCLUDE_DIRS C:/winsame/contrib-mingw/microsoft-hpc-mingw/include)
+  set(MPI_MODULE_DIRS C:/winsame/contrib-mingw/microsoft-hpc-mingw/include)
+  set(MPI_LIBRARIES C:/winsame/contrib-mingw/microsoft-hpc-mingw/Lib/amd64/msmpifec.lib;
+      C:/winsame/contrib-mingw/microsoft-hpc-mingw/lib/amd64/msmpi.lib)
+  set(MPI_STLIBS C:/winsame/contrib-mingw/microsoft-hpc-mingw/Lib/amd64/msmpifec.lib;
+      C:/winsame/contrib-mingw/microsoft-hpc-mingw/lib/amd64/msmpi.lib)
+  set(MPI_DLLS C:/winsame/contrib-mingw/microsoft-hpc-mingw/Lib/amd64/msmpi.dll)
+  set(MPI_LINK_FLAGS -L/winsame/contrib-mingw/microsoft-hpc-mingw/Lib/amd64 -lmsmpifec -lmsmpi)
+  set(SCIMPI_FOUND TRUE)
+  set(SEARCH_FOR_MPI FALSE)
+  message(STATUS "Enabling MPI")
+  SciPrintCMakeResults("MPI")
+  SciPrintVar(MPI_LINK_FLAGS)
+endif ()
+
+# Pass down the required variable.  This has file name capitalization.
+if (SEARCH_FOR_MPI)
+  if (SciMpi_FIND_REQUIRED)
+    set(mpireq REQUIRED)
+  else ()
+    set(mpireq)
+  endif ()
+  find_package(MPI ${mpireq})
+endif ()
+
+# If know more than compiler wrappers, pull out standard values
+set(MPI_IS_OPEN_MPI FALSE)
+if (MPI_FOUND)
+# Fix up problems with the stock find_package(MPI)
+  if (NOT MPI_INCLUDE_DIRS OR NOT MPI_LIBRARIES OR NOT MPIEXEC)
+    if (${CMAKE_C_COMPILER_ID} MATCHES "Intel")
+      execute_process(
+        COMMAND ${CMAKE_C_COMPILER} -show
+        OUTPUT_VARIABLE mpiiccOutput
+      )
+      string(STRIP ${mpiiccOutput} mpiiccOutput)
+      string(REPLACE " " ";" mpiiccOutputList "${mpiiccOutput}")
+      foreach (arg ${mpiiccOutputList})
+        if (${arg} MATCHES "^-I")
+          string(REGEX REPLACE "^-I" "" idir ${arg})
+          list(APPEND MPI_INCLUDE_DIRS ${idir})
+        elseif (${arg} MATCHES "^-L")
+          string(REGEX REPLACE "^-L" "" ldir ${arg})
+          list(APPEND MPI_LIBRARY_DIRS ${ldir})
+        elseif (${arg} MATCHES "^-l")
+          string(REGEX REPLACE "^-l" "" lib ${arg})
+          list(APPEND MPI_LIBRARIES ${lib})
+        endif ()
+      endforeach ()
+# Try to find both static and dynamic
+      set(MPI_DYLIBS)
+      if (WIN32)
+        set(libsuffix "lib")
+      else ()
+        set(libsuffix "a")
+      endif ()
+      foreach (flib ${MPI_LIBRARIES})
+        set(libfile "lib${flib}.${libsuffix}")
+        find_file(libst ${libfile}
+          PATHS ${MPI_LIBRARY_DIRS} NO_DEFAULT_PATH)
+        find_library(libdyn ${flib} lib${flib}
+          PATHS ${MPI_LIBRARY_DIRS} NO_DEFAULT_PATH)
+        list(APPEND MPI_DYLIBS ${libdyn})
+        list(APPEND MPI_STLIBS ${libst})
+      endforeach ()
+      if (LINUX)
+         set(MPIEXEC mpiexec.hydra)
+      endif()
+    endif ()
+    set(MPI_LIBRARY ${MPI_DYLIBS})
+  endif ()
+
+# Fix the variables
+  set(MPI_INCLUDE_DIRS ${MPI_INCLUDE_PATH})
+
+# Get the library dirs.
+# Assuming that finding fortran libs later will not affect this.
+  set(MPI_LIBRARY_DIRS)
+  foreach (lib ${MPI_LIBRARIES})
+    get_filename_component(dir ${lib}/.. REALPATH)
+    set(MPI_LIBRARY_DIRS ${MPI_LIBRARY_DIRS} ${dir})
+  endforeach ()
+  if (MPI_LIBRARY_DIRS)
+    list(REMOVE_DUPLICATES MPI_LIBRARY_DIRS)
+  endif ()
+
+# If fortran libraries not found, look for them in the MPI_DIRS by names
+  if (CMAKE_Fortran_COMPILER_WORKS)
+# Find MPI gets this wrong on windows
+    if (NOT MPI_Fortran_LIBRARIES)
+      if ("${MPI_Fortran_LIBRARIES}" STREQUAL "${MPI_C_LIBRARIES}")
+        foreach (libname mpi_f90 mpi_f77 msmpifec)
+          find_library(MPI_${libname} ${libname} ${MPI_LIBRARY_DIRS})
+          if (MPI_${libname})
+            set(MPI_Fortran_LIBRARIES ${MPI_Fortran_LIBRARIES} ${MPI_${libname}})
+          endif ()
+        endforeach ()
+# Fortran depends on C
+        set(MPI_Fortran_LIBRARIES ${MPI_Fortran_LIBRARIES} ${MPI_C_LIBRARIES})
+      endif ()
+    endif ()
+  endif ()
+
+# Get master library list, removing duplicates
+  set(mpilibs ${MPI_LIBRARIES})
+  if (MPI_Fortran_LIBRARIES)
+    message(STATUS "Adding fortran mpi libraries, ${MPI_Fortran_LIBRARIES}, to mpi libraries.")
+    set(mpilibs ${MPI_Fortran_LIBRARIES} ${mpilibs})
+  endif ()
+  if (mpilibs)
+    list(REVERSE mpilibs)
+    list(REMOVE_DUPLICATES mpilibs)
+    list(REVERSE mpilibs)
+# Strip any system libs off and put final result into NAMES and LIBRARIES
+    set(MPI_LIBRARIES)
+    set(MPI_LIBRARY_NAMES)
+    foreach (lib ${mpilibs})
+      if (${lib} MATCHES "/libdl\\." OR ${lib} MATCHES "/libnsl\\." OR ${lib} MATCHES "/libutil\\." OR ${lib} MATCHES "/libm\\.")
+      else ()
+        set(MPI_LIBRARIES ${MPI_LIBRARIES} ${lib})
+        get_filename_component(libname ${lib} NAME_WE)
+        string(REGEX REPLACE "^lib" "" libname ${libname})
+        set(MPI_LIBRARY_NAMES ${MPI_LIBRARY_NAMES} ${libname})
+      endif ()
+    endforeach ()
+# Get static libs
+    # message(STATUS "Getting static libraries for ${MPI_LIBRARIES}")
+    SciGetStaticLibs("${MPI_LIBRARIES}" MPI_STLIBS)
+  endif ()
+
+# Assume only one include dir
+  if (MPI_INCLUDE_DIRS AND NOT MPI_DIR)
+    get_filename_component(MPI_DIR ${MPI_INCLUDE_DIRS}/.. REALPATH)
+    set(MPI_ROOT_DIR ${MPI_DIR})
+  endif ()
+
+# Get module includes
+  set(MPI_MODULE_DIRS ${MPI_Fortran_INCLUDE_PATH})
+
+# If mpiexec not found, find it
+  if (MPI_DIR AND NOT MPIEXEC)
+    find_program(MPIEXEC NAMES mpiexec PATHS ${MPI_DIR}/bin NO_DEFAULT_PATH)
+  endif ()
+
+# Get the executables
+  get_filename_component(MPI_PROGRAMS ${MPIEXEC} REALPATH)
+
+# set the root directory variable
+  if (NOT MPI_ROOT_DIR)
+    get_filename_component(MPI_ROOT_DIR ${MPIEXEC}/../.. REALPATH)
+  endif ()
+
+# determine if openmpi
+  string(FIND "${MPI_ROOT_DIR}" "openmpi"  OPENMPI_SUBSTR_LOC)
+  if (OPENMPI_SUBSTR_LOC GREATER "-1")
+    set(MPI_IS_OPEN_MPI TRUE)
+    message(STATUS "Found open source message passing interface (OpenMpi).")
+  endif ()
+
+# MPI link for flags
+# The string strip line is needed because cmake
+# doesn't allow for leading/trailing whitespace.
+#
+# Kludge for strip call
+  if (MPI_LINK_FLAGS)
+    string(STRIP "${MPI_LINK_FLAGS}" MPI_LINK_FLAGS)
+  endif ()
+
+  message(STATUS "Enabling MPI")
+  SciPrintCMakeResults("MPI")
+  SciPrintVar(MPIEXEC)
+  SciPrintVar(MPI_LINK_FLAGS)
+  if (SCI_HAVE_MPICXX_COMPILER_WRAPPER)
+# Find the Serial C compiler
+# Does this work in general?
+    execute_process(COMMAND ${CMAKE_C_COMPILER} --showme:command
+        OUTPUT_VARIABLE SCI_SERIAL_C_COMPILER
+        RESULT_VARIABLE SERIAL_C_COMPILER_RESULT
+        OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+    if (NOT SERIAL_C_COMPILER_RESULT EQUAL 0)
+      set(SCI_SERIAL_C_COMPILER ${CMAKE_C_COMPILER})
+    endif ()
+  endif ()
+  SciPrintVar(SCI_SERIAL_C_COMPILER)
+
+# Pass up the found variable.  This is all caps.
+  set(SCIMPI_FOUND TRUE)
+
+endif ()
+
+# Either gives MPI
+if (MPI_FOUND OR SCIMPI_FOUND)
+  set(HAVE_MPI 1 CACHE BOOL "Whether MPI was found" FORCE)
+endif ()
+
+if (NOT SCIMPI_FOUND)
+  if (SciMpi_FIND_REQUIRED)
+    message(FATAL_ERROR "MPI required but not found.")
+  else ()
+    message(STATUS "MPI not enabled.")
+  endif ()
+endif ()
+
+# The Intel MPI Wrappers are actually .bat scripts on Windows.
+# That means we have to set include and link lines by hand.
+if (NOT NOCXX)
+  if (${CXX_COMPILER_ID} STREQUAL "Intel" AND ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
+    set(SCI_HAVE_MPICXX_COMPILER_WRAPPER 0)
+  endif()
+endif()
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMumps.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMumps.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMumps.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMumps.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,81 @@
+# - FindSciMumps: Module to find include directories and libraries
+#   for Mumps. This module was implemented as there is no stock
+#   CMake module for Mumps.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciMumps REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_MUMPS         = Whether have the Mumps library
+#  Mumps_INCLUDE_DIRS = Location of Mumps includes
+#  Mumps_LIBRARY_DIRS = Location of Mumps libraries
+#  Mumps_LIBRARIES    = Required libraries
+#  Mumps_STLIBS       = Location of Mumps static library
+
+######################################################################
+#
+# SciFindMumps: find includes and libraries for Mumps.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (WIN32)
+  set(MUMPS_LIB_PREFIX "")
+else (WIN32)
+  set(MUMPS_LIB_PREFIX "lib")
+endif (WIN32)
+
+if (WIN32)
+  set(MUMPS_LIB_SUFFIX "lib")
+else (WIN32)
+  set(MUMPS_LIB_SUFFIX "a")
+endif (WIN32)
+
+if (DEFINED MUMPS_FIND_VERSION)
+  if (ENABLE_PARALLEL)
+    set(Mumps_SEARCH "mumps${MUMPS_FIND_VERSION}")
+  else ()
+    set(Mumps_SEARCH "mumps${MUMPS_FIND_VERSION}")
+  endif ()
+else ()
+  if (ENABLE_PARALLEL)
+    set(Mumps_SEARCH "mumps-par")
+  else ()
+    set(Mumps_SEARCH "mumps")
+  endif ()
+endif ()
+
+#
+#  Define what to search for
+#
+if (NOT DEFINED Mumps_SEARCH_HEADERS)
+  set(Mumps_SEARCH_HEADERS "cmumps_c.h;cmumps_root.h;cmumps_struc.h;dmumps_c.h;dmumps_root.h;dmumps_struc.h;mumps_compat.h;mumps_c_types.h;smumps_c.h;smumps_root.h;smumps_struc.h;zmumps_c.h;zmumps_root.h;zmumps_struc.h;mumps_common.h;mumps_headers.h;mumps_io.h;mumps_io_basic.h;mumps_io_err.h;mumps_io_thread.h;mumps_orderings.h;mumps_size.h;mumps_tags.h;")
+endif ()
+if (NOT DEFINED Mumps_SEARCH_LIBS)
+  set(Mumps_SEARCH_LIBS "${MUMPS_LIB_PREFIX}cmumps.${MUMPS_LIB_SUFFIX};${MUMPS_LIB_PREFIX}dmumps.${MUMPS_LIB_SUFFIX};${MUMPS_LIB_PREFIX}smumps.${MUMPS_LIB_SUFFIX};${MUMPS_LIB_PREFIX}zmumps.${MUMPS_LIB_SUFFIX};${MUMPS_LIB_PREFIX}mumps_common.${MUMPS_LIB_SUFFIX};${MUMPS_LIB_PREFIX}pord.${MUMPS_LIB_SUFFIX}")
+  if (USE_Mumps_Scalapack)
+    set(Mumps_SEARCH_LIBS "${Mumps_SEARCH_LIBS};${MUMPS_LIB_PREFIX}scalapack.${MUMPS_LIB_SUFFIX}")
+  endif ()
+endif ()
+
+SciFindPackage(PACKAGE "Mumps"
+              INSTALL_DIR ${Mumps_SEARCH}
+              HEADERS  ${Mumps_SEARCH_HEADERS}
+              LIBRARIES ${Mumps_SEARCH_LIBS}
+              )
+
+if (MUMPS_FOUND)
+  message(STATUS "Found Mumps")
+  set(HAVE_MUMPS 1 CACHE BOOL "Whether have the Mumps library")
+else ()
+  message(STATUS "Did not find Mumps.  Use -DMumps_ROOT_DIR to specify the installation directory.")
+  if (SciMumps_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMuparser.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMuparser.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMuparser.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMuparser.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,47 @@
+# - FindSciMuparser: Module to find include directories and
+#   libraries for Muparser.
+#
+# Module usage:
+#   find_package(SciMuparser ...)
+#
+# This module will define the following variables:
+#  HAVE_MUPARSER, MUPARSER_FOUND = Whether libraries and includes are found
+#  Muparser_INCLUDE_DIRS       = Location of Muparser includes
+#  Muparser_LIBRARY_DIRS       = Location of Muparser libraries
+#  Muparser_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindMuparser: find includes and libraries for muparser
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(ALLOW_SERIAL_WITH_PARALLEL_SAV ${ALLOW_SERIAL_WITH_PARALLEL})
+set(ALLOW_SERIAL_WITH_PARALLEL TRUE)
+SciGetInstSubdirs(muparser instdirs)
+# message(STATUS "instdirs = ${instdirs}.")
+SciFindPackage(PACKAGE "Muparser"
+  INSTALL_DIRS ${instdirs}
+  HEADERS "muParser.h"
+  LIBRARIES "muparser"
+  INCLUDE_SUBDIRS "include"
+  LIBRARY_SUBDIRS "lib"
+)
+set(ALLOW_SERIAL_WITH_PARALLEL ${ALLOW_SERIAL_WITH_PARALLEL_SAV})
+
+if (MUPARSER_FOUND)
+  message(STATUS "Found Muparser")
+  set(HAVE_MUPARSER 1 CACHE BOOL "Whether have the MUPARSER library")
+else ()
+   message(STATUS "Did not find Muparser.  Use -DMUPARSER_DIR to specify the installation directory.")
+   if (SciMuparser_FIND_REQUIRED)
+       message(FATAL_ERROR "Failing.")
+   endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciMxml.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciMxml.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciMxml.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciMxml.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,41 @@
+# - FindSciMxml: Module to find include directories and
+#   libraries for Mxml.
+#
+# Module usage:
+#   find_package(SciMxml ...)
+#
+# This module will define the following variables:
+#  HAVE_MXML, MXML_FOUND = Whether libraries and includes are found
+#  Mxml_INCLUDE_DIRS       = Location of Mxml includes
+#  Mxml_LIBRARY_DIRS       = Location of Mxml libraries
+#  Mxml_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindMxml: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# mxml is only built in serial
+SciFindPackage(PACKAGE "Mxml"
+              INSTALL_DIR "mxml"
+              HEADERS "mxml.h"
+              INCLUDES "mxml"
+              )
+
+if (MXML_FOUND)
+  message(STATUS "Found Mxml")
+  set(HAVE_MXML 1 CACHE BOOL "Whether have the MXML library")
+else ()
+  message(STATUS "Did not find Mxml.  Use -DMXML_DIR to specify the installation directory.")
+  if (SciMxml_FIND_REQUIRED)
+    message(FATAL_ERROR "Failing")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNe7ssh.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNe7ssh.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNe7ssh.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNe7ssh.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,56 @@
+# - FindSciNe7sshn: Module to find include directories and libraries
+#   for Ne7ssh. This module was implemented as there is no stock
+#   CMake module for Ne7ssh. This is currently being used by QuIDS
+#   project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciNe7ssh REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_NE7SSH         = Whether have the Ne7ssh library
+#  Ne7ssh_INCLUDE_DIRS = Location of Ne7ssh includes
+#  Ne7ssh_LIBRARY_DIRS = Location of Ne7ssh libraries
+#  Ne7ssh_LIBRARIES    = Required libraries
+#  Ne7ssh_STLIBS       = Location of Ne7ssh static library
+
+######################################################################
+#
+# SciFindNe7ssh: find includes and libraries for Ne7ssh.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (BUILD_WITH_PYCSH_RUNTIME OR BUILD_WITH_SHARED_RUNTIME)
+  set(instdirs ne7ssh-pycsh ne7ssh-sersh)
+else ()
+  set(instdirs ne7ssh)
+endif ()
+
+SciFindPackage(
+  PACKAGE "Ne7ssh"
+  INSTALL_DIRS ${instdirs}
+  HEADERS "ne7ssh.h"
+  LIBRARIES "net7ssh"
+)
+
+if (NE7SSH_FOUND)
+  message(STATUS "Found Ne7ssh")
+  set(HAVE_NE7SSH 1 CACHE BOOL "Whether have the NE7SSH library")
+  if (WIN32 AND Ne7ssh_DLLS)
+    set(Ne7ssh_DEFINITIONS ${Ne7ssh_DEFINITIONS} -D_WINDLL)
+  endif ()
+  message(STATUS "Ne7ssh_DEFINITIONS = ${Ne7ssh_DEFINITIONS}.")
+else ()
+  message(STATUS "Did not find Ne7ssh.  Use -DNE7SSH_DIR to specify the installation directory.")
+  if (SciNe7ssh_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNemesis.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNemesis.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNemesis.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNemesis.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,47 @@
+# - FindSciNemesis: Module to find include directories and libraries
+#   for Nemesis. This module was implemented as there is no stock
+#   CMake module for Nemesis.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciNemesis REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_NEMESIS   = Whether have the Nemesis library
+#  Nemesis_INCLUDE_DIRS = Location of Nemesis includes
+#  Nemesis_LIBRARY_DIRS = Location of Nemesis libraries
+#  Nemesis_LIBRARIES    = Required libraries
+#  Nemesis_STLIBS       = Location of Nemesis static library
+
+######################################################################
+#
+# SciFindNemesis: find includes and libraries for Nemesis.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(instdirs nemesis)
+
+set(desiredlibs nemesis)
+set(desiredIncs "ne_nemesisI.h")
+
+SciFindPackage(PACKAGE "Nemesis"
+  INSTALL_DIR ${instdirs}
+  HEADERS     ${desiredIncs}
+  LIBRARIES   ${desiredlibs}
+)
+
+if (NEMESIS_FOUND)
+  message(STATUS "Found Nemesis")
+  set(HAVE_NEMESIS 1 CACHE BOOL "Whether have the NEMESIS library")
+else ()
+  message(STATUS "Did not find Nemesis.  Use -DNEMESIS_DIR to specify the installation directory.")
+  if (SciNemesis_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetcdf.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNetcdf.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetcdf.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNetcdf.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,51 @@
+# - FindSciNetcdf: Module to find include directories and libraries
+#   for Netcdf. This module was implemented as there is no stock
+#   CMake module for Netcdf.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciNetcdf REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_NETCDF         = Whether have the Netcdf library
+#  Netcdf_INCLUDE_DIRS = Location of Netcdf includes
+#  Netcdf_LIBRARY_DIRS = Location of Netcdf libraries
+#  Netcdf_LIBRARIES    = Required libraries
+#  Netcdf_STLIBS       = Location of Netcdf static library
+
+######################################################################
+#
+# SciFindNetcdf: find includes and libraries for Netcdf.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(desiredlibs netcdf)
+#if (CMAKE_Fortran_COMPILER_WORKS)
+#  set(desiredlibs netcdff ${desiredlibs})
+#endif ()
+#if (CMAKE_CXX_COMPILER_WORKS)
+#  set(desiredlibs netcdf_c++ ${desiredlibs})
+#endif ()
+
+SciFindPackage(PACKAGE "Netcdf"
+  INSTALL_DIR ${NETCDF_BUILDS}
+  HEADERS "netcdf.h"
+  LIBRARIES ${desiredlibs}
+  #MODULES "netcdf"
+)
+
+if (NETCDF_FOUND)
+  message(STATUS "Found Netcdf")
+  set(HAVE_NETCDF 1 CACHE BOOL "Whether have the NETCDF library")
+else ()
+  message(STATUS "Did not find Netcdf.  Use -DNETCDF_DIR to specify the installation directory.")
+  if (SciNetcdf_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetcdf_cmake.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNetcdf_cmake.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetcdf_cmake.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNetcdf_cmake.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,46 @@
+# - FindSciNetcdf_cmake: Module to find include directories and libraries
+#   for Netcdf. This module was implemented as there is no stock
+#   CMake module for Netcdf.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciNetcdf_cmake REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_NETCDF_CMAKE   = Whether have the Netcdf library
+#  Netcdf_cmake_INCLUDE_DIRS = Location of Netcdf_cmake includes
+#  Netcdf_cmake_LIBRARY_DIRS = Location of Netcdf_cmake libraries
+#  Netcdf_cmake_LIBRARIES    = Required libraries
+#  Netcdf_cmake_STLIBS       = Location of Netcdf_cmake static library
+
+######################################################################
+#
+# SciFindNetcdf_cmake: find includes and libraries for Netcdf_cmake.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(instdirs netcdf_cmake)
+
+set(desiredlibs netcdf)
+
+SciFindPackage(PACKAGE "Netcdf_cmake"
+  INSTALL_DIR ${instdirs}
+  HEADERS "netcdf.h"
+  LIBRARIES ${desiredlibs}
+)
+
+if (NETCDF_CMAKE_FOUND)
+  message(STATUS "Found Netcdf_cmake")
+  set(HAVE_NETCDF_CMAKE 1 CACHE BOOL "Whether have the NETCDF_CMAKE library")
+else ()
+  message(STATUS "Did not find Netcdf_cmake.  Use -DNETCDF_CMAKE_DIR to specify the installation directory.")
+  if (SciNetcdf_cmake_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetcdff.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNetcdff.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetcdff.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNetcdff.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,55 @@
+# - FindSciNetcdff: Module to find include directories and libraries
+#   for Netcdf-fortran. This module was implemented as there is no stock
+#   CMake module for Netcdf fortran.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciNetcdf REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_NETCDF         = Whether have the Netcdf library
+#  Netcdff_INCLUDE_DIRS = Location of Netcdf includes
+#  Netcdff_LIBRARY_DIRS = Location of Netcdf libraries
+#  Netcdff_LIBRARIES    = Required libraries
+#  Netcdff_STLIBS       = Location of Netcdf static library
+
+######################################################################
+#
+# SciFindNetcdf: find includes and libraries for Netcdf.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (NETCDF_BUILDS)
+  set(instdirs ${NETCDF_BUILDS})
+else ()
+if (ENABLE_PARALLEL)
+  set(instdirs netcdf-par)
+else ()
+  set(instdirs netcdf)
+endif ()
+endif ()
+
+set(desiredlibs netcdff netcdf)
+
+SciFindPackage(PACKAGE "Netcdf"
+  INSTALL_DIR ${instdirs}
+  HEADERS "netcdf.h"
+  LIBRARIES ${desiredlibs}
+  MODULES "netcdf"
+)
+
+if (NETCDF_FOUND)
+  message(STATUS "Found Netcdff")
+  set(HAVE_NETCDF 1 CACHE BOOL "Whether have the NETCDFF library")
+else ()
+  message(STATUS "Did not find Netcdff.  Use -DNETCDF_DIR to specify the installation directory.")
+  if (SciNetcdf_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetlibLite.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNetlibLite.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNetlibLite.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNetlibLite.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,36 @@
+# - FindSciNetlibLite: Module to find include directories and
+#   libraries for NetlibLite
+#
+# Module usage:
+#   find_package(SciNetlibLite ...)
+#
+# This module will define the following variables:
+#  HAVE_NETLIBLITE, NETLIBLITE_FOUND = Whether libraries and includes are found
+#  NetlibLite_INCLUDE_DIRS       = Location of Polyswift includes
+#  NetlibLite_LIBRARY_DIRS       = Location of Polyswift libraries
+#  NetlibLite_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindNetlibLite: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdirs netlib_lite-ben netlib_lite)
+else ()
+  set(instdirs netlib_lite)
+endif ()
+
+SciFindPackage(PACKAGE "NetlibLite"
+  INSTALL_DIRS ${instdirs}
+  MODULES "lsode_mod"
+  LIBRARIES "lsode;nlother;r8slatec"
+)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNsis.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNsis.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNsis.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNsis.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,35 @@
+# - FindSciNsis: Module to find include directories and
+#   libraries for Nsis.
+#
+# Module usage:
+#   find_package(SciNsis ...)
+#
+# May need to be changed to use SciFindPackage()
+
+#################################################
+#
+# Find NSIS packager
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+#################################################
+
+if (WIN32)
+  set(SCIC_NSIS_SEARCHPATH
+    "$ENV{PROGRAMFILES}/NSIS" "$ENV{PROGRAMFILES(X86)}/NSIS"
+  )
+endif ()
+
+find_program(MAKENSIS
+  makensis
+  PATHS ${SCIC_NSIS_SEARCHPATH}
+  DOC "Location of the NSIS executable"
+)
+if (MAKENSIS)
+  set(MAKENSIS_FOUND TRUE)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNtccTransport.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNtccTransport.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNtccTransport.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNtccTransport.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,43 @@
+# - FindSciNtccTransport: Module to find include directories and
+#   libraries for Ntcc Transport
+#
+# Module usage:
+#   find_package(SciNtccTransport ...)
+#
+# This module will define the following variables:
+#  HAVE_NTCCTRANSPORT, NTCCTRANSPORT_FOUND = Whether libraries and includes are found
+#  NtccTransport_INCLUDE_DIRS       = Location of Polyswift includes
+#  NtccTransport_LIBRARY_DIRS       = Location of Polyswift libraries
+#  NtccTransport_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciNtccTransport: find includes and libraries for Ntcc Transport
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir "ntcc_transport-par")
+  set(GLF23_INST_LIB glf23mpi)
+else ()
+  set(instdir "ntcc_transport")
+  set(GLF23_INST_LIB glf23)
+endif ()
+
+SciFindPackage(PACKAGE NtccTransport
+  INSTALL_DIRS ${instdir}
+  MODULES glf23_data_mod nclass_interface
+  LIBRARIES ${GLF23_INST_LIB} mmm95 ifspppl nclass kapisn mmm71
+)
+
+if (NTCCTRANSPORT_FOUND)
+  set(HAVE_NTCCTRANSPORT 1 CACHE BOOL "Whether have the ntcc_transport library")
+  set(HAVE_NtccTransport 1 CACHE BOOL "Whether have ntcc_transport the library")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNubeam.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNubeam.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNubeam.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNubeam.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,50 @@
+# - FindSciNubeam: Module to find include directories and libraries
+#   for Nubeam. This module was implemented as there is no stock
+#   CMake module for Nubeam.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciNubeam REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_NUBEAM         = Whether have the Nubeam library
+#  Nubeam_INCLUDE_DIRS = Location of Nubeam includes
+#  Nubeam_LIBRARY_DIRS = Location of Nubeam libraries
+#  Nubeam_LIBRARIES    = Required libraries
+#  Nubeam_STLIBS       = Location of Nubeam static library
+
+######################################################################
+#
+# FindSciNubeam: find includes and libraries for nubeam
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir nubeam-par)
+else ()
+  set(instdir nubeam)
+endif ()
+
+# Currently we are not working about nubeam-serial because of build
+# problems
+if (ENABLE_PARALLEL)
+SciFindPackage(PACKAGE "Nubeam"
+  INSTALL_DIR "${instdir}"
+  HEADERS "nubeam_svnversion.h;nubeam.h"
+  LIBRARIES "TranspPhage;TranspGraphic2"
+  # LIBRARIES "TranspPhage"
+  LIBRARY_SUBDIRS "lib"
+)
+endif ()
+
+set(NUBEAM_DIR ${Nubeam_DIR})
+
+if (NUBEAM_FOUND)
+  set(HAVE_NUBEAM 1 CACHE BOOL "Whether have the Nubeam library")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciNuitka.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciNuitka.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciNuitka.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciNuitka.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,45 @@
+# - FindSciNuitka: This module looks for Nuitka binary
+# Nuitka is a documentation generation tool.  Please see
+# http://www.sphinx.org
+#
+# This modules defines the following variables:
+#
+#   Nuitka_EXECUTABLE     = The path to the sphinx command.
+#   NUITKA_FOUND          = Was Nuitka found or not?
+#
+
+#################################################################
+# Find Nuitka...
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2016-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#################################################################
+
+if (WIN32)
+  set(sfxs Scripts)
+else ()
+  set(sfxs bin)
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "Looking for nuitka with SUPRA_SEARCH_PATH = ${SUPRA_SEARCH_PATH} and sfxs = ${sfxs}.")
+endif ()
+find_program(Nuitka_EXECUTABLE
+  nuitka
+  PATHS ${SUPRA_SEARCH_PATH}
+  PATH_SUFFIXES ${sfxs}
+)
+if (Nuitka_EXECUTABLE)
+  set(NUITKA_FOUND 1 CACHE BOOL "Found Nuitka binary")
+  message(STATUS "Nuitka_EXECUTABLE found.")
+  message(STATUS "Nuitka_EXECUTABLE  = ${Nuitka_EXECUTABLE}")
+else ()
+  message(STATUS "Nuitka_EXECUTABLE NOT found.")
+endif ()
+
+# Enable setting an option
+# The -d flag sets the cache directory to be non-hidden
+set(Nuitka_OPTS      "" CACHE STRING "Options to be passed to the nuitka executable")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciOce.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciOce.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciOce.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciOce.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,212 @@
+# - FindOce: Module to find include directories and
+#   libraries for Opencascade Community Edition
+#
+# Module usage:
+#   find_package(Oce ...)
+#
+# This module will define the following variables:
+#  HAVE_OCE, OCE_FOUND = Whether libraries and includes are found
+#  Oce_INCLUDE_DIRS    = Location of Oce includes
+#  Oce_LIBRARY_DIRS    = Location of Oce libraries
+#  Oce_LIBRARIES       = Required libraries
+
+######################################################################
+#
+# FindOce: find includes and libraries for OCE
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Uses of these libs found from CMakeLists.txt in OCE, and
+# in doxygen documentation, which shows
+#    Module FoundationClasses
+#    Module ModelingData
+#    Module ModelingAlgorithms
+#    Module Visualization
+#    Module ApplicationFramework
+#    Module DataExchange
+#    Module Draw
+#
+# Analyze dependencies using otool -L on OS X for more discreteness.
+# Below is a layered list, top to bottom, left to right.
+# ToDo: define the SEARCHHDRS
+#
+# Data exchange
+# TKVRML
+
+message (STATUS "")
+message (STATUS "--------- FindSciOce seeking Oce -----------")
+
+set(OceXdeIges_SEARCHLIBS TKXDEIGES)
+set(OceXdeStep_SEARCHLIBS TKXDESTEP)
+# The libs below were required by TKXDEIGES
+set(OceXde_SEARCHLIBS TKCDF TKV3d TKService TKHLR TKOffset TKPLCAF PTKernel TKPShape TKShapeSchema TKPCAF TKStdLSchema TKStdSchema TKXmlXCAF TKXmlXCAF TKXmlL TKXml TKBinL TKBinXCAF TKBin)
+set(OceXde_SEARCHLIBS ${OceXde_SEARCHLIBS} TKXCAF TKXCAFSchema TKXmlXCAF TKBinXCAF TKCAF TKTObj TKLCAF)
+# Mesh contains triangulation
+set(OceMesh_SEARCHLIBS TKXMesh TKMesh)
+set(OceMesh_SEARCHHDRS XBRepMesh.hxx) # contains triangulation
+set(OceIges_SEARCHLIBS TKIGES)
+set(OceIges_SEARCHHDRS IGESFile_Read.hxx)
+# IGES dependends on AdvAlgo
+set(OceAdvAlgo_SEARCHLIBS TKFillet TKBool TKPrim TKBO)
+set(OceStep_SEARCHLIBS TKSTEP TKSTEP209 TKSTEPAttr TKSTEPBase)
+set(OceStep_SEARCHHDRS STEPControl_Reader.hxx)
+# STEP and IGES depend on this, but not STL
+set(OceIoBase_SEARCHLIBS TKXSBase)
+set(OceStl_SEARCHLIBS TKSTL)
+set(OceAlgo_SEARCHLIBS TKFeat TKShHealing TKTopAlgo TKGeomAlgo)
+set(OceModelData_SEARCHLIBS TKBRep TKG3d TKG2d TKGeomBase)
+# AdvTools gone as of OCE-0.17
+# set(OceTools_SEARCHLIBS TKMath TKAdvTools)
+set(OceTools_SEARCHLIBS TKMath)
+set(OceKernel_SEARCHLIBS TKernel)
+
+# All the components
+set(SciOce_ALL_COMPONENTS XdeIges XdeStep Xde Mesh Iges AdvAlgo Step IoBase Stl Algo ModelData Tools Kernel)
+
+foreach (comp ${SciOce_FIND_COMPONENTS})
+  set(Oce${comp}_FIND TRUE)
+endforeach ()
+
+message(STATUS "Looking for components, ${SciOce_FIND_COMPONENTS}.")
+
+# Enforce dependencies
+if (OceXdeIges_FIND)
+  set(OceIges_FIND TRUE)
+  set(OceXde_FIND TRUE)
+endif ()
+if (OceXdeStep_FIND)
+  set(OceStep_FIND TRUE)
+  set(OceXde_FIND TRUE)
+endif ()
+if (OceMesh_FIND)
+  set(OceBrep_FIND TRUE)
+endif ()
+if (OceIges_FIND)
+  set(OceAdvAlgo_FIND TRUE)
+  set(OceIoBase_FIND TRUE)
+endif ()
+if (OceStep_FIND)
+  set(OceIoBase_FIND TRUE)
+endif ()
+if (OceIoBase_FIND OR OceStl_FIND)
+  set(OceAlgo_FIND TRUE)
+endif ()
+if (OceAlgo_FIND)
+  set(OceModelData_FIND TRUE)
+endif ()
+if (OceModelData_FIND)
+  set(OceTools_FIND TRUE)
+endif ()
+if (OceTools_FIND)
+  set(OceKernel_FIND TRUE)
+endif ()
+
+# Set the libraries
+set(Oce_SEARCHLIBS)
+set(Oce_comps)
+foreach (pkg XdeIges XdeStep Xde Mesh Iges AdvAlgo Step IoBase Stl Algo ModelData Tools Kernel)
+  if (DEBUG_CMAKE)
+    message(STATUS "Oce${pkg}_FIND = ${Oce${pkg}_FIND}.")
+  endif ()
+  if (Oce${pkg}_FIND)
+    set(Oce_comps ${Oce_comps} ${pkg})
+    set(Oce_SEARCHLIBS ${Oce_SEARCHLIBS} ${Oce${pkg}_SEARCHLIBS})
+  endif ()
+endforeach ()
+message(STATUS "After dependencies, looking for components, ${Oce_comps}.")
+message(STATUS "Oce_SEARCHLIBS = ${Oce_SEARCHLIBS}.")
+
+# Worry about data exchange later
+
+# To Do: Set variables for each group individually
+
+# Set library subdirs
+if (WIN32)
+  # if (WIN64)
+  if (${CMAKE_SIZEOF_VOID_P} MATCHES 8)
+    set(libsubdir Win64/)
+  else ()
+    set(libsubdir Win32/)
+  endif ()
+else ()
+  set(libsubdir)
+endif ()
+
+# Only sersh build exists
+
+# All the components
+set(SEARCH_RESULTS PROGRAMS FILES INCLUDE_DIRS MODULE_DIRS LIBFLAGS LIBRARY_DIRS LIBRARY_NAMES LIBRARIES STLIBS)
+if (WIN32)
+  set(SEARCH_RESULTS ${SEARCH_RESULTS} DLLS)
+endif ()
+foreach (res ${SEARCH_RESULTS})
+  set(Oce_${res})
+endforeach ()
+set(OCE_FOUND TRUE)
+# Set the installation search directory for oce with no component suffix
+if (USE_OCE_SHARED)
+  if (USE_PYC_LIBS)
+    set(instdirs oce-pycsh oce-sersh)
+  else ()
+    set(instdirs oce-sersh oce-pycsh)
+  endif ()
+else ()
+  SciGetInstSubdirs(oce instdirs)
+endif ()
+
+foreach (comp ${SciOce_ALL_COMPONENTS})
+  if (Oce${comp}_FIND)
+    set(Oce${comp}_ROOT_DIR ${Oce_ROOT_DIR})
+    SciFindPackage(PACKAGE Oce${comp}
+      INSTALL_DIRS "${instdirs}"
+      HEADERS "${Oce${comp}_SEARCHHDRS}"
+      LIBRARIES "${Oce${comp}_SEARCHLIBS}"
+      LIBRARY_SUBDIRS "${libsubdir}lib"
+      PROGRAM_SUBDIRS "${libsubdir}bin"
+      FIND_QUIETLY
+    )
+    foreach (res ${SEARCH_RESULTS})
+      set(Oce_${res} ${Oce_${res}} ${Oce${comp}_${res}})
+      set(Oce${comp}_${res}
+        ${Oce${comp}_${res}}
+        CACHE STRING "List of all ${res} for ${Oce_${res}}"
+      )
+      endforeach ()
+    string(TOUPPER Oce${comp} pkguc)
+    if (NOT ${pkguc}_FOUND)
+      message(WARNING "${pkguc}_FOUND = ${${pkguc}_FOUND}.")
+      set(OCE_FOUND FALSE)
+    endif ()
+  endif ()
+endforeach ()
+foreach (res ${SEARCH_RESULTS})
+  if (Oce_${res})
+    list(REMOVE_DUPLICATES Oce_${res})
+  endif ()
+endforeach ()
+
+find_library(Oce_PLUGINS
+  NAMES FWOSPlugin
+  PATHS ${Oce_LIBRARY_DIRS}
+  NO_DEFAULT_PATH)
+
+if (OCE_FOUND)
+  # message(STATUS "Found Oce.")
+  set(HAVE_OCE 1 CACHE BOOL "Whether have Oce library")
+  SciPrintCMakeResults(Oce)
+else ()
+  message(STATUS "Did not find Oce.  Use -DOCE_ROOT_DIR to specify the installation directory.")
+  if (Oce_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
+message (STATUS "--------- FindSciOce done with Oce -----------")
+message (STATUS "")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenCascade.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciOpenCascade.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenCascade.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciOpenCascade.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,220 @@
+# - FindOpenCascade: Module to find include directories and
+#   libraries for Opencascade Community Edition
+#
+# Module usage:
+#   find_package(OpenCascade ...)
+#
+# This module will define the following variables:
+#  HAVE_OPENCASCADE, OPENCASCADE_FOUND = Whether libraries and includes are found
+#  OpenCascade_INCLUDE_DIRS    = Location of OpenCascade includes
+#  OpenCascade_LIBRARY_DIRS    = Location of OpenCascade libraries
+#  OpenCascade_LIBRARIES       = Required libraries
+
+######################################################################
+#
+# FindOpenCascade: find includes and libraries for OPENCASCADE
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Uses of these libs found from CMakeLists.txt in OPENCASCADE, and
+# in doxygen documentation, which shows
+#    Module FoundationClasses
+#    Module ModelingData
+#    Module ModelingAlgorithms
+#    Module Visualization
+#    Module ApplicationFramework
+#    Module DataExchange
+#    Module Draw
+#
+# Analyze dependencies using otool -L on OS X for more discreteness.
+# Below is a layered list, top to bottom, left to right.
+# ToDo: define the SEARCHHDRS
+#
+# Data exchange
+# TKVRML
+
+message (STATUS "")
+message (STATUS "--------- FindSciOpenCascade seeking OpenCascade -----------")
+
+set(OpenCascadeXdeIges_SEARCHLIBS TKXDEIGES)
+set(OpenCascadeXdeStep_SEARCHLIBS TKXDESTEP)
+# The libs below were required by TKXDEIGES
+set(OpenCascadeXde_SEARCHLIBS TKCDF TKV3d TKService TKHLR TKOffset TKXmlXCAF TKXmlXCAF TKXmlL TKXml TKBinL TKBinXCAF TKBin)
+set(OpenCascadeXde_SEARCHLIBS ${OpenCascadeXde_SEARCHLIBS} TKXCAF TKXmlXCAF TKBinXCAF TKCAF TKTObj TKLCAF TKVCAF)
+# These disappeared in 7.1?
+# set(OpenCascadeXde_SEARCHLIBS TKPLCAF PTKernel TKPShape TKShapeSchema TKPCAF TKStdLSchema)
+# set(OpenCascadeXde_SEARCHLIBS ${OpenCascadeXde_SEARCHLIBS} TKXCAFSchema)
+# Mesh contains triangulation
+set(OpenCascadeMesh_SEARCHLIBS TKXMesh TKMesh)
+set(OpenCascadeMesh_SEARCHHDRS XBRepMesh.hxx) # contains triangulation
+set(OpenCascadeIges_SEARCHLIBS TKIGES)
+set(OpenCascadeIges_SEARCHHDRS IGESFile_Read.hxx)
+# IGES dependends on AdvAlgo
+set(OpenCascadeAdvAlgo_SEARCHLIBS TKFillet TKBool TKPrim TKBO)
+set(OpenCascadeStep_SEARCHLIBS TKSTEP TKSTEP209 TKSTEPAttr TKSTEPBase)
+set(OpenCascadeStep_SEARCHHDRS STEPControl_Reader.hxx)
+# STEP and IGES depend on this, but not STL
+set(OpenCascadeIoBase_SEARCHLIBS TKXSBase)
+set(OpenCascadeStl_SEARCHLIBS TKSTL)
+set(OpenCascadeAlgo_SEARCHLIBS TKFeat TKShHealing TKTopAlgo TKGeomAlgo)
+set(OpenCascadeModelData_SEARCHLIBS TKBRep TKG3d TKG2d TKGeomBase)
+# AdvTools gone as of OPENCASCADE-0.17
+# set(OpenCascadeTools_SEARCHLIBS TKMath TKAdvTools)
+set(OpenCascadeTools_SEARCHLIBS TKMath)
+set(OpenCascadeKernel_SEARCHLIBS TKernel)
+
+# All the components
+set(SciOpenCascade_ALL_COMPONENTS XdeIges XdeStep Xde Mesh Iges AdvAlgo Step IoBase Stl Algo ModelData Tools Kernel)
+
+foreach (comp ${SciOpenCascade_FIND_COMPONENTS})
+  set(OpenCascade${comp}_FIND TRUE)
+endforeach ()
+
+message(STATUS "Looking for components, ${SciOpenCascade_FIND_COMPONENTS}.")
+
+# Enforce dependencies
+if (OpenCascadeXdeIges_FIND)
+  set(OpenCascadeIges_FIND TRUE)
+  set(OpenCascadeXde_FIND TRUE)
+endif ()
+if (OpenCascadeXdeStep_FIND)
+  set(OpenCascadeStep_FIND TRUE)
+  set(OpenCascadeXde_FIND TRUE)
+endif ()
+if (OpenCascadeMesh_FIND)
+  set(OpenCascadeBrep_FIND TRUE)
+endif ()
+if (OpenCascadeIges_FIND)
+  set(OpenCascadeAdvAlgo_FIND TRUE)
+  set(OpenCascadeIoBase_FIND TRUE)
+endif ()
+if (OpenCascadeStep_FIND)
+  set(OpenCascadeIoBase_FIND TRUE)
+endif ()
+if (OpenCascadeIoBase_FIND OR OpenCascadeStl_FIND)
+  set(OpenCascadeAlgo_FIND TRUE)
+endif ()
+if (OpenCascadeAlgo_FIND)
+  set(OpenCascadeModelData_FIND TRUE)
+endif ()
+if (OpenCascadeModelData_FIND)
+  set(OpenCascadeTools_FIND TRUE)
+endif ()
+if (OpenCascadeTools_FIND)
+  set(OpenCascadeKernel_FIND TRUE)
+endif ()
+
+# Set the libraries
+set(OpenCascade_SEARCHLIBS)
+set(OpenCascade_comps)
+foreach (pkg XdeIges XdeStep Xde Mesh Iges AdvAlgo Step IoBase Stl Algo ModelData Tools Kernel)
+  if (DEBUG_CMAKE)
+    message(STATUS "OpenCascade${pkg}_FIND = ${OpenCascade${pkg}_FIND}.")
+  endif ()
+  if (OpenCascade${pkg}_FIND)
+    set(OpenCascade_comps ${OpenCascade_comps} ${pkg})
+    set(OpenCascade_SEARCHLIBS ${OpenCascade_SEARCHLIBS} ${OpenCascade${pkg}_SEARCHLIBS})
+  endif ()
+endforeach ()
+message(STATUS "After dependencies, looking for components, ${OpenCascade_comps}.")
+message(STATUS "OpenCascade_SEARCHLIBS = ${OpenCascade_SEARCHLIBS}.")
+
+# Worry about data exchange later
+
+# To Do: Set variables for each group individually
+
+# Set library subdirs
+if (WIN32)
+  set(incsubdir inc)
+  if (${CMAKE_SIZEOF_VOID_P} MATCHES 8)
+    set(libsubdir win64)
+  else ()
+    set(libsubdir win32)
+  endif ()
+  if (CXX_VERSION MATCHES "^18\\.")
+   set(libsubdir ${libsubdir}/vc12)
+  endif ()
+else ()
+  set(incsubdir include/opencascade)
+  set(libsubdir)
+endif ()
+
+# Only sersh build exists
+
+# All the components
+set(SEARCH_RESULTS PROGRAMS FILES INCLUDE_DIRS MODULE_DIRS LIBFLAGS LIBRARY_DIRS LIBRARY_NAMES LIBRARIES STLIBS)
+if (WIN32)
+  set(SEARCH_RESULTS ${SEARCH_RESULTS} DLLS)
+endif ()
+foreach (res ${SEARCH_RESULTS})
+  set(OpenCascade_${res})
+endforeach ()
+set(OPENCASCADE_FOUND TRUE)
+# Set the installation search directory for opencascade with no component suffix
+if (USE_OPENCASCADE_SHARED)
+  if (USE_PYC_LIBS)
+    set(instdirs opencascade-pycsh opencascade-sersh)
+  else ()
+    set(instdirs opencascade-sersh opencascade-pycsh)
+  endif ()
+else ()
+  SciGetInstSubdirs(opencascade instdirs)
+endif ()
+
+foreach (comp ${SciOpenCascade_ALL_COMPONENTS})
+  if (OpenCascade${comp}_FIND)
+    set(OpenCascade${comp}_ROOT_DIR ${OpenCascade_ROOT_DIR})
+    SciFindPackage(PACKAGE OpenCascade${comp}
+      INSTALL_DIRS "${instdirs}"
+      HEADERS "${OpenCascade${comp}_SEARCHHDRS}"
+      INCLUDE_SUBDIRS ${incsubdir}
+      LIBRARIES "${OpenCascade${comp}_SEARCHLIBS}"
+      LIBRARY_SUBDIRS "${libsubdir}/lib"
+      PROGRAM_SUBDIRS "${libsubdir}/bin"
+      FIND_QUIETLY
+    )
+    foreach (res ${SEARCH_RESULTS})
+      set(OpenCascade_${res} ${OpenCascade_${res}} ${OpenCascade${comp}_${res}})
+      set(OpenCascade${comp}_${res}
+        ${OpenCascade${comp}_${res}}
+        CACHE STRING "List of all ${res} for ${OpenCascade_${res}}"
+      )
+      endforeach ()
+    string(TOUPPER OpenCascade${comp} pkguc)
+    if (NOT ${pkguc}_FOUND)
+      message(WARNING "${pkguc}_FOUND = ${${pkguc}_FOUND}.")
+      set(OPENCASCADE_FOUND FALSE)
+    endif ()
+  endif ()
+endforeach ()
+foreach (res ${SEARCH_RESULTS})
+  if (OpenCascade_${res})
+    list(REMOVE_DUPLICATES OpenCascade_${res})
+  endif ()
+endforeach ()
+
+find_library(OpenCascade_PLUGINS
+  NAMES FWOSPlugin
+  PATHS ${OpenCascade_LIBRARY_DIRS}
+  NO_DEFAULT_PATH)
+
+if (OPENCASCADE_FOUND)
+  # message(STATUS "Found OpenCascade.")
+  set(HAVE_OPENCASCADE 1 CACHE BOOL "Whether have OpenCascade library")
+  SciPrintCMakeResults(OpenCascade)
+else ()
+  message(STATUS "Did not find OpenCascade.  Use -DOPENCASCADE_ROOT_DIR to specify the installation directory.")
+  if (OpenCascade_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
+message (STATUS "--------- FindSciOpenCascade done with OpenCascade -----------")
+message (STATUS "")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenCL.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciOpenCL.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenCL.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciOpenCL.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,57 @@
+######################################################################
+#
+# @file    FindSciOpenCL.cmake
+#
+# @brief   Find include directories and libraries for OpenCL.
+#          Module usage:
+#          find_package(OpenCL ...)
+#
+#          This module will define the following variables:
+#            HAVE_OPENCL, OPENCL_FOUND = Whether found libraries and includes
+#            OpenCL_INCLUDE_DIRS       = Location of OpenCL includes
+#            OpenCL_LIBRARY_DIRS       = Location of OpenCL libraries
+#            OpenCL_LIBRARIES          = Required libraries
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+find_package(CUDA)
+if (CUDA_FOUND)
+  if (OpenCL_ROOT_DIR)
+  else ()
+    set(OpenCL_ROOT_DIR "${CUDA_TOOLKIT_ROOT_DIR}")
+  endif ()
+endif ()
+
+if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
+  set(OpenCL_HEADERS "OpenCL/opencl.h")
+else ()
+  set(OpenCL_HEADERS "CL/cl.h")
+endif ()
+
+SciFindPackage(PACKAGE "OpenCL"
+    INSTALL_DIRS "${OpenCL_ROOT_DIR}"
+    HEADERS "${OpenCL_HEADERS}"
+    LIBRARIES "OpenCL"
+    INCLUDE_SUBDIRS "include"
+    LIBRARY_SUBDIRS "lib64;lib;lib/x64"
+    )
+
+if (OpenCL_INCLUDE_DIRS AND OpenCL_LIBRARIES)
+  set(OpenCL_FOUND TRUE)
+endif ()
+
+if (OpenCL_FOUND)
+  message(STATUS "Found OpenCL")
+  set(HAVE_OpenCL 1 CACHE BOOL "Whether have OpenCL")
+else ()
+  message(STATUS "Did not find OpenCL.  Use -DOpenCL_ROOT_DIR to specify the installation directory.")
+  if (SciOpenCL_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenSplice.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciOpenSplice.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenSplice.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciOpenSplice.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,76 @@
+# - FindSciOpenSplice: Module to find include directories and libraries
+#   for OpenSplice. This module was implemented as there is no stock
+#   CMake module for OpenSplice. This is currently being used by QuIDS
+#   project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciOpenSplice REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_OPENSPLICE             = Whether have the Cfitsio library
+#  OpenSplice_PROGRAMS      = Location of OpenSplice's idlpp executable
+#  OpenSplice_INCLUDE_DIRS     = Location of OpenSplice include dir
+#  OpenSplice_LIBRARY_DIRS     = Location of OpenSplice libraries
+#  OpenSplice_LIBRARIES        = List of all the necessary libraries
+#  OpenSplice_CPP_INCLUDE_DIRS = List of OpenSplice's C++ include directories
+#                                           to be used by C++ applications
+#  OpenSplice_C_INCLUDE_DIRS   = List of OpenSplice's C include directories
+#                                           to be used by C applications
+#  OpenSplice_idlpp            = Location to OpenSplice's idlpp executable
+
+######################################################################
+#
+# FindOpenSplice: find includes and libraries for OpenSplice. Complex
+# due to the many libraries that OpenSplice has
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "OpenSplice"
+              INSTALL_DIR "opensplice"
+              PROGRAMS "idlpp"
+              HEADERS "dcps"
+              LIBRARIES "ddsdatabase;dcpsgapi;dcpssacpp;dcpssac;ddsos;ddsutil;ddsserialization;ddskernel;ddsuser;ddsosnet;ddsconf;ddsconfparser"
+              )
+
+if (OPENSPLICE_FOUND)
+  message(STATUS "Found OpenSplice")
+  # Get the root OSPL installation location
+  get_filename_component(OpenSplice_DIR ${OpenSplice_INCLUDE_DIRS} PATH)
+
+  set(OpenSplice_CPP_INCLUDE_DIRS
+          ${OpenSplice_INCLUDE_DIRS}/dcps/C++/SACPP
+          ${OpenSplice_INCLUDE_DIRS}
+          ${OpenSplice_INCLUDE_DIRS}/sys
+  )
+  SciPrintString("  OpenSplice_CPP_INCLUDE_DIRS     = ${OpenSplice_CPP_INCLUDE_DIRS}")
+
+  set(OpenSplice_C_INCLUDE_DIRS
+          ${OpenSplice_INCLUDE_DIRS}/dcps/C/SAC
+          ${OpenSplice_INCLUDE_DIRS}
+          ${OpenSplice_INCLUDE_DIRS}/sys
+  )
+  SciPrintString("  OpenSplice_C_INCLUDE_DIRS       = ${OpenSplice_C_INCLUDE_DIRS}")
+
+  if (WIN32)
+    set(OpenSplice_release_com ${OpenSplice_DIR}/release.bat)
+    set(OpenSplice_EXEC ${OpenSplice_release_com})
+  else ()
+    set(OpenSplice_release_com ${OpenSplice_DIR}/release.com)
+    set(OpenSplice_EXEC "/bin/sh" ${OpenSplice_release_com})
+  endif ()
+
+  set(HAVE_OPENSPLICE 1 CACHE BOOL "Whether have the OPENSPLICE library")
+else ()
+  message(STATUS "Did not find OpenSplice.  Use -DOPENSPLICE_DIR to specify the installation directory.")
+  if (SciOpenSplice_FIND_REQUIRED)
+    message(FATAL_ERROR "Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenSsl.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciOpenSsl.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciOpenSsl.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciOpenSsl.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,91 @@
+# - FindSciOpenSsl: Module to find include directories and
+#   libraries for OpenSsl.
+#
+# Module usage:
+#   find_package(SciOpenSsl ...)
+#
+# This module will define the following variables:
+#  HAVE_OPENSSL, OPENSSL_FOUND   = Whether libraries and includes are found
+#  OpenSsl_INCLUDE_DIRS       = Location of OpenSsl includes
+#  OpenSsl_LIBRARY_DIRS       = Location of OpenSsl libraries
+#  OpenSsl_LIBRARIES          = Required libraries
+#  OpenSsl_DLLS               =
+
+######################################################################
+#
+# FindOpenSsl: find includes and libraries for openssl
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# OpenSSL builds its static libs inside sersh
+if (WIN32)
+  if (NOT OpenSsl_ROOT_DIR)
+    set(OpenSsl_ROOT_DIRS C:/OpenSSL C:/OpenSSL-Win64 C:/OpenSSL-Win32)
+    foreach (rd ${OpenSsl_ROOT_DIRS})
+      if (EXISTS ${rd})
+        set(OpenSsl_ROOT_DIR ${rd})
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+  if (NOT OpenSsl_ROOT_DIR)
+    message(WARNING "OpenSsl_ROOT_DIR not found.")
+  endif ()
+  set(instdirs .)
+  set(ssl_libs ssleay32 libeay32)
+else ()
+  # SciGetInstSubdirs(openssl instdirs)
+  set(instdirs openssl openssl-sersh)
+  set(ssl_libs ssl crypto)
+  if (LINUX)
+# gssapi_krb5 required for libssh-0.6.4
+    set(ssl_libs ${ssl_libs} gssapi_krb5)
+  endif ()
+endif ()
+
+SciFindPackage(PACKAGE "OpenSsl"
+  INSTALL_DIRS ${instdirs}
+  PROGRAMS openssl
+  HEADERS openssl/ssl.h
+  LIBRARIES ${ssl_libs}
+)
+
+# Correct static libraries on Windows
+if (WIN32)
+  set(srchlibs ${OpenSsl_LIBRARIES})
+  set(OpenSsl_STLIBS)
+  set(OpenSsl_MDLIBS)
+  foreach (lib ${srchlibs})
+    get_filename_component(openssl_libdir ${lib}/.. REALPATH)
+    get_filename_component(openssl_libname ${lib} NAME_WE)
+    find_library(mdlib ${openssl_libname}MD PATHS ${openssl_libdir}/VC/static
+      NO_DEFAULT_PATH
+    )
+    set(OpenSsl_MDLIBS ${OpenSsl_MDLIBS} ${mdlib})
+    find_library(stlib ${openssl_libname}MT PATHS ${openssl_libdir}/VC/static
+      NO_DEFAULT_PATH
+    )
+    set(OpenSsl_STLIBS ${OpenSsl_STLIBS} ${stlib})
+  endforeach ()
+  message(STATUS "After windows search for static libs:")
+  SciPrintVar(OpenSsl_STLIBS)
+  SciPrintVar(OpenSsl_MDLIBS)
+endif ()
+
+# Finish up
+if (OPENSSL_FOUND)
+  # message(STATUS "Found OpenSsl")
+  set(HAVE_OPENSSL 1 CACHE BOOL "Whether have the OPENSSL library")
+else ()
+  message(STATUS "Did not find OpenSsl.  Use -DOpenSsl_ROOT_DIR to specify the installation directory.")
+  if (SciOpenSsl_FIND_REQUIRED)
+    message(FATAL_ERROR "Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciParMetis.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciParMetis.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciParMetis.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciParMetis.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,51 @@
+# - FindSciParMetis: Module to find include directories and libraries
+#   for ParMetis. This module was implemented as there is no stock
+#   CMake module for ParMetis.
+#   It also looks for the corresponding libmetis.a
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciParMetis REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_PARMETIS         = Whether have the ParMetis library
+#  ParMetis_INCLUDE_DIRS = Location of ParMetis includes
+#  ParMetis_LIBRARY_DIRS = Location of ParMetis libraries
+#  ParMetis_LIBRARIES    = Required libraries
+#  ParMetis_STLIBS       = Location of ParMetis static library
+
+######################################################################
+#
+# SciFindParMetis: find includes and libraries for ParMetis.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+# ParMetis version > 4 requires gklib (distributed with package)
+if (FIND_ParMetis_GKLIB)
+  set(ParMetis_SEARCH_LIBS "parmetis;metis;GKlib")
+else ()
+  set(ParMetis_SEARCH_LIBS "parmetis;metis")
+endif ()
+
+SciFindPackage(PACKAGE "ParMetis"
+              INSTALL_DIR "parmetis-par"
+              HEADERS "parmetis.h"
+              LIBRARIES "${ParMetis_SEARCH_LIBS}"
+              )
+
+if (PARMETIS_FOUND)
+  message(STATUS "Found ParMetis")
+  set(HAVE_PARMETIS 1 CACHE BOOL "Whether have the PARMETIS library")
+else ()
+  message(STATUS "Did not find ParMetis.  Use -DPARMETIS_DIR to specify the installation directory.")
+  if (SciParMetis_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPatchelf.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPatchelf.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPatchelf.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPatchelf.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,37 @@
+# - FindSciPatchelf: Module to find patchelf
+#
+# Module usage:
+#   find_package(SciPatchelf ...)
+#
+# This module will define the following variables:
+#  PATCHELF_FOUND         = Whether Patchelf was found
+#  Patchelf_patchelf    = Path to patchelf executable
+
+######################################################################
+#
+# SciPatchelf: Find Patchelf
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+message("")
+message("--------- FindSciPatchelf looking for patchelf ---------")
+
+SciFindPackage(PACKAGE Patchelf
+  PROGRAMS patchelf
+  # PROGRAM_SUBDIRS bin
+)
+set(PATCHELF_FOUND ${Patchelf_PROGRAMS_FOUND})
+
+if (PATCHELF_FOUND)
+  message(STATUS "Patchelf_patchelf found.")
+  message(STATUS "Patchelf_patchelf = ${Patchelf_patchelf}")
+else ()
+  message(STATUS "Patchelf_patchelf not found. Cannot repair rpath.")
+  set(ENABLE_DEVELDOCS FALSE)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPatoh.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPatoh.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPatoh.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPatoh.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,44 @@
+# - FindSciPatoh: Module to find include directories and
+#   libraries for Patoh.
+#
+# Module usage:
+#   find_package(SciPatoh ...)
+#
+# This module will define the following variables:
+#  HAVE_PATOH, PATOH_FOUND = Whether libraries and includes are found
+#  Patoh_INCLUDE_DIRS       = Location of Patoh includes
+#  Patoh_LIBRARY_DIRS       = Location of Patoh libraries
+#  Patoh_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindMuparser: find includes and libraries for muparser
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(PACKAGE "Patoh"
+              INSTALL_DIR "patoh"
+              PROGRAMS ""
+              HEADERS "patoh.h"
+              LIBRARIES "patoh"
+              )
+
+if (PATOH_FOUND)
+  # message(STATUS "Found Patoh")
+  set(HAVE_PATOH 1 CACHE BOOL "Whether have the Patoh library")
+
+else ()
+   message(STATUS "Did not find Patoh.  Use -DPATOH_DIR to specify the installation directory.")
+
+   if (SciPatoh_FIND_REQUIRED)
+       message(FATAL_ERROR "Failing.")
+   endif ()
+
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPcre.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPcre.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPcre.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPcre.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+######################################################################
+#
+# FindPCRE: find includes and libraries for PCRE
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# - FindSciPCRE: Module to find include directories and
+#   libraries for PCRE
+#
+# Module usage:
+#   find_package(SciPcre ...)
+#
+# This module will define the following variables:
+#  HAVE_PCRE, PCRE_FOUND  = Whether libraries and includes are found
+#  Pcre_INCLUDE_DIRS       = Location of Gsl includes
+#  Pcre_LIBRARY_DIRS       = Location of Gsl libraries
+#  Pcre_LIBRARIES          = Required libraries
+
+SciFindPackage(PACKAGE "Pcre"
+              INSTALL_DIR "pcre"
+              HEADERS "pcre.h"
+              LIBRARIES "pcre"
+              INCLUDE_SUBDIRS "include"
+              LIBRARY_SUBDIRS "lib"
+             )
+
+if (PCRE_FOUND)
+  message(STATUS "Found Pcre")
+  set(HAVE_PCRE 1 CACHE BOOL "Whether have Pcre")
+else ()
+  message(STATUS "Did not find Pcre.  Use -DPCRE_DIR to specify the installation directory.")
+  if (SciPcre_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPetsc.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPetsc.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPetsc.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPetsc.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,275 @@
+# - FindSciPetsc: Module to find include directories and
+#   libraries for Petsc.
+#
+# Module usage:
+#   find_package(SciPetsc ...)
+#
+# This module will define the following variables:
+#  HAVE_PETSC, PETSC_FOUND = Whether libraries and includes are found
+#  Petsc_INCLUDE_DIRS       = Location of Petsc includes
+#  Petsc_LIBRARY_DIRS       = Location of Petsc libraries
+#  Petsc_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindPetsc: find includes and libraries for petsc.  Complex
+# due to the many libraries that petsc builds
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (WIN32)
+  set(PETSC_LIB_PREFIX "lib")
+endif (WIN32)
+
+set(Petsc_LIBRARY_LIST
+  "${PETSC_LIB_PREFIX}petscts"
+  "${PETSC_LIB_PREFIX}petscsnes"
+  "${PETSC_LIB_PREFIX}petscksp"
+  "${PETSC_LIB_PREFIX}petscdm"
+  "${PETSC_LIB_PREFIX}petscmat"
+  "${PETSC_LIB_PREFIX}petscvec"
+  "${PETSC_LIB_PREFIX}petsc"
+  "${PETSC_LIB_PREFIX}cmumps"
+  "${PETSC_LIB_PREFIX}dmumps"
+  "${PETSC_LIB_PREFIX}smumps"
+  "${PETSC_LIB_PREFIX}zmumps"
+  "${PETSC_LIB_PREFIX}mumps_common"
+  "${PETSC_LIB_PREFIX}pord"
+  "${PETSC_LIB_PREFIX}scalapack"
+  "${PETSC_LIB_PREFIX}blacs"
+  "${PETSC_LIB_PREFIX}superlu_dist_2.3"
+  "${PETSC_LIB_PREFIX}superlu_dist_2.4"
+  "${PETSC_LIB_PREFIX}superlu_dist_3.1"
+  "${PETSC_LIB_PREFIX}superlu_4.0"
+  "${PETSC_LIB_PREFIX}superlu_4.3"
+  "${PETSC_LIB_PREFIX}superlu"
+  "${PETSC_LIB_PREFIX}HYPRE"
+  "${PETSC_LIB_PREFIX}parmetis"
+  "${PETSC_LIB_PREFIX}metis"
+)
+
+if (DEFINED PETSC_FIND_VERSION)
+  message(STATUS "--- scimake/Modules/FindSciPetsc, petsc find version logic used ---")
+  set(Petsc_SEARCH "petsc-${PETSC_FIND_VERSION}")
+else ()
+  set(Petsc_SEARCH "petsc")
+endif ()
+
+# Check the petsc search path
+message(STATUS "Petsc_SEARCH = ${Petsc_SEARCH}")
+
+if (ENABLE_PARALLEL)
+  SciFindPackage(PACKAGE "Petsc"
+    INSTALL_DIR ${Petsc_SEARCH}-par
+    HEADERS petsc.h
+    LIBRARIES ${Petsc_LIBRARY_LIST}
+  )
+else ()
+  SciFindPackage(PACKAGE "Petsc"
+    INSTALL_DIR ${Petsc_SEARCH}
+    HEADERS petsc.h mpi.h
+    INCLUDE_SUBDIRS include include/mpiuni
+    LIBRARIES ${Petsc_LIBRARY_LIST}
+  )
+endif ()
+
+if (PETSC_FOUND)
+  message(STATUS "Found Petsc")
+  set(HAVE_PETSC 1 CACHE BOOL "Whether have the PETSC library")
+else ()
+  message(STATUS "Did not find Petsc.  Use -DPETSC_DIR to specify the installation directory.")
+  if (Petsc_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
+########################################################################
+#
+# Find Petsc paths
+# We are creating a temporary Makefile.petsc which includes the relevant
+# petsc files. The macro petsc_get_variable, then probes this makefile
+# to determine various arguments
+#
+#######################################################################
+
+# Need PETSC_DIR for the scimake/Makefile.show
+get_filename_component(Petsc_DIR ${Petsc_petsc_h_INCLUDE_DIR} PATH)
+set(PETSC_DIR ${Petsc_DIR})
+
+# Get the make command
+find_program(MAKE_EXECUTABLE NAMES make gmake)
+
+# Get Petsc package variables that have a target
+macro(PETSC_GET_TARGET_VARIABLE name var)
+  set(${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
+  execute_process(COMMAND ${MAKE_EXECUTABLE} PETSC_DIR=${PETSC_DIR}
+    -f "${SCIMAKE_DIR}/Makefile.show" ${name}
+    OUTPUT_VARIABLE ${var}
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+    RESULT_VARIABLE return)
+endmacro(PETSC_GET_TARGET_VARIABLE)
+
+# Get other Petsc Package variables from a Petsc Makefile
+macro(PETSC_GET_VARIABLE name var)
+  set(${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
+  execute_process(COMMAND ${MAKE_EXECUTABLE} PETSC_DIR=${PETSC_DIR}
+    --no-print-directory -f "${SCIMAKE_DIR}/Makefile.show"
+    showvar PKG_VARIABLE=${name}
+    OUTPUT_VARIABLE ${var}
+    RESULT_VARIABLE return
+  )
+endmacro(PETSC_GET_VARIABLE)
+
+# getlinklibs is needed for some projects
+petsc_get_target_variable(getlinklibs Petsc_LINKER_LIBS)
+message(STATUS "  Petsc_LINKER_LIBS  = ${Petsc_LINKER_LIBS}.")
+set(Petsc_LINKER_LIBLIST "${Petsc_LINKER_LIBS}")
+SciMakeLibList(Petsc_LINKER_LIBLIST)
+message(STATUS "  Petsc_LINKER_LIBLIST  = ${Petsc_LINKER_LIBLIST}.")
+
+# X11_LIB is needed when building Petsc with Zoltan
+# grab this variable with the macro that uses "make showvar"
+petsc_get_variable(X11_LIB Petsc_LIB_X11)
+message(STATUS "  Petsc_LIB_X11      = ${Petsc_LIB_X11}.")
+set(Petsc_X11_LIBLIST "${Petsc_X11_LIBS}")
+SciMakeLibList(Petsc_X11_LIBLIST)
+message(STATUS "  Petsc_X11_LIBLIST  = ${Petsc_X11_LIBLIST}.")
+
+# Get the libs that petsc needs to link
+petsc_get_variable(PCC_LINKER_LIBS PCC_LINKER_LIBS)
+message(STATUS "  PCC_LINKER_LIBS    = ${PCC_LINKER_LIBS}.")
+set(PCC_LINKER_LIBLIST "${PCC_LINKER_LIBS}")
+SciMakeLibList(PCC_LINKER_LIBLIST)
+message(STATUS "  PCC_LINKER_LIBLIST  = ${PCC_LINKER_LIBLIST}.")
+
+########################################################################
+#
+# Create proper scimake flags and libs
+#
+########################################################################
+
+# PETSc has libraries like superlu, for which NAME_WE does not
+# work, so we will just try to get these from Petsc_LINKER_LIBS
+message("")
+message("--------- Recomputing Petsc libs from Petsc_LINKER_LIBS -----------")
+list(REVERSE Petsc_LINKER_LIBLIST)
+list(REMOVE_DUPLICATES Petsc_LINKER_LIBLIST)
+list(REVERSE Petsc_LINKER_LIBLIST)
+SciPrintVar(Petsc_LINKER_LIBLIST)
+SciSeparateLibs("${Petsc_LINKER_LIBLIST}" Petsc_All_FLAGS Petsc_All_LIBRARIES
+  Petsc_All_LIBRARY_DIRS Petsc_All_LIBRARY_NAMES Petsc_All_FRAMEWORKS)
+foreach (var Petsc_All_FLAGS Petsc_All_LIBRARIES
+    Petsc_All_LIBRARY_DIRS Petsc_All_LIBRARY_NAMES Petsc_All_FRAMEWORKS)
+  SciPrintVar(${var})
+endforeach ()
+
+# Separate out the libraries into groups
+set(Petsc_SUPERLU_LIBRARY_NAMES)
+set(Petsc_LINALG_LIBRARY_NAMES)
+set(Petsc_MPI_LIBRARY_NAMES)
+set(Petsc_DL_LIBRARY_NAMES)
+set(Petsc_SYSTEM_LIBRARY_NAMES)
+foreach (i ${Petsc_All_LIBRARY_NAMES})
+  set(libfound FALSE)
+# Ignore for PETSc libraries
+  list(FIND Petsc_LIBRARY_NAMES ${i} indx)
+  # message(STATUS "For ${i} indx = ${indx}.")
+  if (indx GREATER -1)
+    # message(STATUS "${i} is a Petsc library.  Ignoring.")
+    set(libfound TRUE)
+  endif ()
+
+# Ignore fortran libraries
+  if (NOT libfound)
+    if (${i} STREQUAL "gfortran")
+      message(STATUS "${i} is an ignored fortran library.")
+      set(libfound TRUE)
+    endif ()
+  endif ()
+
+# Ignore some system libraries
+  if (NOT libfound)
+    if (${i} STREQUAL "rt" OR ${i} STREQUAL "m" OR
+        ${i} STREQUAL "stdc++" OR ${i} STREQUAL "util" OR
+        ${i} STREQUAL "pthread")
+      message(STATUS "${i} is an ignored system library.")
+      set(libfound TRUE)
+    endif ()
+  endif ()
+
+# Pull out the superlu libraries
+  if (NOT libfound)
+    if (${i} MATCHES "^superlu")
+      message(STATUS "${i} is a superlu library.")
+      set(Petsc_SUPERLU_LIBRARY_NAMES ${Petsc_SUPERLU_LIBRARY_NAMES} ${i})
+      set(libfound TRUE)
+    endif ()
+  endif ()
+
+# Pull out the dl library
+  if (NOT libfound)
+    if (${i} STREQUAL "dl")
+      message(STATUS "${i} is a DL library.")
+      set(Petsc_DL_LIBRARY_NAMES ${Petsc_DL_LIBRARY_NAMES} ${i})
+      set(libfound TRUE)
+    endif ()
+  endif ()
+
+# Pull out MPI libraries
+  if (NOT libfound)
+    if (${i} MATCHES "^mpi_" OR ${i} STREQUAL "mpi" OR
+        ${i} STREQUAL "mpich" OR ${i} MATCHES "^open-" OR ${i} STREQUAL "nsl")
+      message(STATUS "${i} is an mpi library.")
+      set(Petsc_MPI_LIBRARY_NAMES ${Petsc_MPI_LIBRARY_NAMES} ${i})
+      set(libfound TRUE)
+    endif ()
+  endif ()
+
+# Pull out linear algebra libraries
+  if (NOT libfound)
+    if (${i} STREQUAL "blas" OR ${i} STREQUAL "lapack" OR ${i} STREQUAL "acml" OR ${i} STREQUAL "mkl")
+      message(STATUS "${i} is a linear algebra library.")
+      set(Petsc_LINALG_LIBRARY_NAMES ${Petsc_LINALG_LIBRARY_NAMES} ${i})
+      set(libfound TRUE)
+    endif ()
+  endif ()
+
+# System libraries
+  if (NOT libfound)
+    set(Petsc_SYSTEM_LIBRARY_NAMES ${Petsc_SYSTEM_LIBRARY_NAMES} ${i})
+  endif ()
+
+endforeach ()
+
+# Find the ext libraries
+foreach (vartype SUPERLU LINALG MPI DL SYSTEM)
+  foreach (lib ${Petsc_${vartype}_LIBRARY_NAMES})
+    find_library(${lib}_LIBRARY ${lib} ${Petsc_${vartype}_LIBRARY_DIRS} ${Petsc_ALLEXT_LIBRARY_DIRS} NO_DEFAULT_PATH)
+    if (NOT ${lib}_LIBRARY)
+      find_library(${lib}_LIBRARY ${lib} ${Petsc_${vartype}_LIBRARY_DIRS} ${Petsc_ALLEXT_LIBRARY_DIRS})
+    endif ()
+    if (${lib}_LIBRARY)
+      set(Petsc_${vartype}_LIBRARIES ${Petsc_${vartype}_LIBRARIES} ${${lib}_LIBRARY})
+      get_filename_component(libdir ${${lib}_LIBRARY}/.. REALPATH)
+      set(Petsc_${vartype}_LIBRARY_DIRS ${Petsc_${vartype}_LIBRARY_DIRS} ${libdir})
+    endif ()
+  endforeach ()
+  if (Petsc_${vartype}_LIBRARY_DIRS)
+    list(REMOVE_DUPLICATES Petsc_${vartype}_LIBRARY_DIRS)
+  endif ()
+  SciGetStaticLibs("${Petsc_${vartype}_LIBRARIES}" Petsc_${vartype}_STLIBS)
+endforeach ()
+
+# Print all out
+foreach (vartype SUPERLU LINALG MPI DL SYSTEM)
+  foreach (var LIBRARY_NAMES LIBRARY_DIRS LIBRARIES STLIBS)
+    SciPrintvar(Petsc_${vartype}_${var})
+  endforeach ()
+endforeach ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPlasmaState.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPlasmaState.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPlasmaState.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPlasmaState.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,49 @@
+# - FindSciPlasmaState: Module to find include directories and libraries
+#   for PlasmaState. This module was implemented as there is no stock
+#   CMake module for PlasmaState.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciPlasmaState REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_PLASMASTATE         = Whether have the PlasmaState library
+#  PlasmaState_INCLUDE_DIRS = Location of PlasmaState includes
+#  PlasmaState_LIBRARY_DIRS = Location of PlasmaState libraries
+#  PlasmaState_LIBRARIES    = Required libraries
+#  PlasmaState_STLIBS       = Location of PlasmaState static library
+
+######################################################################
+#
+# FindSciPlasmaState: find includes and libraries for PlasmaState
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir plasma_state-ben plasma_state)
+else ()
+  set(instdir plasma_state)
+endif ()
+SciFindPackage(PACKAGE "PlasmaState"
+  INSTALL_DIRS ${instdir}
+  HEADERS state.h
+  LIBRARIES PlasmaState
+)
+
+set(PLASMASTATE_DIR ${PlasmaState_DIR})
+if (PLASMASTATE_FOUND)
+  message(STATUS "Found PlasmaState")
+  message(STATUS "${PLASMASTATE_DIR} = ${PLASMASTATE_DIR}.")
+  set(HAVE_PLASMASTATE 1 CACHE BOOL "Whether have the PlasmaState library")
+  set(HAVE_PlasmaState 1 CACHE BOOL "Whether have the PlasmaState library")
+# Find gacodes
+  include(${SCIMAKE_DIR}/SciGetDepsFromInstall.cmake)
+# Get dependencies
+  #SciGetDepsFromInstall(NetlibLite ${PLASMASTATE_DIR} NETLIB_LITE)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPng.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPng.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPng.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPng.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,40 @@
+# - FindSciPng: Module to find include directories and
+#   libraries for Png.
+#
+# Module usage:
+#   find_package(SciPng ...)
+#
+# This module will define the following variables:
+#  HAVE_PNG, PNG_FOUND = Whether libraries and includes are found
+#  Png_INCLUDE_DIRS       = Location of Png includes
+#  Png_LIBRARY_DIRS       = Location of Png libraries
+#  Png_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindPng: find includes and libraries for z(compression)
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(
+  PACKAGE "Png"
+  INSTALL_DIRS libpng-sersh
+  HEADERS png.h
+  LIBRARIES "png"
+)
+
+if (PNG_FOUND)
+  set(HAVE_PNG 1 CACHE BOOL "Whether have the Png (compression) library")
+else ()
+  message(STATUS "Did not find Png (compression) library.")
+  if (SciPng_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPspline.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPspline.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPspline.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPspline.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,53 @@
+# - FindSciPspline: Module to find include directories and libraries
+#   for Pspline. This module was implemented as there is no stock
+#   CMake module for Pspline.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciPspline REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_PSPLINE         = Whether have the Pspline library
+#  Pspline_INCLUDE_DIRS = Location of Pspline includes
+#  Pspline_LIBRARY_DIRS = Location of Pspline libraries
+#  Pspline_LIBRARIES    = Required libraries
+#  Pspline_STLIBS       = Location of Pspline static library
+
+######################################################################
+#
+# FindSciPspline: find includes and libraries for pspline
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+#
+# Note that there is a psplineImport that is a dynamic library used for
+# python.  That should be in a separate search entirely because one
+# should generally not use it for linking (it grabs other libraries and
+# appends it in).
+#
+
+if (ENABLE_PARALLEL)
+  set(instdir pspline-par)
+else ()
+  set(instdir pspline)
+endif ()
+set(searchlibs "pspline")
+
+SciFindPackage(PACKAGE "Pspline"
+  INSTALL_DIR "${instdir}"
+  HEADERS "czspline_capi.h;transp_util.h;pspline_config.h"
+  LIBRARIES ${searchlibs}
+  LIBRARY_SUBDIRS "lib"
+)
+
+set(PSPLINE_DIR ${Pspline_DIR})
+if (PSPLINE_FOUND)
+  # message(STATUS "Found Pspline")
+  set(HAVE_PSPLINE 1 CACHE BOOL "Whether have the Pspline library")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPython.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPython.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPython.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPython.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,147 @@
+# - FindSciPython: Module to find include directories and
+#   libraries for Python.
+#
+# Module usage:
+#   find_package(SciPython ...)
+#
+# This module will define the following variables:
+#  HAVE_PYTHON, PYTHON_FOUND = Whether libraries and includes are found
+#  Python_INCLUDE_DIRS      = Location of Python includes
+#  Python_LIBRARIES         = Required libraries
+
+##################################################################
+#
+# Find module for Python
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+##################################################################
+
+message("")
+message(STATUS "--------- Looking for Python" --------- )
+message(STATUS "Seeking Python executable")
+# Find in the path
+if (WIN32)
+  set(pynames python)
+elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin" AND "${CMAKE_SYSTEM_VERSION}" STREQUAL "10.8.0")
+  set(pynames python2.6)
+  message(STATUS "Using Python 2.6 on SnowLeopard.")
+else ()
+  set(pynames python2.7 python2.6)
+endif ()
+find_program(Python_EXE NAMES ${pynames} PATHS ${Python_ROOT_DIR})
+if (Python_EXE)
+
+# Root directory, naes
+  set(PYTHON_FOUND TRUE)
+  get_filename_component(Python_EXE ${Python_EXE} REALPATH)
+  get_filename_component(Python_NAME ${Python_EXE} NAME)
+  if (WIN32)  # Remove .exe on windows
+    get_filename_component(Python_NAME_WE ${Python_EXE} NAME_WE)
+  else ()
+    set(Python_NAME_WE ${Python_NAME})
+  endif ()
+  #string(REGEX REPLACE ".exe$" "" Python_NAME_WE "${Python_NAME}")
+  get_filename_component(Python_BINDIR ${Python_EXE}/.. REALPATH)
+  get_filename_component(Python_BINDIR_NAME ${Python_BINDIR} NAME)
+  if ("${Python_BINDIR_NAME}" STREQUAL bin)
+    get_filename_component(Python_ROOT_DIR ${Python_EXE}/../.. REALPATH)
+  else ()
+    get_filename_component(Python_ROOT_DIR ${Python_EXE}/.. REALPATH)
+  endif ()
+
+# Include directory
+  execute_process(COMMAND ${Python_EXE} -c "import distutils.sysconfig; idir = distutils.sysconfig.get_python_inc(1); print idir,"
+    OUTPUT_VARIABLE Python_INCLUDE_DIRS
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+  )
+  file(TO_CMAKE_PATH "${Python_INCLUDE_DIRS}" Python_INCLUDE_DIRS)
+
+# Version
+  execute_process(COMMAND ${Python_EXE} -c "import sys;print sys.version[0]"
+    OUTPUT_VARIABLE Python_MAJOR
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+  )
+  execute_process(COMMAND ${Python_EXE} -c "import sys;print sys.version[2]"
+    OUTPUT_VARIABLE Python_MINOR
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+  )
+  execute_process(COMMAND ${Python_EXE} -c "import site;print site.__file__"
+    OUTPUT_VARIABLE Python_SITE
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+  )
+  string(REGEX REPLACE ".pyc$" ".py" Python_SITE "${Python_SITE}")   # Get the non-compiled version.
+  file(TO_CMAKE_PATH "${Python_SITE}" Python_SITE)
+  if (WIN32)
+    set(Python_MAJMIN "${Python_MAJOR}${Python_MINOR}")
+  else ()
+    set(Python_MAJMIN "${Python_MAJOR}.${Python_MINOR}")
+  endif ()
+  set(Python_LIBRARY_NAMES python${Python_MAJMIN})
+
+# Shared library
+  find_library(Python_LIBRARY
+    NAMES ${Python_LIBRARY_NAMES}
+    PATHS ${Python_ROOT_DIR}
+    PATH_SUFFIXES lib Libs lib/python${Python_MAJMIN}/config
+    NO_DEFAULT_PATH
+  )
+  SciPrintVar(Python_LIBRARY)
+
+  if (Python_LIBRARY)
+    get_filename_component(Python_LIBRARY ${Python_LIBRARY} REALPATH)
+    get_filename_component(Python_LIBRARY_NAME ${Python_LIBRARY} NAME_WE)
+    set(Python_LIBRARIES ${Python_LIBRARY})
+    get_filename_component(Python_LIBRARY_DIRS ${Python_LIBRARY}/.. REALPATH)
+    if (WIN32)
+      find_program(Python_DLLS ${Python_LIBRARY_NAME}.dll)
+    endif ()
+  else ()
+    set(PYTHON_FOUND FALSE)
+  endif ()
+
+# Static library
+  find_library(Python_STLIBS
+    NAMES ${Python_LIBRARY_NAMES}
+    PATHS ${Python_ROOT_DIR}
+    PATH_SUFFIXES lib/python${Python_MAJMIN}/config
+    NO_DEFAULT_PATH
+  )
+  # SciPrintVar(Python_STLIB)
+  if (Python_STLIBS)
+    get_filename_component(Python_STLIB_DIRS ${Python_STLIBS}/.. REALPATH)
+  endif ()
+
+# Modules
+  if (Python_SITE)
+    get_filename_component(Python_MODULES_DIR ${Python_SITE}/.. REALPATH)
+    file(RELATIVE_PATH Python_MODULES_SUBDIR ${Python_ROOT_DIR} ${Python_MODULES_DIR})
+  else ()
+    set(PYTHON_FOUND FALSE)
+  endif ()
+
+else ()
+  set(PYTHON_FOUND FALSE)
+endif ()
+
+foreach (var Python_ROOT_DIR Python_BINDIR Python_EXE Python_NAME Python_NAME_WE
+    Python_INCLUDE_DIRS Python_MAJMIN Python_LIBRARY Python_LIBRARY_NAME
+    Python_LIBRARIES Python_LIBRARY_DIRS Python_STLIBS Python_STLIB_DIRS Python_DLLS Python_MODULES_DIR
+    Python_MODULES_SUBDIR Python_SITE)
+  SciPrintVar(${var})
+endforeach ()
+
+if (PYTHON_FOUND)
+  message(STATUS "[FindSciPython.cmake] - Found Python")
+  set(HAVE_PYTHON 1 CACHE BOOL "Whether have Python.")
+else ()
+  message(STATUS "[FindSciPython.cmake] - Did not find Python, use -DPython_ROOT_DIR to supply the Python installation directory.")
+  if (SciPython_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciPython.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciPythonLibs.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciPythonLibs.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciPythonLibs.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciPythonLibs.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,218 @@
+# - FindSciPythonLibs: This module finds Python, its include dirs, and
+# its libraries.  Unlike the module that comes with cmake, this module
+# works off the python that is found in one's path.  If none found,
+# then it reverts to using cmake's FindPythonLibs.
+#
+# INPUTS(not sought if defined)
+#
+#  PYTHON_INCLUDE_PATH    - path to where Python.h is found.
+#                           For compatibility with the CMake module, one can
+#                           instead define Python_INCLUDE_DIR
+#  PYTHON_LIBRARY         - path to the python library
+#                           For compatibility with the CMake module, one can
+#                           instead define Python_LIBRARY
+#
+# OUTPUTS
+#
+#  PYTHONLIBS_FOUND       - whether the Python libs have been found
+#  Python_LIBRARIES       - path to the python library
+#  Python_LIB             - the scimake style name of the python library
+#  Python_INCLUDE_DIRS    - path to where Python.h is found
+#  Python_DEBUG_LIBRARIES - path to the debug library
+#
+#  PYTHON                 - full path to python
+#  Python_STLIBS          - the static library if found, otherwise whatever
+#                           python library is found.
+#  Python_STLIB           - deprecated.  Synonym for ${Python_STLIB}.
+#  Python_LIBS            - deprecated.  Synonym for ${Python_STLIB}.
+
+######################################################################
+#
+# FindSciPythonLibs.cmake: Wrap cmake's python finder to fix for mingw
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Messaged added April 23, 2014.  Remove file on Sep. 31, 2014.
+message(WARNING "This package file deprecated. Please switch to FindSciPython.cmake.")
+
+option(ENABLE_PYTHON "Whether to enable Python" ON)
+
+if (ENABLE_PYTHON)
+  message("")
+  message("--------- SciPythonLibs looking for Python libraries ---------")
+
+# Backward compatibility
+  if (PYTHON_INCLUDE_PATH)
+  message("--------- Setting Python_INCLUDE_DIRS")
+    set(Python_INCLUDE_DIRS ${PYTHON_INCLUDE_PATH})
+  endif ()
+  if (PYTHON_LIBRARY)
+  message("--------- Setting Python_LIBRARIES")
+    set(Python_LIBRARIES ${Python_LIBRARY})
+  endif ()
+
+# If already defined, done
+  if (Python_INCLUDE_DIRS AND Python_LIBRARIES)
+    set(PYTHONLIBS_FOUND TRUE)
+# Search for python on unix using path
+  else ()
+    find_program(PYTHON python
+      HINTS "${Python_ROOT_DIR}"
+      PATH_SUFFIXES bin)
+    if (DEBUG_CMAKE)
+      message(STATUS "PYTHON = ${PYTHON}.")
+    endif ()
+# Use python to find its include and library dirs
+    if (PYTHON)
+# Get version
+      execute_process(COMMAND ${PYTHON} -V ERROR_VARIABLE Python_VERSION)
+      message(STATUS "Python_VERSION = ${Python_VERSION}.")
+      string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
+        Python_VERSION "${Python_VERSION}"
+      )
+      string(REGEX MATCH "^[0-9]+\\.[0-9]"
+                Python_MAJMIN "${Python_VERSION}")
+
+      if (WIN32)
+        string(REPLACE "." "" Python_MAJMIN "${Python_MAJMIN}")
+      endif ()
+      if (DEBUG_CMAKE)
+        message(STATUS "Python_VERSION = ${Python_VERSION}.")
+        message(STATUS "Python_MAJMIN = ${Python_MAJMIN}.")
+      endif ()
+      set(Python_LIB python${Python_MAJMIN} CACHE STRING "Python library name")
+# Synonyms
+      set(Python_LIBRARY_NAME ${Python_LIB})
+      set(Python_LIBRARY_NAMES ${Python_LIB})
+# Should check here that version >2.5.
+# Find includes
+      if (NOT Python_INCLUDE_DIRS)
+        execute_process(COMMAND ${PYTHON} -c "import os, sys; print os.path.join(sys.prefix, 'include', 'python')"
+          OUTPUT_VARIABLE Python_INCDIR)
+        string(STRIP "${Python_INCDIR}" Python_INCDIR)
+        if (WIN32)
+          get_filename_component(Python_INCLUDE_DIRS "${Python_INCDIR}/.." REALPATH)
+        else ()
+          set(Python_INCLUDE_DIRS "${Python_INCDIR}${Python_MAJMIN}")
+        endif ()
+      endif ()
+      if (DEBUG_CMAKE)
+        message(STATUS "Python_INCLUDE_DIRS = ${Python_INCLUDE_DIRS}.")
+      endif ()
+      execute_process(COMMAND python -c "import distutils.sysconfig; print distutils.sysconfig.get_python_lib(1,1)"
+        OUTPUT_VARIABLE Python_TOPLIBDIR)
+      string(STRIP "${Python_TOPLIBDIR}" Python_TOPLIBDIR)
+      if (DEBUG_CMAKE)
+        message(STATUS "Python_TOPLIBDIR = ${Python_TOPLIBDIR}.")
+      endif ()
+# Find libraries
+      if (NOT Python_LIBRARIES)
+        if (DEBUG_CMAKE)
+          message(STATUS "Looking for library, ${Python_LIB}.")
+        endif ()
+        if (WIN32)
+          get_filename_component(Python_TOPLIBDIR "${Python_TOPLIBDIR}/.." REALPATH)
+          file(TO_CMAKE_PATH "${Python_TOPLIBDIR}" Python_TOPLIBDIR)
+        endif ()
+        if (DEBUG_CMAKE)
+          message(STATUS "find_library(Python_LIBRARIES ${Python_LIB}
+              PATHS ${Python_TOPLIBDIR}/config ${Python_TOPLIBDIR}/libs
+              NO_DEFAULT_PATH)"
+          )
+        endif ()
+        find_library(Python_LIBRARIES ${Python_LIB}
+          HINTS "${Python_ROOT_DIR}"
+          PATH_SUFFIXES bin lib libs
+          PATHS ${Python_TOPLIBDIR}/config ${Python_TOPLIBDIR}/libs
+          NO_DEFAULT_PATH)
+      endif ()
+      if (Python_INCLUDE_DIRS AND Python_LIBRARIES)
+        set(PYTHONLIBS_FOUND TRUE)
+        get_filename_component(Python_LIBRARY_NAMES ${Python_LIBRARIES} NAME)
+        foreach (sfx lib a dylib so)
+          string(REGEX REPLACE "\\.${sfx}$" "" Python_LIBRARY_NAMES ${Python_LIBRARY_NAMES})
+        endforeach ()
+        string(REGEX REPLACE "^lib" "" Python_LIBRARY_NAMES ${Python_LIBRARY_NAMES})
+      endif ()
+    endif ()
+  endif (Python_INCLUDE_DIRS AND Python_LIBRARIES)
+
+# Python not found so find python using cmake's module
+  if (NOT PYTHONLIBS_FOUND)
+    set(PythonLibs_DIR "${Python_ROOT_DIR}")
+    find_package(PythonLibs)
+
+    if (PYTHONLIBS_FOUND)
+      option(HAVE_PYTHON "Python library" ON)
+      set (Python_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS})
+      set (Python_LIBRARIES ${PYTHON_LIBRARY})
+      get_filename_component(Python_LIBRARY_NAMES ${Python_LIBRARIES} NAME_WE)
+      message(STATUS "Python_LIBRARY = ${Python_LIBRARIES}")
+# MinGW requires one to separate the dir and the lib, and then
+# the library needs to have a possible leading lib removed.
+      if (USING_MINGW)
+        get_filename_component(Python_LIBDIR ${Python_LIBRARIES}/.. REALPATH)
+        get_filename_component(Python_LLIB ${Python_LIBRARIES} NAME_WE)
+        string(REGEX REPLACE "^lib" "" Python_LLIB ${Python_LLIB})
+        set(Python_LIBS "-L${Python_LIBDIR} -l${Python_LLIB}")
+      else ()
+        set(Python_LIBS ${PYTHON_LIBRARIES})
+      endif ()
+    endif ()
+  endif ()
+
+# Get static libraries
+  if (PYTHONLIBS_FOUND)
+    get_filename_component(Python_LIBRARY_DIRS ${Python_LIBRARIES}/.. REALPATH)
+    get_filename_component(Python_PYLIBDIR ${Python_LIBRARY_DIRS}/.. REALPATH)
+# Seek static library
+    SciGetStaticLibs("${Python_LIBRARIES}" PYTHON_STLIBS)
+# This may not give the static library, but it is the best we have
+    if (NOT Python_LIBS)
+      if (Python_STLIBS)
+        set(Python_LIBS ${Python_STLIBS})
+        set(Python_STLIB ${Python_STLIBS}) # Backwards compatibility
+      else ()
+        set(Python_LIBS ${Python_LIBRARIES})
+      endif ()
+    endif ()
+# Look for executable
+    if (NOT PYTHON)
+      find_program(PYTHON python
+        HINTS "${Python_ROOT_DIR}"
+        PATH_SUFFIXES bin
+        PATHS ${Python_PYLIBDIR}/bin ${Python_PYLIBDIR}
+      )
+    endif ()
+  endif ()
+
+# Print result
+  if (PYTHONLIBS_FOUND)
+      execute_process(COMMAND python -c "import sys; print sys.version[:3]"
+        OUTPUT_VARIABLE Python_VERSION)
+      string(STRIP "${Python_VERSION}" Python_VERSION)
+    if (WIN32)
+      string(REGEX REPLACE "\\." "" Python_VERSION_WINSTR "${Python_VERSION}")
+
+      file(TO_CMAKE_PATH "${Python_INCLUDE_DIRS}" Python_INCLUDE_DIRS)
+    endif ()
+    set(HAVE_PYTHON 1 CACHE BOOL "Whether have Python")
+  endif ()
+  set(PYTHON_VERSION ${Python_VERSION})
+  SciPrintCMakeResults(Python)
+  SciPrintVar(PYTHON)
+  SciPrintVar(Python_VERSION)
+  SciPrintVar(Python_PYLIBDIR)
+  message(STATUS "Related variables:")
+  SciPrintVar(Python_LIB)
+  SciPrintVar(Python_LIBS)
+  SciPrintVar(Python_LIBRARY_NAME)
+
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciQScintilla.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciQScintilla.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciQScintilla.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciQScintilla.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,59 @@
+# - FindSciQScintilla: Module to find include directories and
+#   libraries for QScintilla.
+#
+# Module usage:
+#   find_package(SciQScintilla ...)
+#
+# This module will define the following variables:
+#  HAVE_QSCINTILLA, QSCINTILLA_FOUND = Whether libraries and includes are found
+#  QScintilla_INCLUDE_DIRS       = Location of QScintilla includes
+#  QScintilla_LIBRARY_DIRS       = Location of QScintilla libraries
+#  QScintilla_LIBRARIES          = Required libraries
+
+#################################################
+#
+# Find module for QScintilla includes and lib
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+#################################################
+
+SciFindPackage(
+        PACKAGE QScintilla
+        INSTALL_DIR QScintilla
+        HEADERS qsciscintilla.h
+        LIBRARIES qscintilla2
+        INCLUDE_SUBDIRS "include/Qsci"
+        )
+
+if (QSCINTILLA_FOUND)
+  message(STATUS "[FindQScintilla.cmake] - Found QScintilla")
+
+  # This is a funny thing in QScintilla-
+  # We want to have the actual path to the qscintilla installs
+  # BUT the qscintilla headers all use "QSci/xx.h"
+  # So we also need to next directory down
+  if (DEBUG_CMAKE)
+    message(STATUS "QScintilla_INCLUDE_DIRS is ${QScintilla_INCLUDE_DIRS}")
+  endif ()
+  set(QScintilla_INCLUDE_DIRS_TEMP ${QScintilla_INCLUDE_DIRS})
+  foreach (qdir ${QScintilla_INCLUDE_DIRS_TEMP})
+    get_filename_component(qdir_cdup "${qdir}/.." REALPATH)
+    set(QScintilla_INCLUDE_DIRS ${QScintilla_INCLUDE_DIRS} ${qdir_cdup})
+  endforeach ()
+
+  if (DEBUG_CMAKE)
+    message(STATUS "QScintilla_INCLUDE_DIRS is ${QScintilla_INCLUDE_DIRS}")
+  endif ()
+
+else ()
+  message(STATUS "[FindQScintilla.cmake] - QScintilla not found, use -DQSCINTILLA_DIR to supply the installation directory.")
+  if (SciQScintilla_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindQScintilla.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciQt4.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciQt4.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciQt4.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciQt4.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,133 @@
+######################################################################
+#
+# FindSciQt4: find includes and libraries for Qt4
+#
+# $Rev: 1136 $ $Date: 2017-02-20 14:03:27 -0700 (Mon, 20 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+# The cmake find of Qt4 needs cleaning up.
+#
+######################################################################
+
+# Determined how to do this from reading documentation of FindQt4.cmake
+#   find_package(Qt4 4.4.3 COMPONENTS QtCore QtGui QtXml REQUIRED )
+#   include(${QT_USE_FILE})
+#   add_executable(myexe main.cpp)
+#   target_link_libraries(myexe ${QT_LIBRARIES})
+
+message("")
+message("--------- FindSciQt4 looking for Qt4 ---------")
+
+if (SciQt4_FIND_COMPONENTS)
+  message(STATUS "Looking for Qt with version greater than 4.7.1 with components: ${SciQt4_FIND_COMPONENTS}")
+  find_package(Qt4 4.7.1 COMPONENTS ${SciQt4_FIND_COMPONENTS} REQUIRED)
+else ()
+  message(STATUS "Looking for Qt with version greater than 4.7.1, components not specified")
+  find_package(Qt4 4.7.1 REQUIRED)
+endif ()
+
+# The above can give the wrong directory, if one has copied a qt installation
+get_filename_component(QT_QMAKE_DIR ${QT_QMAKE_EXECUTABLE} DIRECTORY)
+get_filename_component(QT_QMAKE_DIR ${QT_QMAKE_DIR} DIRECTORY)
+message(STATUS "QT_QMAKE_DIR = ${QT_QMAKE_DIR}.")
+get_filename_component(QT_MOC_DIR ${QT_MOC_EXECUTABLE} DIRECTORY)
+get_filename_component(QT_MOC_DIR ${QT_MOC_DIR} DIRECTORY)
+message(STATUS "QT_MOC_DIR = ${QT_MOC_DIR}.")
+if (NOT "${QT_MOC_DIR}" STREQUAL "${QT_QMAKE_DIR}")
+  message(STATUS "Directories not same, will need to fix.")
+  foreach (var QT_MOC_EXECUTABLE QT_UIC_EXECUTABLE QT_INCLUDES QT_LIBRARY_DIR QT_BINARY_DIR)
+    string(REPLACE "${QT_MOC_DIR}" "${QT_QMAKE_DIR}" ${var} "${${var}}")
+  endforeach ()
+endif ()
+
+# Use file sets up variables
+if (DEBUG_CMAKE)
+  message(STATUS "QT_USE_FILE = ${QT_USE_FILE}")
+endif ()
+include(${QT_USE_FILE})
+# Regularize the variable the FindQt4 sets
+set(QT_INCLUDE_DIRS ${QT_INCLUDES})
+set(QT_LIBRARY_DIRS ${QT_LIBRARY_DIR})
+if (EXISTS ${QT_BINARY_DIR}/qmake)
+  set(QT_QMAKE_EXECUTABLE ${QT_BINARY_DIR}/qmake)
+endif ()
+set(QT_PROGRAMS
+  ${QT_QMAKE_EXECUTABLE}
+  ${QT_MOC_EXECUTABLE}
+  ${QT_UIC_EXECUTABLE}
+)
+
+# Add in optional libaries to QT_LIBARIES, if they are found
+foreach (qtoptlib ${QT_OPTIONAL_LIBRARIES})
+ string(TOUPPER ${qtoptlib} _uppercaseoptlib )
+ if (QT_${_uppercaseoptlib}_FOUND)
+   set(QT_LIBRARIES ${QT_LIBRARIES} ${QT_${_uppercaseoptlib}_LIBRARY})
+ endif ()
+endforeach ()
+
+# Same fix as above
+# message(STATUS "QT_LIBRARIES = ${QT_LIBRARIES}.")
+if (NOT "${QT_MOC_DIR}" STREQUAL "${QT_QMAKE_DIR}")
+  string(REPLACE "${QT_MOC_DIR}" "${QT_QMAKE_DIR}" QT_LIBRARIES "${QT_LIBRARIES}")
+endif ()
+
+get_filename_component(QT_DIR ${QT_LIBRARY_DIR}/.. REALPATH)
+
+# The QT_LIBRARIES variable can come back from scimake's FindQt4
+# with a list of libary paths mixed in with the words
+# "optimized" and "debug".  We need to pull out a pure list
+# of the libraries of only one type based on the value
+# CMAKE_BUILD_TYPE, which is either DEBUG or RELEASE.
+if (NOT "${QT_LIBRARIES}" MATCHES "optimized")
+  set(QT_LIBS ${QT_LIBRARIES})
+else ()
+  set(QT_LIBS)
+  set(libtype)
+  foreach (qtlib ${QT_LIBRARIES})
+    if (${qtlib} MATCHES "optimized" OR ${qtlib} MATCHES "debug")
+      set(libtype ${qtlib})
+    else ()
+      if ("${libtype}" MATCHES "optimized" AND
+           ("${CMAKE_BUILD_TYPE}" MATCHES "Release" OR
+               "${CMAKE_BUILD_TYPE}" MATCHES "RELEASE" OR
+               "${CMAKE_BUILD_TYPE}" MATCHES "RelWithDebInfo" OR
+               "${CMAKE_BUILD_TYPE}" MATCHES "RELWITHDEBINFO"
+           )
+         )
+        set(QT_LIBS ${QT_LIBS} ${qtlib})
+      elseif ("${libtype}" MATCHES "debug" AND
+               ("${CMAKE_BUILD_TYPE}" MATCHES "Debug" OR
+                 "${CMAKE_BUILD_TYPE}" MATCHES "DEBUG")
+               )
+        set(QT_LIBS ${QT_LIBS} ${qtlib})
+      endif ()
+    endif ()
+  endforeach ()
+endif ()
+
+# Find dlls
+if (WIN32)
+  set(QT_DLLS)
+  foreach (qtlib ${QT_LIBS})
+    get_filename_component(qtname ${qtlib} NAME_WE)
+    if (EXISTS ${QT_BINARY_DIR}/${qtname}.dll)
+      set(QT_DLLS ${QT_DLLS} ${QT_BINARY_DIR}/${qtname}.dll)
+    else ()
+      message(STATUS "${qtname} has no dll.")
+    endif ()
+  endforeach ()
+endif ()
+
+# Print results
+SciPrintCMakeResults(QT)
+SciPrintVar(QT_LIBS)
+SciPrintVar(QT_QMAKE_EXECUTABLE)
+SciPrintVar(QT_MOC_EXECUTABLE)
+SciPrintVar(QT_UIC_EXECUTABLE)
+
+message("--------- FindSciQt4 done with Qt4 -----------")
+message("")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciSimD.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciSimD.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciSimD.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciSimD.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+# - FindSciSimD: Module to find include directories and libraries for
+#   SimD. This module was implemented as there is no stock CMake
+#   module for SimD. This is currently being used by QuIDS project.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciSimD REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_SIMD         = Whether have the SimD library
+#  SimD_INCLUDE_DIRS = Location of SimD includes
+#  SimD_LIBRARY_DIRS = Location of SimD libraries
+#  SimD_LIBRARIES    = Required libraries, libSimD
+
+######################################################################
+#
+# FindSciSimD: find includes and libraries for Simd.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "SimD"
+              INSTALL_DIR "simd"
+              HEADERS "dds"
+              LIBRARIES "SimD"
+              )
+
+if (SIMD_FOUND)
+  message(STATUS "Found SimD")
+  set(HAVE_SIMD 1 CACHE BOOL "Whether have the SIMD library")
+else ()
+  message(STATUS "Did not find SimD.  Use -DSIMD_DIR to specify the installation directory.")
+  if (SciSimD_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciSowing.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciSowing.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciSowing.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciSowing.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,36 @@
+# - FindSciSowing: Module to find sowing
+#
+# Module usage:
+#   find_package(SciSowing ...)
+#
+# This module will define the following variables:
+#  SOWING_FOUND         = Whether Sowing was found
+#  Sowing_sowing    = Path to sowing executables
+
+######################################################################
+#
+# SciSowing: Find Sowing
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+message("")
+message("--------- FindSciSowing looking for sowing ---------")
+
+SciFindPackage(PACKAGE Sowing
+  PROGRAMS "bfort"
+)
+
+if (SOWING_FOUND)
+      message(STATUS "Sowing_sowing found.")
+      message(STATUS "Sowing_sowing = ${Sowing_sowing}")
+      get_filename_component(sdir ${Sowing_PROGRAMS}/../.. REALPATH)
+      set(Sowing_ROOT_DIR ${sdir})
+      SciPrintVar(Sowing_ROOT_DIR)
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciSphinx.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciSphinx.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciSphinx.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciSphinx.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,46 @@
+# - FindSciSphinx: This module looks for Sphinx binary
+# Sphinx is a documentation generation tool.  Please see
+# http://www.sphinx.org
+#
+# This modules defines the following variables:
+#
+#   Sphinx_EXECUTABLE     = The path to the sphinx command.
+#   SPHINX_FOUND          = Was Sphinx found or not?
+#
+
+#################################################################
+# Find Sphinx...
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+#################################################################
+
+if (WIN32)
+  set(sfxs Scripts)
+else ()
+  set(sfxs bin)
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "Looking for sphinx-build with SUPRA_SEARCH_PATH = ${SUPRA_SEARCH_PATH} and sfxs = ${sfxs}.")
+endif ()
+find_program(Sphinx_EXECUTABLE
+  sphinx-build
+  PATHS ${SUPRA_SEARCH_PATH}
+  PATH_SUFFIXES ${sfxs}
+)
+if (Sphinx_EXECUTABLE)
+  set(SPHINX_FOUND 1 CACHE BOOL "Found Sphinx binary")
+  message(STATUS "Sphinx_EXECUTABLE found.")
+  message(STATUS "Sphinx_EXECUTABLE  = ${Sphinx_EXECUTABLE}")
+else ()
+  message(STATUS "Sphinx_EXECUTABLE NOT found.")
+endif ()
+
+# Enable setting an option
+# The -d flag sets the cache directory to be non-hidden
+set(Sphinx_OPTS      "" CACHE STRING "Options to be passed to the sphinx executable")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciSquish.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciSquish.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciSquish.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciSquish.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,40 @@
+# - FindSciSquish: Module to find executables and libraries
+#   for Squish. A stock CMake FindSquish.cmake does exist but
+#   is supported only for Squish version 3.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciSquish REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_SQUISH         = Whether have the Squish library
+#  Squish_PROGRAMS = Location of Squish executables
+#  Squish_LIBRARY_DIRS = Location of Squish libraries
+#  Squish_LIBRARIES    = Required libraries
+
+######################################################################
+#
+# SciFindSquish: find includes and libraries for Squish.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "Squish"
+              INSTALL_DIR "squish"
+              FILES ".squish-3-license"
+              PROGRAMS "squishrunner;squishserver;nchcompare"
+              LIBRARIES "squishqtpre"
+)
+
+if (SQUISH_FOUND)
+  message(STATUS "Found Squish")
+  set(HAVE_SQUISH 1 CACHE BOOL "Whether have the SQUISH package")
+else ()
+  message(STATUS "Did not find Squish.  Use -DSQUISH_DIR to specify the installation directory.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciSuperlu.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciSuperlu.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciSuperlu.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciSuperlu.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,107 @@
+# - FindSciSuperlu: Module to find include directories and libraries
+#   for Superlu. This module was implemented as there is no stock
+#   CMake module for Superlu.
+#
+#   This handles the fact that if ENABLE_PARALLEL is set, we are looking
+#   for superlu_dist, whereas serial is just superlu.  Specifically,
+#   bilder will link the packages as:
+#     $INSTALL_DIR/superlu
+#     $INSTALL_DIR/superlu-sersh
+#     $INSTALL_DIR/superlu_dist-par
+#     $INSTALL_DIR/superlu_dist-parcomm
+#     $INSTALL_DIR/superlu_dist-parcommsh
+#     $INSTALL_DIR/superlu_dist-parsh
+#   where comm denotes "commercial builds"; i.e., builds that are free
+#   of GPL code
+#   The default is to grab superlu or superlu_dist based on whether
+#   ENABLE_PARALLEL is set.  To choose another, use SUPERLU_FIND_VERSION
+#   which will search for
+#      superlu${SUPERLU_FIND_VERSION} or
+#      superlu_dist${SUPERLU_FIND_VERSION}
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciSuperlu REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_SUPERLU         = Whether have the Superlu library
+#  Superlu_INCLUDE_DIRS = Location of Superlu includes
+#  Superlu_LIBRARY_DIRS = Location of Superlu libraries
+#  Superlu_LIBRARIES    = Required libraries
+#  Superlu_STLIBS       = Location of Superlu static library
+
+######################################################################
+#
+# SciFindSuperlu: find includes and libraries for Superlu.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+if (WIN32)
+  set(SUPERLU_LIB_PREFIX "")
+else (WIN32)
+  set(SUPERLU_LIB_PREFIX "lib")
+endif (WIN32)
+
+if (WIN32)
+  set(SUPERLU_LIB_SUFFIX "lib")
+else (WIN32)
+  set(SUPERLU_LIB_SUFFIX "a")
+endif (WIN32)
+
+if (DEFINED SUPERLU_FIND_VERSION)
+  if (ENABLE_PARALLEL)
+    set(Superlu_SEARCH "superlu_dist${SUPERLU_FIND_VERSION}")
+  else ()
+    set(Superlu_SEARCH "superlu${SUPERLU_FIND_VERSION}")
+  endif ()
+else ()
+  if (ENABLE_PARALLEL)
+    set(Superlu_SEARCH "superlu_dist-par")
+  else ()
+    set(Superlu_SEARCH "superlu")
+  endif ()
+endif ()
+
+#
+#  Define what to search for
+#
+if (ENABLE_PARALLEL)
+  set(Superlu_MESSAGE_SEARCH "superlu_dist")
+  if (NOT DEFINED Superlu_SEARCH_HEADERS)
+    set(Superlu_SEARCH_HEADERS "superlu_defs.h;superlu_zdefs.h")
+  endif ()
+  if (NOT DEFINED Superlu_SEARCH_LIBS)
+    set(Superlu_SEARCH_LIBS "${SUPERLU_LIB_PREFIX}superlu_dist.${SUPERLU_LIB_SUFFIX}")
+  endif ()
+else ()
+  set(Superlu_MESSAGE_SEARCH "superlu")
+  if (NOT DEFINED Superlu_SEARCH_HEADERS)
+    set(Superlu_SEARCH_HEADERS "slu_util.h;slu_cdefs.h")
+  endif ()
+  if (NOT DEFINED Superlu_SEARCH_LIBS)
+    set(Superlu_SEARCH_LIBS "${SUPERLU_LIB_PREFIX}superlu.${SUPERLU_LIB_SUFFIX}")
+  endif ()
+endif ()
+
+SciFindPackage(PACKAGE "Superlu"
+              INSTALL_DIR ${Superlu_SEARCH}
+              HEADERS  ${Superlu_SEARCH_HEADERS}
+              LIBRARIES ${Superlu_SEARCH_LIBS}
+              )
+
+if (SUPERLU_FOUND)
+  message(STATUS "Found ${Superlu_MESSAGE_SEARCH}")
+  set(HAVE_SUPERLU 1 CACHE BOOL "Whether have the ${Superlu_MESSAGE_SEARCH} library")
+else ()
+  message(STATUS "Did not find ${Superlu_MESSAGE_SEARCH}.  Use -DSuperlu_ROOT_DIR to specify the installation directory.")
+  if (SciSuperlu_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciSz.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciSz.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciSz.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciSz.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,45 @@
+# - FindSciSz: Module to find include directories and
+#   libraries for Sz.
+#
+# Module usage:
+#   find_package(SciSz ...)
+#
+# This module will define the following variables:
+#  HAVE_SZ, SZ_FOUND = Whether libraries and includes are found
+#  Sz_INCLUDE_DIRS       = Location of Sz includes
+#  Sz_LIBRARY_DIRS       = Location of Sz libraries
+#  Sz_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciSz: find includes and libraries for sz(compression)
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (CMAKE_Fortran_COMPILER_WORKS)
+  set(desiredmods sz)
+else ()
+  set(desiredmods)
+endif ()
+
+SciFindPackage(PACKAGE "Sz"
+  HEADERS "szlib.h"
+  LIBRARIES "sz"
+  MODULES ${desiredmods}
+)
+
+if (SZ_FOUND)
+  message(STATUS "Found SZ")
+  set(HAVE_SZ 1 CACHE BOOL "Whether have the sz(compression) library")
+else ()
+  if (SciSz_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciThrust.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciThrust.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciThrust.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciThrust.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,45 @@
+# - FindSciThrust: Module to find include directories and
+#   libraries for Thrust.
+#
+# Module usage:
+#   find_package(SciThrust ...)
+#
+# This module will define the following variables:
+#  HAVE_THRUST, THRUST_FOUND = Whether libraries and includes are found
+#  Thrust_INCLUDE_DIRS       = Location of Thrust includes
+#  Thrust_LIBRARY_DIRS       = Location of Thrust libraries
+#  Thrust_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciThrust: find includes and libraries for thrust
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciFindPackage(PACKAGE "Thrust"
+              INSTALL_DIR "thrust"
+              INSTALL_DIRS "."
+              HEADERS "device_vector.h"
+              PROGRAM_SUBDIRS "."
+              INCLUDE_SUBDIRS "."
+              LIBRARY_SUBDIRS "."
+              )
+
+if (THRUST_FOUND)
+  message("Found Thrust.")
+  set(HAVE_THRUST 1 CACHE BOOL "Whether have the Thrust library.")
+else ()
+  if (SciThrust_FIND_REQUIRED)
+    message(FATAL_ERROR "Thrust not found.  Install it or perhaps add -DTHRUST_DIR=<dir>")
+  else ()
+    message("Did not find Thrust. Thrust is located in CUDA 4.0+, but needed for CUDA 3.2.")
+    message("If using CUDA 3.2, consider adding -DTHRUST_DIR=<dir>")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciTranspbase.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciTranspbase.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciTranspbase.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciTranspbase.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,43 @@
+# - FindSciTranspbase: Module to find include directories and libraries
+#   for Transpbase. This module was implemented as there is no stock
+#   CMake module for Transpbase.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciTranspbase REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_TRANSPBASE         = Whether have the Transpbase library
+#  Transpbase_INCLUDE_DIRS = Location of Transpbase includes
+#  Transpbase_LIBRARY_DIRS = Location of Transpbase libraries
+#  Transpbase_LIBRARIES    = Required libraries
+#  Transpbase_STLIBS       = Location of Transpbase static library
+
+######################################################################
+#
+# FindSciTranspbase: find includes and libraries for Transpbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir transpbase-par)
+else ()
+  set(instdir transpbase)
+endif ()
+SciFindPackage(PACKAGE "Transpbase"
+  INSTALL_DIR "${instdir}"
+  HEADERS "transperror.h"
+  LIBRARIES "transpbase"
+  LIBRARY_SUBDIRS "lib/${Fortran_COMP_LIB_SUBDIR};lib"
+)
+
+if (TRANSPBASE_FOUND)
+  # message(STATUS "Found TRANSPBASE")
+  set(HAVE_TRANSPBASE 1 CACHE BOOL "Whether have the TRANSPBASE libraries")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciTrilinos.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciTrilinos.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciTrilinos.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciTrilinos.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,234 @@
+# - FindSciTrilinos: Module to find include directories and
+#   libraries for Trilinos.
+#
+# Module usage:
+#   find_package(SciTrilinos ...)
+#
+# If USE_TRILINOS_CONFIG_CMAKE is TRUE, use the supra-search-path
+# to find TrilinosConfig.cmake, include it, then translate to our
+# variable conventions:
+#
+# Otherwise use SciFindPackage.
+#
+# In either case, the following variables get defined.
+#
+# Trilinos_DIR          : root installation directory for Trilinos
+# Trilinos_PROGRAMS     : any Trilinos executables (empty for trilinos)
+# Trilinos_FILES        : any other files (empty for trilinos)
+# Trilinos_INCLUDE_DIRS : include directories needed for compiling C/C++
+# Trilinos_MODULE_DIRS  : include directories needed for compiling fortran
+# Trilinos_LIBFLAGS     : any flags (except rpath flags) needed for linking the
+#                         trilinos libraries
+# Trilinos_LIBRARY_DIRS : the directories containing the libraries
+# Trilinos_LIBRARY_NAMES: the base library names, no extensions, no prefix
+# Trilinos_LIBRARIES    : the full paths to the libraries
+# Trilinos_STLIBS       : the full paths to the static libs if found, otherwise
+#                         the same as in the above variable
+# Trilinos_TPL_LIBRARIES: third-party libraries needed for linking to Trilinos
+# Trilinos_SLU_LIBRARIES: libraries specific to SuperLU and SuperLU_Dist
+#
+# and separate those into
+#
+#  Trilinos_LINALG_LIBRARIES: the blas and lapack libraries used by Trilinos
+#  Trilinos_SYSTEM_LIBRARIES: any other system libraries needed to link Trilinos
+
+######################################################################
+#
+# FindSciTrilinos: find includes and libraries for Trilinos
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+if (TRILINOS_BUILD)
+ set(trilinosdir ${TRILINOS_BUILD})
+else ()
+if (ENABLE_PARALLEL)
+ set(trilinosdir trilinos-parcomm)
+else ()
+ set(trilinosdir trilinos-sercomm)
+endif ()
+endif ()
+
+# First get the config file
+SciFindPackage(PACKAGE "Trilinos"
+  INSTALL_DIR ${trilinosdir}
+  FIND_CONFIG_FILE
+  USE_CONFIG_FILE
+  NOPRINT
+  FIND_QUIETLY
+)
+
+# Cleanup and conform to scimake conventions
+if (Trilinos_INCLUDE_DIRS)
+  get_filename_component(Trilinos_INCLUDE_DIRS ${Trilinos_INCLUDE_DIRS} REALPATH)
+endif ()
+if (Trilinos_LIBRARY_DIRS)
+  get_filename_component(Trilinos_LIBRARY_DIRS ${Trilinos_LIBRARY_DIRS} REALPATH)
+endif ()
+set(Trilinos_LIBRARY_NAMES ${Trilinos_LIBRARIES})
+set(Trilinos_LIBRARIES)
+foreach (trilib ${Trilinos_LIBRARY_NAMES})
+  find_library(Trilinos_${trilib}_LIBRARY ${trilib}
+    PATHS ${Trilinos_LIBRARY_DIRS}
+    NO_DEFAULT_PATH
+  )
+  set(Trilinos_LIBRARIES ${Trilinos_LIBRARIES} ${Trilinos_${trilib}_LIBRARY})
+endforeach ()
+SciGetStaticLibs("${Trilinos_LIBRARIES}" Trilinos_STLIBS)
+
+# Print results
+SciPrintCMakeResults(Trilinos)
+
+if (TRILINOS_FOUND)
+# Should now have all standard variables plus Trilinos_TPL_LIBRARIES
+
+# Some options
+  option(HAVE_AMESOS "Trilinos Amesos Library" ON)
+  option(HAVE_EPETRAEXT "Trilinos Epetraext library" ON)
+  option(HAVE_TRILINOS "Trilinos libraries" ON)
+
+# Remove duplicates
+  if (Trilinos_TPL_LIBRARIES)
+    list(REVERSE Trilinos_TPL_LIBRARIES)
+    list(REMOVE_DUPLICATES Trilinos_TPL_LIBRARIES)
+    list(REVERSE Trilinos_TPL_LIBRARIES)
+  endif ()
+
+# Separate the third-party libraries into various groups, as only
+# some needed for linking
+  set(Trilinos_LINALG_LIBRARIES)
+  set(Trilinos_MPI_LIBRARIES)
+  set(Trilinos_SLU_LIBRARIES)
+  set(Trilinos_MUMPS_LIBRARIES)
+  set(Trilinos_SYSTEM_LIBRARIES)
+  set(Trilinos_WRAPPER_LIBRARIES)
+  set(Trilinos_USE_VENDOR_LINALG)
+  foreach (lib ${Trilinos_TPL_LIBRARIES})
+    get_filename_component(libname ${lib} NAME_WE)
+    if (${libname} MATCHES "blas$" OR ${libname} MATCHES "lapack$" OR
+        ${libname} MATCHES "acml$" OR ${libname} MATCHES "mkl" OR
+        ${libname} MATCHES "f2c$" OR ${libname} MATCHES "atlas$")
+      set(Trilinos_LINALG_LIBRARIES ${Trilinos_LINALG_LIBRARIES} ${lib})
+      list(REMOVE_ITEM Trilinos_TPL_LIBRARIES ${lib})
+      if (${libname} MATCHES "mkl")
+        set(Trilinos_USE_VENDOR_LINALG "mkl")
+      endif()
+      #set(Trilinos_USE_VENDOR_LINALG ${Trilinos_USE_VENDOR_LINALG} PARENT_SCOPE)
+# Cray wrappers include these, but needed for serial build.
+    elseif (${libname} MATCHES "sci_pgi" OR ${libname} MATCHES "sci_gnu" OR
+        ${libname} MATCHES "sci_intel")
+      set(Trilinos_LINALG_LIBRARIES ${Trilinos_LINALG_LIBRARIES} ${lib})
+    elseif (${libname} MATCHES "superlu$" OR ${libname} MATCHES "superlu_dist$")
+      set(Trilinos_SLU_LIBRARIES ${Trilinos_SLU_LIBRARIES} ${lib})
+    elseif (${libname} MATCHES "HYPRE$")
+      set(Trilinos_HYPRE_LIBRARIES ${Trilinos_HYPRE_LIBRARIES} ${lib})
+    elseif (${libname} MATCHES ".*mumps.*" OR ${libname} MATCHES "libpord")
+      set(Trilinos_MUMPS_LIBRARIES ${Trilinos_MUMPS_LIBRARIES} ${lib})
+    elseif (${libname} MATCHES "libseq")
+      set(Trilinos_MUMPS_LIBRARIES ${Trilinos_MUMPS_LIBRARIES} ${lib})
+    elseif (${libname} MATCHES "msmpi$")
+      set(Trilinos_MPI_LIBRARIES ${Trilinos_MPI_LIBRARIES} ${lib})
+    else ()
+      set(Trilinos_SYSTEM_LIBRARIES ${Trilinos_SYSTEM_LIBRARIES} ${lib})
+    endif ()
+  endforeach ()
+# If trilinos does not get the mumps scalapack, add it.
+  if (Trilinos_MUMPS_LIBRARIES)
+    list(GET Trilinos_MUMPS_LIBRARIES 0 mumpslib1)
+    get_filename_component(mumpslibdir ${mumpslib1} PATH)
+    list(FIND Trilinos_MUMPS_LIBRARIES ${mumpslibdir}/libscalapack.so idx)
+    if ((${idx} EQUAL -1) AND (EXISTS ${mumpslibdir}/libscalapack.so))
+      set(Trilinos_MUMPS_LIBRARIES ${Trilinos_MUMPS_LIBRARIES}
+        ${mumpslibdir}/libscalapack.so
+      )
+    endif ()
+  endif ()
+
+# Make sure mp library present on Cray
+  string(TOLOWER ${C_COMPILER_ID} cid)
+  list(FIND Trilinos_LINALG_LIBRARIES sci_${cid} idx)
+  if (${idx} EQUAL -1)
+    message(STATUS "sci_${cid} not found in Trilinos_LINALG_LIBRARIES.")
+  else ()
+    message(STATUS "sci_${cid} found at index ${idx} in Trilinos_LINALG_LIBRARIES.")
+    list(FIND Trilinos_LINALG_LIBRARIES sci_${cid}_mp jdx)
+    if (${jdx} EQUAL -1)
+      message(WARNING "Trilinos_LINALG_LIBRARIES contains sci_${cid} but not sci_${cid}_mp.  Appending.")
+      list(APPEND Trilinos_LINALG_LIBRARIES sci_${cid}_mp)
+    endif ()
+  endif ()
+
+# Find the libdirs of all groups
+  foreach (grp TPL LINALG SLU HYPRE MUMPS MPI SYSTEM)
+    set(libs ${Trilinos_${grp}_LIBRARIES})
+    unset(Trilinos_${grp}_LIBRARY_DIRS)
+    unset(Trilinos_${grp}_LIBRARY_NAMES)
+    foreach (lib ${libs})
+      get_filename_component(libdir ${lib}/.. REALPATH)
+      list(APPEND Trilinos_${grp}_LIBRARY_DIRS ${libdir})
+      get_filename_component(libname ${lib} NAME_WE)
+      string(REGEX REPLACE "^lib" "" libname ${libname})
+      list(APPEND Trilinos_${grp}_LIBRARY_NAMES ${libname})
+    endforeach ()
+    if (Trilinos_${grp}_LIBRARY_DIRS)
+      list(REMOVE_DUPLICATES Trilinos_${grp}_LIBRARY_DIRS)
+    endif ()
+  endforeach ()
+
+# For windows only, find f2c
+  find_library(F2C_LIBRARY f2c PATHS ${Trilinos_LINALG_LIBRARY_DIRS} NO_DEFAULT_PATH)
+  message(STATUS "F2C_LIBRARY = ${F2C_LIBRARY}.")
+  if (${F2C_LIBRARY} MATCHES "/usr/lib")
+    message (STATUS "System f2c library, ${F2C_LIBRARY}, found.  Unsetting.")
+    set(F2C_LIBRARY "")
+  endif ()
+  message(STATUS "F2C_LIBRARY = ${F2C_LIBRARY}.")
+  if (F2C_LIBRARY)
+    message(STATUS "  F2C_LIBRARY = ${F2C_LIBRARY}.")
+# In this case, we need the clapack_cmake blas as well
+    get_filename_component(libdir ${F2C_LIBRARY}/.. REALPATH)
+    find_library(BLAS_LIBRARY blas PATHS ${libdir} NO_DEFAULT_PATH)
+    if (BLAS_LIBRARY)
+      message(STATUS "  BLAS_LIBRARY found.")
+      set(Trilinos_TPL_LIBRARIES ${Trilinos_TPL_LIBRARIES} ${BLAS_LIBRARY})
+      set(Trilinos_LINALG_LIBRARIES ${Trilinos_LINALG_LIBRARIES}
+          ${BLAS_LIBRARY})
+    else ()
+      message(STATUS "  BLAS_LIBRARY not found.")
+    endif ()
+    set(Trilinos_TPL_LIBRARIES ${Trilinos_TPL_LIBRARIES} ${F2C_LIBRARY})
+    set(Trilinos_LINALG_LIBRARIES ${Trilinos_LINALG_LIBRARIES} ${F2C_LIBRARY})
+  else ()
+    message(STATUS "  F2C_LIBRARY not found.")
+  endif ()
+
+# IF Trilinos_LINALG_LIBRARY_NAMES contains blas but not lapack, warn.
+  list(FIND Trilinos_LINALG_LIBRARY_NAMES blas indx)
+  if (NOT ${indx} EQUAL -1)
+    list(FIND Trilinos_LINALG_LIBRARY_NAMES lapack indx)
+    if (${indx} EQUAL -1)
+      message(WARNING "Trilinos_LINALG_LIBRARY_NAMES contains blas but not lapack.  Fixing.")
+    endif ()
+  else ()
+    message(WARNING "Trilinos_LINALG_LIBRARY_NAMES does not contain blas.")
+  endif ()
+
+# Get static libs and print
+  foreach (grp TPL LINALG MPI SLU HYPRE MUMPS SYSTEM WRAPPER)
+    SciGetStaticLibs("${Trilinos_${grp}_LIBRARIES}" Trilinos_${grp}_STLIBS)
+    SciPrintVar(Trilinos_${grp}_LIBRARY_DIRS)
+    SciPrintVar(Trilinos_${grp}_LIBRARY_NAMES)
+    SciPrintVar(Trilinos_${grp}_LIBRARIES)
+    SciPrintVar(Trilinos_${grp}_STLIBS)
+  endforeach ()
+
+else ()
+
+  message(STATUS "Did not find Trilinos. Use -DTrilinos_ROOT_DIR to specify the installation directory.")
+
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciTxBase.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciTxBase.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciTxBase.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciTxBase.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,57 @@
+# - FindTxBase: Module to find include directories and
+#   libraries for TxBase.
+#
+# Module usage:
+#   find_package(SciTxBase ...)
+#
+# This module will define the following variables:
+#  HAVE_TXBASE, TXBASE_FOUND = Whether libraries and includes are found
+#  TxBase_INCLUDE_DIRS       = Location of TxBase includes
+#  TxBase_LIBRARY_DIRS       = Location of TxBase libraries
+#  TxBase_LIBRARIES          = Required libraries
+#
+# ========= ========= ========= ========= ========= ========= ==========
+#
+# Variables used by this module, which can be set before calling find_package
+# to influence default behavior
+#
+# TxBase_ROOT_DIR          Specifies the root dir of the TxBase installation
+#
+
+######################################################################
+#
+# FindTxBase: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (NOT_HAVE_STD_ABS_DOUBLE)
+  set(txbasefindlibs txbase txstd)
+else ()
+  set(txbasefindlibs txbase)
+endif ()
+
+SciGetInstSubdirs(txbase instdirs)
+
+SciFindPackage(PACKAGE "TxBase"
+  INSTALL_DIRS ${instdirs}
+  HEADERS "txbase_version.h"
+  LIBRARIES "${txbasefindlibs}"
+  LIBRARY_SUBDIRS lib/${CXX_COMP_LIB_SUBDIR} lib
+)
+
+if (TXBASE_FOUND)
+  # message(STATUS "Found TxBase.")
+  set(HAVE_TXBASE 1 CACHE BOOL "Whether have TxBase library")
+else ()
+  message(STATUS "Did not find TxBase.  Use -DTXBASE_ROOT_DIR to specify the installation directory.")
+  if (SciTxBase_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciTxPhysics.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciTxPhysics.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciTxPhysics.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciTxPhysics.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,56 @@
+# - FindSciTxPhysics: Module to find include directories and
+#   libraries for Physics.
+#
+# Module usage:
+#   find_package(SciTxPhysics ...)
+#
+# This module will define the following variables:
+#  HAVE_TXPHYSICS, TXPHYSICS_FOUND = Whether libraries and includes are found
+#  TxPhysics_INCLUDE_DIRS       = Location of Physics includes
+#  TxPhysics_LIBRARY_DIRS       = Location of Physics libraries
+#  TxPhysics_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciTxPhysics: find includes and libraries for txbase
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+option(ENABLE_TXPHYSICS "Whether to enable TxPhysics" ON)
+if (WIN32)
+  set(txphysics_statlib txphysics.lib)
+else ()
+  set(txphysics_statlib libtxphysics.a)
+endif ()
+
+if (ENABLE_TXPHYSICS)
+  if (HAVE_MPI)
+    SciFindPackage(PACKAGE "TxPhysics"
+      INSTALL_DIRS "txphysics-ben;txphysics"
+      HEADERS "txphysics_version.h"
+      LIBRARIES "${txphysics_statlib}"
+    )
+  else ()
+    SciFindPackage(PACKAGE "TxPhysics"
+      HEADERS "txphysics_version.h"
+      LIBRARIES "${txphysics_statlib}"
+    )
+  endif ()
+endif ()
+
+if (TXPHYSICS_FOUND)
+  # message(STATUS "Found TxPhysics.")
+  set(HAVE_TXPHYSICS 1 CACHE BOOL "Whether have the TxPhysics library")
+else ()
+  message(WARNING "Did not find TxPhysics.  Use -DTXPHYSICS_DIR to specify the installation directory.")
+  if (TxPhysics_FIND_REQUIRED)
+    message(FATAL_ERROR "Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciTxPLAPACK.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciTxPLAPACK.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciTxPLAPACK.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciTxPLAPACK.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,49 @@
+# - FindSciTxPLAPACK: Module to find include directories and
+#   libraries for TxPLAPACK.
+#
+# Module usage:
+#   find_package(SciTxPLAPACK ...)
+#
+# This module will define the following variables:
+#  HAVE_TXPLAPACK, TXPLAPACK_FOUND = Whether libraries and includes are found
+#  TxPLAPACK_INCLUDE_DIRS       = Location of Gpulib includes
+#  TxPLAPACK_LIBRARY_DIRS       = Location of Gpulib libraries
+#  TxPLAPACK_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciTxPLAPACK.cmake: Find the TxPLAPACK libraries
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (BUILD_WITH_SHARED_RUNTIME)
+  set(instdirs txplapack-parsh)
+else ()
+  set(instdirs txplapack-par)
+endif ()
+
+SciFindPackage(
+           PACKAGE "TxPLAPACK"
+           INSTALL_DIR ${instdirs}
+           HEADERS "txplapack_version.h"
+           INCLUDE_SUBDIRS include
+           LIBRARIES "txplapack"
+           LIBRARY_SUBDIRS "lib/${CXX_COMP_LIB_SUBDIR};lib"
+           )
+
+if (TXPLAPACK_FOUND)
+  message(STATUS "Found txplapack")
+  set(HAVE_TXPLAPACK 1 CACHE BOOL "Whether have txplapack")
+else ()
+  message(STATUS "Did not find txplapack.  Use -DTXPLAPACK_DIR to specify the installation directory.")
+  if (TxPLAPACK_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciUedge.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciUedge.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciUedge.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciUedge.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,64 @@
+# - FindSciUedge: Module to find include directories and
+#   libraries for Uedge
+#
+# Module usage:
+#   find_package(SciUedge ...)
+#
+# This module will define the following variables:
+#  HAVE_UEDGE, UEDGE_FOUND = Whether libraries and includes are found
+#  Uedge_INCLUDE_DIRS       = Location of Polyswift includes
+#  Uedge_LIBRARY_DIRS       = Location of Polyswift libraries
+#  Uedge_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# FindSciUedge: find includes and libraries for UEDGE
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (ENABLE_PARALLEL)
+  set(instdir uedge-par)
+else ()
+  set(instdir uedge)
+endif ()
+
+# Find shared libs
+SciFindPackage(PACKAGE "UedgeShared"
+  INSTALL_DIR "${instdir}"
+  HEADERS "UedgeIfc.h"
+  INCLUDE_SUBDIRS "include;uebase"
+  LIBRARIES "uecxxpy;uecxxpycli"
+  LIBRARY_SUBDIRS "lib;uecxxpy"
+)
+if (UEDGESHARED_FOUND)
+  set(HAVE_UEDGE_SHARED 1 CACHE BOOL "Whether have the UEDGE_SHARED library")
+endif ()
+
+# Find static libs
+SciFindPackage(PACKAGE "UedgeStatic"
+  INSTALL_DIR "${instdir}"
+  HEADERS "UedgeIfc.h"
+  INCLUDE_SUBDIRS "include;uebase"
+  LIBRARIES "uecxxst;uestat"
+  LIBRARY_SUBDIRS "lib;uecxxst;uestat"
+)
+if (UEDGESTATIC_FOUND)
+  set(HAVE_UEDGE_STATIC 1 CACHE BOOL "Whether have the UEDGE_STATIC library")
+endif ()
+# Make sure these are static
+SciGetStaticLibs("${UedgeStatic_LIBRARIES}" UedgeStatic_LIBRARIES)
+
+# Combined parameters
+if (UEDGESHARED_FOUND OR UEDGESTATIC_FOUND)
+  set(HAVE_ANY_UEDGE 1 CACHE BOOL "Whether have any UEDGE library")
+endif ()
+if (UEDGESHARED_FOUND AND UEDGESTATIC_FOUND)
+  set(HAVE_BOTH_UEDGE 1 CACHE BOOL "Whether have both UEDGE libraries")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciVisIt.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciVisIt.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciVisIt.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciVisIt.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,343 @@
+# - FindSciVisIt: Module to find include directories and
+#   libraries for VisIt.
+#
+# Module usage:
+#   find_package(SciVisIt ...)
+#
+# This module will define the following variables:
+#  HAVE_VISIT, VISIT_FOUND = Whether libraries and includes are found
+#  VisIt_INCLUDE_DIRS       = Location of VisIt includes
+#  VisIt_LIBRARY_DIRS       = Location of VisIt libraries
+#  VisIt_LIBRARIES          = Required libraries
+
+#################################################
+#
+# Find module for VisIt includes and libs from VisIt
+#
+# $Rev: 1135 $ $Date: 2017-02-18 11:19:28 -0700 (Sat, 18 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+#################################################
+
+# Make a list of library names
+if (WIN32)
+  set(VisIt_DIFF_LIBS enginelib_ser guilib viewerlib)
+else ()
+  set(VisIt_DIFF_LIBS engine_ser gui viewer)
+endif ()
+
+# Libraries that are only required to support the volume plot
+set(VisIt_VOLUME_LIBS
+  air
+  alan
+  biff
+  dye
+  ell
+  gage
+  hest
+  moss
+  nrrd
+  slivrG
+  slivrV
+  unrrdu
+)
+
+set(VisIt_LIBRARY_NAMES_SEARCHED
+  ${VisIt_DIFF_LIBS}
+  ${VisIt_VOLUME_LIBS}
+  visitGLEW
+  avtdatabase_ser
+  avtdbatts
+  avtdbin_ser
+  avtexpressions_ser
+  avtfilters_ser
+  avtivp
+  avtmath
+  avtmir_ser
+  avtpipeline_ser
+  avtplotter_ser
+  avtpythonfilters_ser
+  avtqtviswindow
+  avtquery_ser
+  avtshapelets
+  avtview
+  avtviswindow_ser
+  avtwriter_ser
+  bow
+  engineproxy
+  enginerpc
+  lightweight_visit_vtk
+  mdserverproxy
+  mdserverrpc
+  tess2
+  vclproxy
+  vclrpc
+  viewerproxy
+  viewerrpc
+  visit_verdict
+  visit_vtk
+  visitcommon
+  visitpy
+  vtkqt
+  winutil
+)
+
+set(VisIt_SUBDIRS
+  allhosts databases help movietemplates operators
+  plots translations ultrawrapper
+)
+
+if (WIN32)
+  set(VisIt_EXES
+    engine_ser.exe vcl.exe mdserver.exe text2polys.exe
+    visitconvert_ser.exe time_annotation.exe visitprotocol.exe
+    mpeg2encode.exe visit_composite.exe qtssh.exe
+    visit_transition.exe
+  )
+endif ()
+
+# Installing VisIt from the package is not working on Windows, so
+# ... So what?  What's the rest of this comment?
+if (WIN32)
+  set(VisIt_INC_SUBDIR include/visit/vtkqt)
+  set(VisIt_LIB_SUBDIR lib)
+else ()
+  # VisIt_ARCH is required on Mac and Linux
+  # if it isn't set, try to set it
+  if (NOT VisIt_ARCH)
+    if (EXISTS "${CMAKE_SOURCE_DIR}/scimake/DetermineVisItArchitecture.cmake")
+      include("${CMAKE_SOURCE_DIR}/scimake/DetermineVisItArchitecture.cmake")
+      DETERMINE_VisIt_ARCHITECTURE(VisIt_ARCH)
+    endif ()
+    if (VisIt_ARCH)
+      message(STATUS "VisIt_ARCH is ${VisIt_ARCH}")
+    else ()
+      message(STATUS "Unable to determine VisIt_ARCH.")
+      message(STATUS "Please specify on the command line with -DVisIt_ARCH=")
+      if (SciVisIt_FIND_REQUIRED)
+        message(FATAL_ERROR "FindVisIt script will not operate correctly.  Failing.")
+      endif ()
+    endif ()
+  endif ()
+  set(VisIt_INC_SUBDIR current/${VisIt_ARCH}/include/visit/vtkqt)
+  set(VisIt_LIB_SUBDIR current/${VisIt_ARCH}/lib)
+endif ()
+
+# Call SciFindPackage
+# With some tricks
+# Note that although we want to find the base VisIt include dir,
+# there are no headers in that directory.  So we search for the
+# vtkqt include directory, and then derive the base include dir.
+# Should not set the below, as then how will we ever find visit_trunk?
+# set(VisIt_INST_SUBDIR visit)
+if (NOT VisIt_INSTALL_DIRS)
+  set(VisIt_INSTALL_DIRS visit-pycsh visit-sersh visit)
+endif ()
+SciFindPackage(PACKAGE VisIt
+  INSTALL_DIRS ${VisIt_INSTALL_DIRS}
+  HEADERS vtkQtRenderWindow.h
+  LIBRARIES ${VisIt_LIBRARY_NAMES_SEARCHED} OPTIONAL
+  INCLUDE_SUBDIRS "${VisIt_INC_SUBDIR}"
+  LIBRARY_SUBDIRS "${VisIt_LIB_SUBDIR}"
+)
+if (VISIT_FOUND)
+  message("First search located VisIt.")
+else ()
+  message("First search did not locate VisIt.  Trying second.")
+  set(VisIt_INST_SUBDIR visit2)
+  SciFindPackage(PACKAGE VisIt
+    INSTALL_DIR "${VisIt_INST_SUBDIR}"
+    HEADERS vtkQtRenderWindow.h
+    LIBRARIES "${VisIt_LIBRARY_NAMES_SEARCHED}"
+    INCLUDE_SUBDIRS "${VisIt_INC_SUBDIR}"
+    LIBRARY_SUBDIRS "${VisIt_LIB_SUBDIR}"
+  )
+  if (VISIT_FOUND)
+    message("Second search located VisIt.")
+  endif ()
+endif ()
+
+# Look for the root of the VisIt install and the architecture dir
+if (VISIT_FOUND)
+# VisIt_ROOT_DIR is the ROOT of the VisIt installation, NOT the bin dir
+  if (WIN32)
+    get_filename_component(VisIt_ROOT_DIR
+      "${VisIt_vtkQtRenderWindow_h_INCLUDE_DIR}/../../../" REALPATH)
+  else ()
+    get_filename_component(VisIt_ROOT_DIR
+      "${VisIt_vtkQtRenderWindow_h_INCLUDE_DIR}/../../../../../" REALPATH)
+  endif ()
+  message(STATUS "VisIt_ROOT_DIR is ${VisIt_ROOT_DIR}")
+endif ()
+if (WIN32)
+  set(VisIt_ARCH_DIR ${VisIt_ROOT_DIR})
+  set(VisIt_ARCH_SUBDIR)
+else ()
+  get_filename_component(VisIt_ARCH_DIR
+    ${VisIt_ROOT_DIR}/current/${VisIt_ARCH} REALPATH)
+  get_filename_component(VisIt_VERSION_DIR ${VisIt_ARCH_DIR}/.. REALPATH)
+  get_filename_component(VisIt_VERSION ${VisIt_VERSION_DIR} NAME)
+  set(VisIt_ARCH_SUBDIR ${VisIt_VERSION}/${VisIt_ARCH})
+endif ()
+message(STATUS "VisIt_ARCH_DIR = ${VisIt_ARCH_DIR}")
+message(STATUS "VisIt_ARCH_SUBDIR = ${VisIt_ARCH_SUBDIR}.")
+message(STATUS "VisIt_VERSION = ${VisIt_VERSION}.")
+
+# Find the remaining directories
+if (VISIT_FOUND)
+
+  message(STATUS "Found VisIt")
+  get_filename_component(VisIt_INCLUDE_DIR "${VisIt_vtkQtRenderWindow_h_INCLUDE_DIR}/.." REALPATH)
+  set(VisIt_INCLUDE_DIRS
+    ${VisIt_INCLUDE_DIR}/
+    ${VisIt_INCLUDE_DIR}/avt/Database/Database
+    ${VisIt_INCLUDE_DIR}/avt/Database/Formats
+    ${VisIt_INCLUDE_DIR}/avt/Database/Ghost
+    ${VisIt_INCLUDE_DIR}/avt/DataBinning
+    ${VisIt_INCLUDE_DIR}/avt/DBAtts/MetaData
+    ${VisIt_INCLUDE_DIR}/avt/DBAtts/SIL
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/Abstract
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/CMFE
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/Conditional
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/Derivations
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/General
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/ImageProcessing
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/Management
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/Math
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/MeshQuality
+    ${VisIt_INCLUDE_DIR}/avt/Expressions/TimeIterators
+    ${VisIt_INCLUDE_DIR}/avt/FileWriter
+    ${VisIt_INCLUDE_DIR}/avt/Filters
+    ${VisIt_INCLUDE_DIR}/avt/IVP
+    ${VisIt_INCLUDE_DIR}/avt/Math
+    ${VisIt_INCLUDE_DIR}/avt/MIR/Base
+    ${VisIt_INCLUDE_DIR}/avt/MIR/Discrete
+    ${VisIt_INCLUDE_DIR}/avt/MIR/Tet
+    ${VisIt_INCLUDE_DIR}/avt/MIR/Youngs
+    ${VisIt_INCLUDE_DIR}/avt/MIR/Zoo
+    ${VisIt_INCLUDE_DIR}/avt/Pipeline/AbstractFilters
+    ${VisIt_INCLUDE_DIR}/avt/Pipeline/Data
+    ${VisIt_INCLUDE_DIR}/avt/Pipeline/Pipeline
+    ${VisIt_INCLUDE_DIR}/avt/Pipeline/Sinks
+    ${VisIt_INCLUDE_DIR}/avt/Pipeline/Sources
+    ${VisIt_INCLUDE_DIR}/avt/Plotter
+    ${VisIt_INCLUDE_DIR}/avt/Plotter/vtk
+    ${VisIt_INCLUDE_DIR}/avt/Preprocessor
+    ${VisIt_INCLUDE_DIR}/avt/PythonFilters
+    ${VisIt_INCLUDE_DIR}/avt/QtVisWindow
+    ${VisIt_INCLUDE_DIR}/avt/Queries/Abstract
+    ${VisIt_INCLUDE_DIR}/avt/Queries/Misc
+    ${VisIt_INCLUDE_DIR}/avt/Queries/Pick
+    ${VisIt_INCLUDE_DIR}/avt/Queries/Queries
+    ${VisIt_INCLUDE_DIR}/avt/Shapelets
+    ${VisIt_INCLUDE_DIR}/avt/View
+    ${VisIt_INCLUDE_DIR}/avt/VisWindow/Colleagues
+    ${VisIt_INCLUDE_DIR}/avt/VisWindow/Exceptions
+    ${VisIt_INCLUDE_DIR}/avt/VisWindow/Interactors
+    ${VisIt_INCLUDE_DIR}/avt/VisWindow/Proxies
+    ${VisIt_INCLUDE_DIR}/avt/VisWindow/Tools
+    ${VisIt_INCLUDE_DIR}/avt/VisWindow/VisWindow
+    ${VisIt_INCLUDE_DIR}/common/comm
+    ${VisIt_INCLUDE_DIR}/common/Exceptions/Database
+    ${VisIt_INCLUDE_DIR}/common/Exceptions/Pipeline
+    ${VisIt_INCLUDE_DIR}/common/Exceptions/Plotter
+    ${VisIt_INCLUDE_DIR}/common/expr
+    ${VisIt_INCLUDE_DIR}/common/misc
+    ${VisIt_INCLUDE_DIR}/common/parser
+    ${VisIt_INCLUDE_DIR}/common/plugin
+    ${VisIt_INCLUDE_DIR}/common/proxybase
+    ${VisIt_INCLUDE_DIR}/common/state
+    ${VisIt_INCLUDE_DIR}/common/utility
+    ${VisIt_INCLUDE_DIR}/engine/main
+    ${VisIt_INCLUDE_DIR}/engine/rpc
+    ${VisIt_INCLUDE_DIR}/gui
+    ${VisIt_INCLUDE_DIR}/gui/designer/QvisColorButton
+    ${VisIt_INCLUDE_DIR}/gui/designer/QvisDialogLineEditPlugin
+    ${VisIt_INCLUDE_DIR}/gui/designer/QvisSpectrumBarPlugin
+    ${VisIt_INCLUDE_DIR}/gui/designer/QvisVariableButtonPlugin
+    ${VisIt_INCLUDE_DIR}/include
+    ${VisIt_INCLUDE_DIR}/launcher/main
+    ${VisIt_INCLUDE_DIR}/launcher/proxy
+    ${VisIt_INCLUDE_DIR}/launcher/rpc
+    ${VisIt_INCLUDE_DIR}/mdserver/main
+    ${VisIt_INCLUDE_DIR}/mdserver/proxy
+    ${VisIt_INCLUDE_DIR}/mdserver/rpc
+    ${VisIt_INCLUDE_DIR}/viewer/core
+    ${VisIt_INCLUDE_DIR}/viewer/main
+    ${VisIt_INCLUDE_DIR}/viewer/proxy
+    ${VisIt_INCLUDE_DIR}/viewer/rpc
+    ${VisIt_INCLUDE_DIR}/visitpy/common
+    ${VisIt_INCLUDE_DIR}/visitpy/mpicom/src
+    ${VisIt_INCLUDE_DIR}/visitpy/visitpy
+    ${VisIt_INCLUDE_DIR}/visit_vtk/full
+    ${VisIt_INCLUDE_DIR}/visit_vtk/lightweight
+    ${VisIt_INCLUDE_DIR}/vtkqt
+    ${VisIt_INCLUDE_DIR}/winutil
+  )
+  set(VisIt_THIRDPARTY_INCLUDE_DIRS
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/bow
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/cognomen/src/cog
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/cognomen/src
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/glew/glew/include/GL
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/slivr
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/include
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/air
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/alan
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/bane
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/biff
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/coil
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/dye
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/echo
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/ell
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/gage
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/hest
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/hoover
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/limn
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/mite
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/moss
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/nrrd
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/push
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/teem
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/teem
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/ten
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/src/unrrdu
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/win32/include
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/slivr/teem-1.9.0-src/win32/src/pv
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tess2
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/3rdParty/bzip2
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/3rdParty/jpeglib
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/3rdParty/tiff
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/3rdParty/zlib
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Basics
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Controller
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/DebugOut
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/3rdParty/boost
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/3rdParty/bzip2
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/3rdParty/tiff
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/3rdParty/zlib
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/DICOM
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/Images
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/IO/UVF
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Renderer
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Renderer/DX
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Renderer/GL
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Renderer/GPUMemMan
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok/Scripting
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok/tuvok
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/tuvok
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/verdict
+    ${VisIt_INCLUDE_DIR}/third_party_builtin/zlib
+  )
+
+else ()
+
+  message(STATUS "VisIt not found, set VisIt_ROOT_DIR to the location of the VISIT installation.")
+  if (SciVisIt_FIND_REQUIRED)
+    message(FATAL_ERROR "Failing.")
+  endif ()
+
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciVsreader.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciVsreader.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciVsreader.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciVsreader.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,73 @@
+# - FindSciVsreader: Module to find include directories and libraries
+#   for Vsreader, VizSchema read-write library. This module was
+#   implemented as there is no stock CMake module for Vsreader.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciVsreader REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_VSREADER         = Whether have the Vsreader library
+#  Vsreader_INCLUDE_DIRS = Location of Vsreader includes
+#  Vsreader_LIBRARY_DIRS = Location of Vsreader libraries
+#  Vsreader_LIBRARIES    = Required libraries
+#  Vsreader_STLIBS       = Location of Vsreader static library
+
+######################################################################
+#
+# SciFindVsreader: find includes and libraries for Vsreader.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# only serial
+# set(instdirs vsreader)
+
+set(desiredlibs
+    vsreader_static)
+
+set(desiredheaders
+    VsApi.h
+    VsAttribute.h
+    VsDataset.h
+    VsFile.h
+    VsFilter.h
+    VsGroup.h
+    VsLog.h
+    VsMDMesh.h
+    VsMDVariable.h
+    VsMesh.h
+    VsObject.h
+    VsReader.h
+    VsRectilinearMesh.h
+    VsRegistry.h
+    VsRegistryObject.h
+    VsSchema.h
+    VsStaggeredField.h
+    VsStructuredMesh.h
+    VsUniformMesh.h
+    VsUnstructuredMesh.h
+    VsUtils.h
+    VsVariable.h
+    VsVariableWithMesh.h)
+
+SciFindPackage(PACKAGE "Vsreader"
+  # INSTALL_DIR ${instdirs} # Now done by SciFindPackage
+  HEADERS ${desiredheaders}
+  LIBRARIES ${desiredlibs}
+)
+
+if (VSREADER_FOUND)
+  message(STATUS "Found Vsreader")
+  set(HAVE_VSREADER 1 CACHE BOOL "Whether have the Vsreader library")
+else ()
+  message(STATUS "Did not find Vsreader.  Use -DVsreader_ROOT_DIR to specify the installation directory.")
+  if (SciVsreader_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciVsrw.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciVsrw.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciVsrw.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciVsrw.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,70 @@
+# - FindSciVsrw: Module to find include directories and libraries
+#   for Vsrw, VizSchema read-write library. This module was
+#   implemented as there is no stock CMake module for Vsrw.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciVsrw REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_VSRW         = Whether have the Vsrw library
+#  Vsrw_INCLUDE_DIRS = Location of Vsrw includes
+#  Vsrw_LIBRARY_DIRS = Location of Vsrw libraries
+#  Vsrw_LIBRARIES    = Required libraries
+#  Vsrw_STLIBS       = Location of Vsrw static library
+
+######################################################################
+#
+# SciFindVsrw: find includes and libraries for Vsrw.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# only serial
+set(instdirs vsrw)
+
+set(desiredlibs vsrw)
+set(desiredheaders
+    VsApi.h
+    VsAttribute.h
+    VsDataset.h
+    VsFile.h
+    VsFilter.h
+    VsGroup.h
+    VsLog.h
+    VsMDMesh.h
+    VsMDVariable.h
+    VsMesh.h
+    VsObject.h
+    VsReader.h
+    VsRectilinearMesh.h
+    VsRegistry.h
+    VsRegistryObject.h
+    VsSchema.h
+    VsStaggeredField.h
+    VsStructuredMesh.h
+    VsUniformMesh.h
+    VsUnstructuredMesh.h
+    VsUtils.h
+    VsVariable.h
+    VsVariableWithMesh.h)
+SciFindPackage(PACKAGE "Vsrw"
+  INSTALL_DIR ${instdirs}
+  HEADERS ${desiredheaders}
+  LIBRARIES ${desiredlibs}
+)
+
+if (VSRW_FOUND)
+  message(STATUS "Found Vsrw")
+  set(HAVE_VSRW 1 CACHE BOOL "Whether have the Vsrw library")
+else ()
+  message(STATUS "Did not find Vsrw.  Use -DVSRW_DIR to specify the installation directory.")
+  if (SciVsrw_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciVtk500i.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciVtk500i.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciVtk500i.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciVtk500i.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,77 @@
+# - FindSciVtk: Module to find include directories and
+#   libraries for Vtk.
+#
+# Module usage:
+#   find_package(SciVtk ...)
+#
+# This module will define the following variables:
+#  HAVE_VTK, VTK_FOUND = Whether libraries and includes are found
+#  Vtk_INCLUDE_DIRS       = Location of Vtk includes
+#  Vtk_LIBRARY_DIRS       = Location of Vtk libraries
+#  Vtk_LIBRARIES          = Required libraries
+
+##################################################################
+#
+# Find module for VTK
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+##################################################################
+
+set(Vtk_LIBRARY_LIST
+        vtkCommon
+        vtkCommonPythonD
+        vtkDICOMParser
+        vtkFiltering
+        vtkFilteringPythonD
+        vtkGenericFiltering
+        vtkGenericFilteringPythonD
+        vtkGraphics
+        vtkGraphicsPythonD
+        vtkHybrid
+        vtkHybridPythonD
+        vtkIO
+        vtkIOPythonD
+        vtkImaging
+        vtkImagingPythonD
+        vtkPythonCore
+        vtkRendering
+        vtkRenderingPythonD
+        vtkVolumeRendering
+        vtkVolumeRenderingPythonD
+        vtkexpat
+        vtkfreetype
+        vtkftgl
+        vtkjpeg
+        vtkpng
+        vtksqlite
+        vtksys
+        vtktiff
+        vtkverdict
+        vtkzlib
+)
+
+SciFindPackage(
+  PACKAGE Vtk
+  INSTALL_DIR vtk
+  HEADERS vtkObject.h
+  LIBRARIES "${Vtk_LIBRARY_LIST}"
+  INCLUDE_SUBDIRS include/vtk-5.0 include/vtk/include/vtk-5.0 # Last for Visit
+)
+
+if (VTK_FOUND)
+  message(STATUS "[FindSciVtk500i.cmake] - Found VTK")
+  message(STATUS "[FindSciVtk500i.cmake] - Vtk_INCLUDE_DIRS = ${Vtk_INCLUDE_DIRS}")
+  message(STATUS "[FindSciVtk500i.cmake] - Vtk_LIBRARIES = ${Vtk_LIBRARIES}")
+  set(HAVE_VTK 1 CACHE BOOL "Whether have Vtk.")
+else ()
+  message(STATUS "[FindSciVtk500i.cmake] - Did not find VTK 5.0.0, use -DVTK_DIR to supply the VTK installation directory.")
+  if (SciVtk_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciVtk500i.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciVtk.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciVtk.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciVtk.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciVtk.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,77 @@
+# - FindSciVtk: Module to find include directories and
+#   libraries for Vtk.
+#
+# Module usage:
+#   find_package(SciVtk ...)
+#
+# This module will define the following variables:
+#  HAVE_VTK, VTK_FOUND = Whether libraries and includes are found
+#  Vtk_INCLUDE_DIRS       = Location of Vtk includes
+#  Vtk_LIBRARY_DIRS       = Location of Vtk libraries
+#  Vtk_LIBRARIES          = Required libraries
+
+##################################################################
+#
+# Find module for VTK
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+##################################################################
+
+set(Vtk_LIBRARY_LIST
+  vtkCommon
+  vtkDICOMParser
+  vtkFiltering
+  vtkGenericFiltering
+  vtkGraphics
+  vtkHybrid
+  vtkIO
+  vtkImaging
+  # vtkPythonCore
+  vtkRendering
+  vtkVolumeRendering
+  vtkWidgets
+  vtkalglib
+  vtkexpat
+  vtkfreetype
+  vtkftgl
+  vtklibxml2
+  vtkjpeg
+  vtkpng
+  vtkproj4
+  vtksqlite
+  vtksys
+  vtktiff
+  vtkverdict
+  vtkzlib
+)
+
+if (NOT Vtk_INSTALL_DIRS)
+  set(Vtk_INSTALL_DIRS vtk-pycsh vtk-sersh vtk)
+endif ()
+
+SciFindPackage(
+  PACKAGE Vtk
+  INSTALL_DIRS ${Vtk_INSTALL_DIRS}
+  INCLUDE_SUBDIRS include include/vtk/include # Second for visit installation
+  HEADERS vtkObject.h
+  LIBRARY_SUBDIRS lib . # Second for visit installation
+  LIBRARIES "${Vtk_LIBRARY_LIST}"
+)
+
+if (VTK_FOUND)
+  message(STATUS "[FindSciVtk.cmake] - Found VTK")
+  message(STATUS "[FindSciVtk.cmake] - Vtk_INCLUDE_DIRS = ${Vtk_INCLUDE_DIRS}")
+  message(STATUS "[FindSciVtk.cmake] - Vtk_LIBRARIES = ${Vtk_LIBRARIES}")
+  set(HAVE_VTK 1 CACHE BOOL "Whether have Vtk.")
+else ()
+  message(STATUS "[FindSciVtk.cmake] - Did not find VTK, use -DVtk_ROOT_DIR to supply the VTK installation directory.")
+  if (SciVtk_FIND_REQUIRED)
+    message(FATAL_ERROR "[FindSciVtk.cmake] - Failing.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciXercesc.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciXercesc.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciXercesc.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciXercesc.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,42 @@
+# - FindSciXercesc: Module to find include directories and libraries
+#   for Xercesc.
+#
+# This module can be included in CMake builds in find_package:
+#   find_package(SciXercesc REQUIRED)
+#
+# This module will define the following variables:
+#  HAVE_XERCESC         = Whether have the Xerces library
+#  Xercesc_INCLUDE_DIRS = Location of Xerces includes
+#  Xercesc_LIBRARY_DIRS = Location of Xerces libraries
+#  Xercesc_LIBRARIES    = Required libraries
+#  Xercesc_STLIBS       = Location of Xerces static library
+
+######################################################################
+#
+# SciFindXercesc.cmake: find includes and libraries for Xercesc
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(SUPRA_SEARCH_PATH ${SUPRA_SEARCH_PATH})
+
+SciFindPackage(PACKAGE "Xercesc"
+              INSTALL_DIR "xercesc"
+              HEADERS "xercesc"
+              LIBRARIES "xerces-c"
+              )
+if (XERCESC_FOUND)
+  message(STATUS "Found Xercesc")
+  set(HAVE_XERCESC 1 CACHE BOOL "Whether have the XERCESC library")
+else ()
+  message(STATUS "Did not find Xercesc.  Use -DXERCESC_DIR to specify the installation directory.")
+  if (SciXercesc_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/FindSciZ.cmake superlu_dist5-5.1.3/scimake/Modules/FindSciZ.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/FindSciZ.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/FindSciZ.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,50 @@
+# - FindSciZ: Module to find include directories and
+#   libraries for Z.
+#
+# Module usage:
+#   find_package(SciZ ...)
+#
+# This module will define the following variables:
+#  HAVE_Z, Z_FOUND = Whether libraries and includes are found
+#  Z_INCLUDE_DIRS       = Location of Z includes
+#  Z_LIBRARY_DIRS       = Location of Z libraries
+#  Z_LIBRARIES          = Required libraries
+
+######################################################################
+#
+# SciFindZ: find includes and libraries for z(compression)
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Need to find paths with standard algorithm
+SciGetInstSubdirs(zlib zinstdirs)
+if (WIN32)
+  set(zlibs z zlib)
+  if (BUILD_SHARED_LIBS OR Z_DLLS_REQUIRED)
+    set(zlibs ${zlibs} zlib1)
+  endif ()
+else ()
+  set(zlibs z)
+endif ()
+SciFindPackage(
+  PACKAGE "Z"
+  INSTALL_DIRS ${zinstdirs}
+  LIBRARIES ${zlibs} OPTIONAL
+)
+
+if (Z_FOUND)
+  # message(STATUS "Found Z(compression library)")
+  set(HAVE_Z 1 CACHE BOOL "Whether have the z(compression) library")
+else ()
+  message(STATUS "Did not find Z(compression).")
+  if (SciZ_FIND_REQUIRED)
+    message(FATAL_ERROR "Failed.")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/SciFindPackage.cmake superlu_dist5-5.1.3/scimake/Modules/SciFindPackage.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/SciFindPackage.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/SciFindPackage.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,949 @@
+######################################################################
+#
+# Variables that change the behavior of this script
+#
+#  Some variables use scipkguc, and some use scipkgreg.  See
+#  http://www.cmake.org/pipermail/cmake/2004-July/005283.html.
+#    "scipkgreg" is the regularized package name
+#      (package name with all "." and "-" replaced with "_")
+#    "scipkguc" is the UPPERCASE regularized package name
+#
+#  DEBUG_CMAKE - if true, outputs verbose debugging information
+#  (default false)
+#
+#  ENABLE_${scipkguc} (default = true) - if false, will not search for package
+#  DISABLE_${scipkguc} - if true, sets ENABLE_${scipkguc} to false
+#
+#  ${scipkgreg}_FIND_QUIETLY - if true, will succeed silently
+#  (default - not defined, which is treated as false)
+#
+#  ${scipkgreg}_FIND_REQUIRED (default = false) - if true, will issue a
+#    fatal error if #    package not found
+#
+#  ${scipkgreg}_ROOT_DIR - search directory hints
+#
+#  SUPRA_SEARCH_PATH - used to specify various top-level search directories
+#
+######################################################################
+#
+#  Variables defined by this script
+#    (In the event that a variable has no valid value, it is set to
+#    "${varname}-NOTFOUND")
+#
+#    ${scipkguc}_FOUND - true if package found
+#
+#  PROGRAMS:
+#    ${scipkgreg}_PROGRAMS - list of found executables, including full
+#      path to each.  Only defined for specifically requested executables.
+#    ${scipkgreg}_yyy - full name & path to executable "yyy"
+#      Only defined for specifically requested executables.
+#
+#  HEADERS:
+#    ${scipkgreg}_INCLUDE_DIRS - a list of all include directories found
+#    ${scipkgreg}_yyy - full path to individual header yyy
+#      Only defined for specifically requested headers
+#
+#  MODULES:
+#    ${scipkgreg}_MODULE_DIRS - a list of all module directories found
+#    ${scipkgreg}_yyy_MOD - full path to individual module yyy.{mod,MOD}
+#      Only defined for specifically requested modules
+#
+#  LIBRARIES:
+#    ${scipkgreg}_{library_name}_LIBRARY - full path to the individual
+#      $library_name library. Only defined for specifically requested libraries.
+#    ${scipkgreg}_LIBRARIES - list of found libraries, including full path to
+#      each.  Only defined for specifically requested libraries.
+#    ${scipkgreg}_STLIBS - list of all found static libraries.
+#      Only defined for libraries existing in ${scipkgreg}_LIBRARIES
+#    ${scipkgreg}_DLLS - windows only, list of all found dlls
+#      Only defined for libraries existing in ${scipkgreg}_LIBRARIES
+#
+#  FILES:
+#    ${scipkgreg}_FILES - list of found files, including a full path to each
+#    ${scipkgreg}_yyy - full name and path to file "yyy"
+#
+#######################################################################
+
+######################################################################
+#
+# SciFindPackage: find includes and libraries of a package
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+
+# SciGetStaticLibs
+#
+# Given a list of libraries, create a new list, where for any
+# dynamic library with a static library next to it, the new list
+# contains the static library.  Otherwise it contains the original
+# dynamic library.
+#
+# Args:
+# origlibs: the original libraries
+# statlibsvar: the variable holding the static libs when found
+#
+function(SciGetStaticLibs origlibs statlibsvar)
+  # set(origlibs ${${origlibsvar}})
+  set(statlibs)
+  if (DEBUG_CMAKE)
+    message(STATUS "[SciFindPackage]: original libs = ${origlibs}.")
+    message(STATUS "[SciFindPackage]: statlibsvar = ${statlibsvar}.")
+  endif ()
+  foreach (lib ${origlibs})
+    set(newlib ${lib})
+    set(havestlib FALSE)
+    if (${lib} MATCHES "\\.a$" OR ${lib} MATCHES "\\.lib$")
+      if (DEBUG_CMAKE)
+        message(STATUS "${lib} is a static library.")
+      endif ()
+      set(havestlib TRUE)
+    endif ()
+# If not static, try replacing suffix
+    if (NOT havestlib)
+      foreach (sfx so;dylib;dll)
+        if (${lib} MATCHES "\\.${sfx}$")
+          if (DEBUG_CMAKE)
+            message(STATUS "${lib} is a shared library.")
+          endif ()
+          get_filename_component(libdir ${lib}/.. REALPATH)
+# NAME_WE takes from first .  We generally need from last
+          get_filename_component(libname "${lib}" NAME)
+          string(REGEX REPLACE "\\.[^\\.]*$" "" libname "${libname}")
+          if (${sfx} STREQUAL "dll")
+            set(newsfx "lib")
+          else ()
+            set(newsfx "a")
+          endif ()
+          if (EXISTS ${libdir}/${libname}.${newsfx})
+            set(newlib ${libdir}/${libname}.${newsfx})
+            set(havestlib TRUE)
+          endif ()
+          break()
+        endif ()
+      endforeach ()
+    endif ()
+# If still do not have static, try pulling out of library flags
+    if (havestlib)
+      list(APPEND statlibs ${newlib})
+    elseif (${lib} MATCHES "^-L")
+      if (DEBUG_CMAKE)
+        message(STATUS "${lib} defined by flags.")
+      endif ()
+      # set(libargs ${lib}) # Create a list
+      string(REPLACE " " ";" libargs "${lib}")
+      if (DEBUG_CMAKE)
+        message(STATUS "libargs = ${libargs}.")
+      endif ()
+      set(libdirargs)
+      set(libdirs)
+      set(libnames)
+      foreach (libarg ${libargs})
+        if (DEBUG_CMAKE)
+          message(STATUS "libarg = ${libarg}.")
+        endif ()
+        if (${libarg} MATCHES "^-L")
+          list(APPEND libdirargs ${libarg})
+          string(REGEX REPLACE "^-L" "" libdir ${libarg})
+          list(APPEND libdirs ${libdir})
+        elseif (${libarg} MATCHES "^-l")
+          string(REGEX REPLACE "^-l" "" libname ${libarg})
+          list(APPEND libnames ${libname})
+        endif ()
+      endforeach ()
+      if (DEBUG_CMAKE)
+        message(STATUS "libdirs = ${libdirs}.")
+        message(STATUS "libnames = ${libnames}.")
+      endif ()
+      set(stlibs)
+      foreach (libname ${libnames})
+        set(lib)
+        foreach (libdir ${libdirs})
+          if (EXISTS ${libdir}/lib${libname}.a)
+            set(lib ${libdir}/lib${libname}.a)
+            break()
+          elseif (EXISTS ${libdir}/${libname}.lib)
+            set(lib ${libdir}/${libname}.lib)
+            break()
+          endif ()
+        endforeach ()
+        if (lib)
+          list(APPEND stlibs ${lib})
+        else ()
+          list(APPEND stlibs "${libdirargs} -l${libname}")
+        endif ()
+      endforeach ()
+      list(APPEND statlibs ${stlibs})
+    else ()
+# If still not static, look in system dirs
+      foreach (libdir /usr/lib64;/usr/lib)
+        if (EXISTS ${libdir}/lib${lib}.a)
+          set(newlib ${libdir}/lib${lib}.a)
+          set(havestlib TRUE)
+          break()
+        endif ()
+      endforeach ()
+      list(APPEND statlibs ${newlib})
+    endif ()
+  endforeach ()
+  if (DEBUG_CMAKE)
+    message(STATUS "[SciFindPackage]: static libs = ${statlibs}.")
+  endif ()
+  set(${statlibsvar} ${statlibs} PARENT_SCOPE)
+endfunction()
+
+# SciGetRealDir
+#
+# Given a directory name, find the real directory name after
+#  first trying to resolve it as a shortcut if on Windows,
+#  then, if that does not work, trying to resolve it as a soft
+#  link.
+#
+# Args:
+#  canddir: the variable holding the directory candidate
+#  realdirvar: the variable holding the directory after following any shortcuts
+#
+function(SciGetRealDir canddir realdirvar)
+
+  # MESSAGE("realdirvar = ${realdirvar}.")
+  set(${realdirvar})
+  if (canddir)
+    if (DEBUG_CMAKE)
+      message(STATUS "Finding the directory for ${canddir}.")
+    endif ()
+# Follow an existing Windows shortcut
+    if (WIN32)
+      if (EXISTS ${canddir}.lnk)
+        exec_program(readshortcut ARGS ${canddir}.lnk
+          OUTPUT_VARIABLE idir
+          return_VALUE ires)
+        if (ires)
+          message(FATAL_ERROR "readshortcut error on ${canddir}.lnk.")
+        endif ()
+        exec_program(cygpath ARGS -am ${idir} OUTPUT_VARIABLE rd)
+      else ()
+        set(rd ${canddir})
+      endif ()
+    else ()
+       get_filename_component(rd ${canddir} REALPATH)
+    endif ()
+  endif ()
+  set(${realdirvar} ${rd} PARENT_SCOPE)
+endfunction()
+
+# SciGetInstSubdirs
+#
+# Given a package name, set the possible installation subdirs
+#
+# Args:
+#  pkgnamelc: the variable holding the package name in lower case
+#  instdirsvar: the variable holding possible installation directories
+#
+function(SciGetInstSubdirs pkgname instdirsvar)
+  string(TOLOWER ${pkgname} pkgnamelc)
+  if (DEBUG_CMAKE)
+    message(STATUS "SciGetInstSubdirs called with pkgname = ${pkgname} and instdirsvar = ${instdirsvar}.")
+    message(STATUS "${pkgname}_ROOT_DIR = ${${pkgname}_ROOT_DIR}.")
+    message(STATUS "USE_PYC_LIBS = ${USE_PYC_LIBS}.")
+    message(STATUS "USE_SHARED_LIBS = ${USE_SHARED_LIBS}.")
+    message(STATUS "BUILD_WITH_SHARED_RUNTIME = ${BUILD_WITH_SHARED_RUNTIME}")
+  endif ()
+  if (ENABLE_PARALLEL)
+    if (USE_SHARED_LIBS)
+      set(instdirs ${pkgnamelc}-parsh ${pkgnamelc}-sersh)
+      if (ALLOW_SERIAL_WITH_PARALLEL)
+        set(instdirs ${instdirs} ${pkgnamelc}-sersh ${pkgnamelc}-sermd)
+        if (NOT WIN32)
+          set(instdirs ${instdirs} ${pkgnamelc})
+        endif ()
+      endif ()
+    else ()
+      set(instdirs ${pkgnamelc}-par ${pkgnamelc}-ben ${pkgnamelc})
+    endif ()
+  else ()
+    if (USE_PYC_LIBS)
+      if (USE_SHARED_LIBS)
+        set(instdirs ${pkgnamelc}-pycsh ${pkgnamelc}-pycmd ${pkgnamelc}-pycst ${pkgnamelc}-sersh ${pkgnamelc}-sermd)
+        if (NOT WIN32)
+          set(instdirs ${instdirs} ${pkgnamelc})
+        endif ()
+      else ()
+        set(instdirs ${pkgnamelc}-pycmd ${pkgnamelc}-pycst ${pkgnamelc}-pycsh ${pkgnamelc}-sermd)
+        if (NOT WIN32)
+          set(instdirs ${instdirs} ${pkgnamelc})
+        endif ()
+        set(instdirs ${instdirs} ${pkgnamelc}-sersh)
+      endif ()
+    elseif (USE_SHARED_LIBS)
+      set(instdirs ${pkgnamelc}-sersh)
+      if (WIN32)
+        set(instdirs ${instdirs} ${pkgnamelc}-sermd)
+      else ()
+        set(instdirs ${instdirs} ${pkgnamelc})
+      endif ()
+    elseif (BUILD_WITH_SHARED_RUNTIME)
+      set(instdirs ${pkgnamelc}-sermd ${pkgnamelc})
+    else ()
+      set(instdirs ${pkgnamelc})
+    endif ()
+  endif ()
+  # message(STATUS "SciGetInstSubdirs finds instdirs = ${instdirs}.")
+  set(${instdirsvar} ${instdirs} PARENT_SCOPE)
+endfunction()
+
+# SciGetRootPath
+#
+# Construct a path, collection of directories, that one is to search
+# to find the root dir.
+#
+# Args:
+#  pkgname: the variable holding the package name with regular capitalization
+#  instsubdirs: possible installation subdirs
+#  rootpathvar: on output, holds possible installation directories
+#
+function(SciGetRootPath pkgname instsubdirs rootpathvar)
+
+# Get the installation subdirs
+  # string(TOLOWER ${pkgname} pkgnamelc)
+  # SciGetInstSubdirs(${pkgnamelc} instsubdirs)
+  if (DEBUG_CMAKE)
+    message(STATUS "SciGetRootPath: instsubdirs = ${instsubdirs}.")
+  endif ()
+  string(TOUPPER ${pkgname} pkgnameuc)
+
+# Find the possible directories and put them into path
+# Order: command-line define, environment variable, supra-search-path subdirs,
+# supra-search-path dirs
+  if (DEBUG_CMAKE)
+    message(STATUS "${pkgname}_ROOT_DIR = ${${pkgname}_ROOT_DIR}.")
+    message("[SciFindPackage] SUPRA_SEARCH_PATH = ${SUPRA_SEARCH_PATH}")
+  endif ()
+  set(rootpath)
+
+# Command-line define overrides all.
+  if (${pkgname}_ROOT_DIR)
+    SciGetRealDir(${${pkgname}_ROOT_DIR} rootpath)
+  else ()
+    if (${pkgname}_DIR)
+# JRC 20120617: Remove this July 31, 2012.
+      message(STATUS "${pkgname}_DIR = ${${pkgname}_DIR}.")
+      message(FATAL_ERROR "Use of ${pkgname}_DIR define is removed.  Please use ${pkgname}_ROOT_DIR")
+      # SciGetRealDir(${${pkgname}_DIR} rootpath)
+    endif ()
+# The deprecated variable name is commonly ${scipkguc}_DIR
+# MD 20120619: Remove this July 31, 2012.
+    if (${pkgnameuc}_DIR)
+      message(STATUS "${pkgnameuc}_DIR = ${${pkgnameuc}_DIR}.")
+      message(FATAL_ERROR "Use of ${pkgnameuc}_DIR define is removed.  Please use ${pkgname}_ROOT_DIR")
+      # SciGetRealDir(${${pkgnameuc}_DIR} rootpath)
+    endif ()
+  endif ()
+  if (DEBUG_CMAKE)
+    message(STATUS "${pkgname}_ROOT_DIR = ${${pkgname}_ROOT_DIR}.")
+    message(STATUS "USE_PYC_LIBS = ${USE_PYC_LIBS}.")
+    message(STATUS "USE_SHARED_LIBS = ${USE_SHARED_LIBS}.")
+  endif ()
+
+# Next try environment variable.  Should this be appended regardless?
+  if (NOT DEFINED ${rootpath})
+    if ($ENV{${pkgname}_ROOT_DIR})
+      SciGetRealDir($ENV{${pkgname}_ROOT_DIR} rootpath)
+    else ()
+      if ($ENV{${pkgname}_DIR})
+# JRC 20120617: Remove this July 31, 2012.
+        message(FATAL_ERROR "Use of ${pkgname}_DIR environment variable is removed .  Please use ${pkgname}_ROOT_DIR")
+        # SciGetRealDir($ENV{${pkgname}_DIR} rootpath)
+      endif ()
+      if ($ENV{${pkgnameuc}_DIR})
+# MD 20120619: Remove this July 31, 2012.
+        message(FATAL_ERROR"Use of ${pkgnameuc}_DIR environment variable is removed.  Please use ${pkgname}_ROOT_DIR")
+        # SciGetRealDir($ENV{${pkgnameuc}_DIR} rootpath)
+      endif ()
+    endif ()
+  endif ()
+  if (DEBUG_CMAKE)
+    message(STATUS "After looking for ${pkgname}_ROOT_DIR in the environment, rootpath = ${rootpath}.")
+  endif ()
+
+# Supra-search-path dirs
+  foreach (instdir ${instsubdirs})
+    foreach (spdir ${SUPRA_SEARCH_PATH})
+      set(idir ${spdir}/${instdir})
+      if (EXISTS ${idir})
+        SciGetRealDir(${idir} scidir)
+        set(rootpath ${rootpath} ${scidir})
+      else ()
+        if (DEBUG_CMAKE)
+          message(STATUS "${idir} does not exist.")
+        endif ()
+      endif ()
+    endforeach (spdir ${SUPRA_SEARCH_PATH})
+  endforeach ()
+
+# Supra-search-path dirs
+  foreach (spdir ${SUPRA_SEARCH_PATH})
+    set(idir ${spdir})
+    if (EXISTS ${idir})
+      SciGetRealDir(${idir} scidir)
+      set(rootpath ${rootpath} ${scidir})
+    endif ()
+  endforeach (spdir ${SUPRA_SEARCH_PATH})
+
+# Any found?
+  list(LENGTH rootpath rootpathlen)
+  if (DEBUG_CMAKE)
+    if (rootpathlen)
+      list(REMOVE_DUPLICATES rootpath)
+      message(STATUS "rootpath = ${rootpath}")
+    else ()
+      message(FATAL_ERROR "rootpath is empty.")
+    endif ()
+  endif ()
+
+# Return value
+  set(${rootpathvar} ${rootpath} PARENT_SCOPE)
+endfunction()
+
+# SciFindPkgFiles
+#
+# Find the files of a type for a package.
+#
+# Args:
+#  pkgname: the variable holding the package name with regular capitalization
+#  pkgfiles: the files to search for
+#  rootpath: contains possible installation root directories
+#  filesubdirs: possible file subdirs
+#  singularsfx: singular version of the file type
+#  pluralsfx: plural version of the file type
+#  allfoundvar: whether all files were found
+#  allowdups: whether duplicates are allowed in list
+#  rootpathvar: the variable in which the rootpath is stored
+#
+function(SciFindPkgFiles pkgname pkgfiles
+  rootpath filesubdirs
+  singularsfx pluralsfx allfoundvar rootpathvar)
+
+  if (DEBUG_CMAKE)
+    message(STATUS "Looking for files of type, ${singularsfx} under ${rootpath} with filesubdirs = ${filesubdirs}.")
+  endif ()
+
+# Set the package path
+
+# Loop over list of executables and try to find each one
+  set(abspkgfiles)
+  set(pkgdirs)
+  set(allfound TRUE)
+  foreach (pkgfile ${pkgfiles})
+
+# Get real name
+    if (${singularsfx} STREQUAL MODULE)
+      if (NOT SCI_FC_MODULE_SUFFIX)
+        message(FATAL_ERROR "SCI_FC_MODULE_SUFFIX not set.  Fortran compiler defined?")
+      endif ()
+      set(realpkgfile ${pkgfile}.${SCI_FC_MODULE_SUFFIX})
+    elseif (${singularsfx} STREQUAL DLL)
+      set(realpkgfile ${pkgfile}.dll)
+    else ()
+      set(realpkgfile ${pkgfile})
+    endif ()
+
+# Create the variable that's specific to this executable
+    string(REGEX REPLACE "[./-]" "_" pkgfilevar ${realpkgfile})
+    set(pkgfilevar ${pkgname}_${pkgfilevar})
+    set(pkgfilevarfile)
+    if (${singularsfx} STREQUAL LIBRARY)
+      set(pkgfilevar ${pkgfilevar}_LIBRARY)
+    elseif (${singularsfx} STREQUAL INCLUDE)
+      set(pkgfilevarfile ${pkgfilevar})
+      set(pkgfilevar ${pkgfilevar}_INCLUDE_DIR)
+    endif ()
+    if (DEBUG_CMAKE)
+      message(STATUS "Searching for pkgfile = ${pkgfile}.")
+    endif ()
+
+# First look in specified path
+    set(basesrchargs ${pkgfilevar} ${realpkgfile})
+    set(pkgfiledir)
+    set(fullsrchargs "${basesrchargs}"
+      PATHS "${rootpath}"
+      PATH_SUFFIXES "${filesubdirs}"
+      NO_DEFAULT_PATH
+    )
+    if (DEBUG_CMAKE)
+      message(STATUS "fullsrchargs = ${fullsrchargs}.")
+    endif ()
+    if (${singularsfx} STREQUAL PROGRAM)
+      find_program(${fullsrchargs}
+        DOC " The ${realpkgfile} ${singularsfx} file"
+      )
+    elseif (${singularsfx} STREQUAL INCLUDE)
+      find_path(${fullsrchargs}
+        DOC " Directory containing the ${realpkgfile} ${singularsfx}"
+      )
+      if (${pkgfilevar})
+        set(pkgfiledir ${${pkgfilevar}})
+        set(${pkgfilevarfile} ${pkgfiledir}/${realpkgfile})
+      endif ()
+    elseif (${singularsfx} STREQUAL LIBRARY)
+      find_library(${fullsrchargs}
+        DOC " The ${realpkgfile} ${singularsfx} file"
+      )
+    else ()
+      find_file(${fullsrchargs}
+        DOC " The ${realpkgfile} ${singularsfx} file"
+      )
+    endif ()
+    if (DEBUG_CMAKE)
+      message(STATUS "From first search: ${pkgfilevar} = ${${pkgfilevar}}.")
+    endif ()
+
+# If not found, try again with default paths
+    if (NOT ${pkgfilevar})
+      if (DEBUG_CMAKE)
+        message(STATUS "Failed to find ${realpkgfile} in search path, trying default paths.")
+      endif ()
+      if (${singularsfx} STREQUAL PROGRAM)
+        find_program(${basesrchargs}
+          DOC " The ${realpkgfile} ${singularsfx} file"
+        )
+      elseif (${singularsfx} STREQUAL INCLUDE)
+        find_path(${basesrchargs}
+          DOC " Directory containing the ${realpkgfile} ${singularsfx}"
+        )
+        if (${pkgfilevar})
+          set(pkgfiledir ${${pkgfilevar}})
+          set(${pkgfilevarfile} ${pkgfiledir}/${realpkgfile})
+        endif ()
+      elseif (${singularsfx} STREQUAL LIBRARY)
+        find_library(${basesrchargs}
+          DOC " The ${realpkgfile} ${singularsfx} file"
+        )
+      else ()
+        find_file(${basesrchargs}
+          DOC " The ${realpkgfile} ${singularsfx} file"
+        )
+      endif ()
+      if (DEBUG_CMAKE)
+        message(STATUS "From second search: ${pkgfilevar} = ${${pkgfilevar}}.")
+      endif ()
+    endif ()
+
+    if (${pkgfilevar})
+# Add to list of all files of this type for this package
+      set(abspkgfiles ${abspkgfiles} ${${pkgfilevar}})
+      if (NOT pkgfiledir)
+        get_filename_component(pkgfiledir ${${pkgfilevar}}/.. REALPATH)
+      endif ()
+      if (${singularsfx} STREQUAL INCLUDE)
+        set(${pkgfilevar} ${pkgfiledir}
+          CACHE STRING " Directory containing ${pkgfiledir}"
+        )
+        set(${pkgfilevarfile} ${${pkgfilevarfile}}
+          CACHE STRING " Full path to ${realpkgfile}}"
+        )
+      endif ()
+      set(pkgdirs ${pkgdirs} ${pkgfiledir})
+    else ()
+# The WARNING option will actually give a scimake stack trace.
+# Not wanted, so use NO option, and start the string with WARNING
+      message("WARNING - Unable to locate file, ${realpkgfile}.")
+      set(allfound FALSE)
+    endif ()
+  endforeach ()
+
+# Clean up the lists of files and directories
+  list(LENGTH abspkgfiles numpkgfiles)
+  if (numpkgfiles)
+    if (NOT ${ALLOWDUPS})
+      list(REMOVE_DUPLICATES abspkgfiles)
+    endif ()
+    list(REMOVE_DUPLICATES pkgdirs)
+  endif ()
+  list(LENGTH pkgdirs lenpkgdirs)
+
+# For libraries, get names
+  if (${singularsfx} STREQUAL LIBRARY)
+    set(pkgfilenames)
+    foreach (pkgfile ${abspkgfiles})
+      get_filename_component(pkgfilename ${pkgfile} NAME_WE)
+      string(REGEX REPLACE "^lib" "" pkgfilename "${pkgfilename}")
+      set(pkgfilenames ${pkgfilenames} ${pkgfilename})
+    endforeach ()
+  endif ()
+
+# Print results if in debug mode
+  if (DEBUG_CMAKE)
+    message(STATUS "Setting:")
+    message(STATUS "  ${pkgname}_${pluralsfx} = ${abspkgfiles}.")
+    if (${singularsfx} STREQUAL LIBRARY)
+      message(STATUS "  ${pkgname}_${singularsfx}_NAMES = ${pkgfilenames}.")
+    endif ()
+    message(STATUS "  ${pkgname}_${singularsfx}_DIRS = ${pkgdirs}.")
+  endif ()
+
+# Set the return vars
+  set(${pkgname}_${pluralsfx} ${abspkgfiles}
+    CACHE STRING " List of all files of type, ${singularsfx}, for ${pkgname}"
+  )
+  set(${pkgname}_${singularsfx}_DIRS ${pkgdirs}
+    CACHE STRING " List of all directories for files of type, ${singularsfx}, for ${pkgname}"
+  )
+  if (${singularsfx} STREQUAL LIBRARY)
+    set(${pkgname}_${singularsfx}_NAMES ${pkgfilenames}
+      CACHE STRING " List of all file names for files of type, ${singularsfx}, for ${pkgname}"
+    )
+    set(${pkgname}_${singularsfx}_NAMES ${pkgfilenames} PARENT_SCOPE)
+  endif ()
+  set(${pkgname}_${pluralsfx} ${abspkgfiles} PARENT_SCOPE)
+  set(${pkgname}_${singularsfx}_DIRS ${pkgdirs} PARENT_SCOPE)
+  set(${allfoundvar} ${allfound} PARENT_SCOPE)
+
+endfunction()
+
+#
+# SciFindPackage
+#
+# Args:
+# NOPRINT: Do not print the results
+# PACKAGE: the prefix for the defined variables
+# INSTALL_DIRS: the names for the installation subdirectory.  Defaults
+#   to lower cased scipkgname
+# PROGRAMS: the executables to look for
+# HEADERS: the header files to look for.
+# LIBRARIES: the libraries
+# FILES: other files to look for
+# MODULES: Fortran module files
+# PROGRAM_SUBDIRS: executable subdirs
+# INCLUDE_SUBDIRS: include subdirectories
+# LIBRARY_SUBDIRS: library subdirectories
+# MODULE_SUBDIRS: library subdirectories
+# FILE_SUBDIRS: file subdirectories
+#
+# NOTE: One cannot reset calling variables
+# NOTE: lists should be delimited by semicolons.
+#(which is the default format used by scimake)
+#
+
+include(CMakeParseArguments)
+macro(SciFindPackage)
+# Set default values
+  set(TFP_FIND_QUIETLY)
+  CMAKE_PARSE_ARGUMENTS(TFP
+    "FIND_QUIETLY;ALLOW_LIBRARY_DUPLICATES;FIND_CONFIG_FILE;CONFIG_FILE_ONLY;USE_CONFIG_FILE"
+    "PACKAGE;INSTALL_DIR;CONFIG_FILE_NAME"
+    "INSTALL_DIRS;PROGRAMS;HEADERS;LIBRARIES;FILES;MODULES;CONFIG_SUBDIRS;PROGRAM_SUBDIRS;INCLUDE_SUBDIRS;MODULE_SUBDIRS;LIBRARY_SUBDIRS;FILE_SUBDIRS"
+    ${ARGN}
+  )
+
+  set(TFP_DLL_SUBDIRS ${TFP_PROGRAM_SUBDIRS} bin lib .)
+
+# This message is purposefully NOT a STATUS message
+# To provide more readable output
+  if (NOT DEBUG_CMAKE AND TFP_FIND_QUIETLY)
+    message(STATUS "Seeking ${TFP_PACKAGE}.")
+  else ()
+    message("")
+    message("--------- SciFindPackage seeking ${TFP_PACKAGE} ---------")
+  endif ()
+
+  if (DEBUG_CMAKE)
+    message(STATUS "Outputting debug information.")
+    message(STATUS "${TFP_PACKAGE}_ROOT_DIR=${${TFP_PACKAGE}_ROOT_DIR}")
+    message(STATUS "SciFindPackage called with arguments:
+      PACKAGE          = ${TFP_PACKAGE}
+      CONFIG_FILE_NAME = ${TFP_CONFIG_FILE_NAME}
+      INSTALL_DIR      = ${TFP_INSTALL_DIR}
+      INSTALL_DIRS     = ${TFP_INSTALL_DIRS}
+      PROGRAMS         = ${TFP_PROGRAMS}
+      HEADERS          = ${TFP_HEADERS}
+      LIBRARIES        = ${TFP_LIBRARIES}
+      MODULES          = ${TFP_MODULES}
+      FILES            = ${TFP_FILES}
+      CONFIG_SUBDIRS   = ${TFP_CONFIG_SUBDIRS}
+      PROGRAM_SUBDIRS  = ${TFP_PROGRAM_SUBDIRS}
+      INCLUDE_SUBDIRS  = ${TFP_INCLUDE_SUBDIRS}
+      LIBRARY_SUBDIRS  = ${TFP_LIBRARY_SUBDIRS}
+      MODULE_SUBDIRS  = ${TFP_LIBRARY_SUBDIRS}
+      FILE_SUBDIRS     = ${TFP_FILE_SUBDIRS}
+      FIND_QUIETLY     = ${TFP_FIND_QUIETLY}
+      ALLOW_LIBRARY_DUPLICATES = ${TFP_ALLOW_LIBRARY_DUPLICATES}
+      FIND_CONFIG_FILE = ${TFP_USE_CONFIG_FILE}
+      CONFIG_FILE_ONLY = ${TFP_CONFIG_FILE_ONLY}
+      USE_CONFIG_FILE  = ${TFP_USE_CONFIG_FILE}"
+    )
+  endif ()
+
+  if (${TFP_PACKAGE}_FOUND)
+    if (DEBUG_CMAKE)
+      message(STATUS "Already found this package, skipping...")
+    endif ()
+  endif ()
+
+# Construct various names(upper/lower case) for package
+  string(REGEX REPLACE "[./-]" "_" scipkgreg ${TFP_PACKAGE})
+# scipkgreg is the regularized package name
+  string(TOUPPER ${scipkgreg} scipkguc)
+  if (DEBUG_CMAKE)
+    message(STATUS "ENABLE_${scipkguc} = ${ENABLE_${scipkguc}}")
+  endif ()
+  if (DISABLE_${scipkguc})
+    set(ENABLE_${scipkguc} FALSE)
+  endif ()
+  if (NOT DEFINED ENABLE_${scipkguc})
+    set(ENABLE_${scipkguc} TRUE)
+  endif ()
+  if (NOT ENABLE_${scipkguc})
+    message(STATUS "Disabling ${scipkgreg}.")
+    set(${scipkguc}_FOUND FALSE)
+    if (DEBUG_CMAKE)
+      message(STATUS "${scipkguc}_FOUND set to FALSE.")
+    endif ()
+    return()
+  endif ()
+# Set to true until not something not found
+  set(${scipkguc}_FOUND TRUE)
+  string(TOLOWER ${scipkgreg} scipkglc)
+  set(scipkginst ${TFP_INSTALL_DIR} ${TFP_INSTALL_DIRS})
+  if (NOT scipkginst)
+    SciGetInstSubdirs(${scipkglc} scipkginst)
+  endif ()
+  if (DEBUG_CMAKE)
+    message(STATUS "scipkginst = ${scipkginst}.")
+  endif ()
+
+# Find the set of possible root installation dirs
+  SciGetRootPath(${scipkgreg} "${scipkginst}" origscipath)
+  if (DEBUG_CMAKE)
+    message(STATUS "scipath = ${scipath}")
+  endif ()
+  set(scipath "${origscipath}")
+
+#######################################################################
+#
+# Look for cmake configuration files
+# Variables defined:
+#   Xxx_CONFIG_FILE: path to the PkgConfig.cmake
+#   Xxx_CONFIG_VERSION_FILE: path to the PkgConfigVersion.cmake
+#
+#######################################################################
+
+  if (TFP_FIND_CONFIG_FILE OR TFP_USE_CONFIG_FILE OR TFP_CONFIG_FILE_ONLY)
+
+# Get the config file
+    set(sciconfigcmvar "${scipkgreg}_CONFIG_CMAKE")
+    if (CONFIG_FILE_NAMES)
+      set(confnames ${CONFIG_FILE_NAMES})
+    else ()
+      set(confnames ${scipkgreg}Config.cmake ${scipkglc}-config.cmake)
+    endif ()
+    set(confdirs ${TFP_CONFIG_SUBDIRS} lib/cmake/${scipkgreg} share/cmake/${scipkglc} cmake/${scipkglc})
+    message(STATUS "Looking for ${confnames} in ${confdirs}.")
+    find_file(${sciconfigcmvar}
+      NAMES ${confnames}
+      PATHS ${scipath}
+      PATH_SUFFIXES ${confdirs}
+      NO_DEFAULT_PATH
+      DOC "Path to the hdf5 config files."
+    )
+
+# If not found, look in system directories
+    if (NOT ${scipkgreg}_CONFIG_CMAKE)
+      find_file(${scipkgreg}_CONFIG_CMAKE
+        NAMES ${confnames}
+      )
+    endif ()
+
+# If found, source
+    if (${scipkgreg}_CONFIG_CMAKE)
+      get_filename_component(${scipkgreg}_CONFIG_DIR ${${scipkgreg}_CONFIG_CMAKE}/.. REALPATH)
+      set(confvernames ${scipkgreg}ConfigVersion.cmake ${scipkglc}-config-version.cmake)
+      if (DEBUG_CMAKE)
+        message(STATUS "Looking for ${confvernames} in ${${scipkgreg}_CONFIG_DIR}.")
+      endif ()
+      find_file(${scipkgreg}_CONFIG_VERSION_CMAKE
+        NAMES ${confvernames}
+        PATHS ${${scipkgreg}_CONFIG_DIR}
+      )
+      if (TFP_USE_CONFIG_FILE AND ${scipkgreg}_CONFIG_CMAKE)
+        include(${${scipkgreg}_CONFIG_CMAKE})
+      endif ()
+    endif ()
+    if (DEBUG_CMAKE)
+      SciPrintVar(${scipkgreg}_CONFIG_CMAKE)
+      SciPrintVar(${scipkgreg}_CONFIG_VERSION_CMAKE)
+    endif ()
+    if (TFP_CONFIG_FILE_ONLY)
+      if (DEBUG_CMAKE OR NOT TFP_FIND_QUIETLY)
+        SciPrintCMakeResults(${scipkgreg})
+      endif ()
+    endif ()
+
+  endif ()
+
+#######################################################################
+#
+# Look for TYPES = PROGRAM, INCLUDE, MODULE, LIBRARY, FILE
+# Variables defined:
+#   For PROGRAM, INCLUDE, MODULE, FILE
+#     Xxx_yyy - CACHED
+#       Where to find the yyy file that comes with Xxx.
+#   For LIBRARY
+#     Xxx_yyy_LIBRARY - CACHED
+#       Where to find the yyy file that comes with Xxx.
+#   Xxx_${TYPE_PLURAL} - CACHED
+#     List of all files of that type found for package Xxx.
+#
+#######################################################################
+
+  if (NOT TFP_CONFIG_FILE_ONLY)
+# Create the search paths
+    set(scitypes PROGRAM INCLUDE MODULE LIBRARY FILE)
+# Not clear what is right here
+    # if (WIN32 AND (BUILD_SHARED_LIBS))
+    if (WIN32)
+      set(scitypes ${scitypes} DLL)
+    endif ()
+    foreach (scitype ${scitypes})
+
+# Get plural
+      if (${scitype} STREQUAL LIBRARY)
+        set(scitypeplural LIBRARIES)
+      elseif (${scitype} STREQUAL INCLUDE)
+        set(scitypeplural HEADERS)
+      else ()
+        set(scitypeplural ${scitype}S)
+      endif ()
+
+# Get list containing files to search for
+      if (${scitype} STREQUAL DLL)
+        set(srchfilesvar TFP_LIBRARIES)
+      else ()
+        set(srchfilesvar TFP_${scitypeplural})
+      endif ()
+
+# Set whether optional search
+      set(srchoptional FALSE)
+      if (${scitype} STREQUAL DLL)
+# DLL search always optional
+        set(srchoptional TRUE)
+      elseif (${srchfilesvar})
+# Matters only if there is something to search for
+        list(FIND ${srchfilesvar} OPTIONAL optind)
+        if (NOT ${optind} EQUAL -1)
+# If find OPTIONAL, then remove that from list and set optional true
+          list(REMOVE_AT ${srchfilesvar} ${optind})
+          set(srchoptional TRUE)
+        endif ()
+      endif ()
+
+# If list not empty, search for files
+      list(LENGTH ${srchfilesvar} scisrchlen)
+      if (scisrchlen)
+
+# Create lists for search
+        list(LENGTH TFP_${scitype}_SUBDIRS scilen)
+        if (scilen)
+          set(scifilesubdirs ${TFP_${scitype}_SUBDIRS})
+        else ()
+# Default search subdirectories
+          if (${scitype} STREQUAL PROGRAM)
+            set(scifilesubdirs bin)
+          elseif (${scitype} STREQUAL FILE)
+            set(scifilesubdirs share share/macros)
+          elseif (${scitype} STREQUAL INCLUDE)
+            set(scifilesubdirs include)
+          elseif (${scitype} STREQUAL LIBRARY)
+            set(scifilesubdirs lib)
+          elseif (${scitype} STREQUAL DLL)
+            set(scifilesubdirs bin lib .)
+          elseif (${scitype} STREQUAL MODULE)
+            set(scifilesubdirs include)
+          else ()
+            message(WARNING "Default subdir not known for ${scitype}.")
+          endif ()
+        endif ()
+        message(STATUS "Looking for ${scitypeplural}, ${${srchfilesvar}}, in ${scifilesubdirs} with OPTIONAL = ${srchoptional}.")
+
+# Find the files
+        SciFindPkgFiles(${scipkgreg} "${${srchfilesvar}}"
+          "${scipath}" "${scifilesubdirs}"
+          ${scitype} ${scitypeplural} ${scipkgreg}_${scitypeplural}_FOUND
+          ${TFP_ALLOW_LIBRARY_DUPLICATES}
+        )
+# Okay not to find dlls
+        if (NOT ${scipkgreg}_${scitypeplural}_FOUND)
+          if (NOT ${scitype} STREQUAL DLL)
+            message(WARNING "${scipkgreg}_${scitypeplural}_FOUND = ${${scipkgreg}_${scitypeplural}_FOUND}.")
+          endif ()
+          if (NOT ${srchoptional})
+            set(${scipkguc}_FOUND FALSE)
+          endif ()
+        endif ()
+      endif ()
+
+# At the end of the LIBRARY include, find the rootdir, and use it
+# for further searches
+      if ((${scitype} STREQUAL LIBRARY) AND ${scipkgreg}_INCLUDE_DIRS)
+        list(GET ${scipkgreg}_INCLUDE_DIRS 0 rootdir)
+        get_filename_component(rootdir "${rootdir}" DIRECTORY)
+        get_filename_component(subdir "${rootdir}" NAME)
+        if (${subdir} STREQUAL visit OR ${subdir} MATCHES "^vtk-6.1")
+          get_filename_component(rootdir "${rootdir}" DIRECTORY)
+        endif ()
+        get_filename_component(subdir "${rootdir}" NAME)
+        if (${subdir} STREQUAL include)
+          get_filename_component(rootdir "${rootdir}" DIRECTORY)
+        endif ()
+# We should require rootdir to be a part of all library dirs, removing
+# subdirs until this happens.
+        foreach (libdir ${${scipkgreg}_LIBRARY_DIRS})
+        endforeach ()
+        set(scipath ${rootdir})
+        message(STATUS "scipath = ${scipath}.")
+      endif ()
+
+    endforeach ()
+
+# Find static libraries
+    if (${scipkgreg}_LIBRARIES)
+      SciGetStaticLibs("${${scipkgreg}_LIBRARIES}" ${scipkgreg}_STLIBS)
+# Prefer static if found
+      if (NOT USE_SHARED_LIBS AND DEFINED USE_SHARED_LIBS AND ${scipkgreg}_STLIBS)
+        set(${scipkgreg}_LIBRARIES ${${scipkgreg}_STLIBS})
+      endif ()
+    endif ()
+
+    if (${scipkgreg}_DLLS)
+      set(${scipkgreg}_DEFINITIONS -D${scipkguc}_DLL)
+    endif ()
+
+  endif ()
+
+####################################################################
+#
+# For the package to be marked as found, all requested objects must
+# have been found, as coded above.
+# Per http://www.cmake.org/Wiki/scimake:How_To_Find_Installed_Software,
+# The convention is to capitalize the _FOUND variable.
+#
+####################################################################
+
+  if (DEBUG_CMAKE OR NOT TFP_FIND_QUIETLY)
+    SciPrintCMakeResults(${scipkgreg})
+  endif ()
+
+# If this was marked as a required package, fail
+  if (${scipkgreg}_FIND_REQUIRED AND NOT ${scipkguc}_FOUND)
+    message(FATAL_ERROR "Unable to find required package ${scipkgreg} - failing")
+  endif ()
+
+  if (DEBUG_CMAKE OR NOT TFP_FIND_QUIETLY)
+    message(STATUS "${scipkguc}_FOUND = ${${scipkguc}_FOUND}.")
+    message("--------- SciFindPackage done with ${TFP_PACKAGE} -----------")
+  endif ()
+
+endmacro(SciFindPackage)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/SciFindQtPkg.cmake superlu_dist5-5.1.3/scimake/Modules/SciFindQtPkg.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/SciFindQtPkg.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/SciFindQtPkg.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,106 @@
+# - SciFindQtPkg: Module to find include directories and
+#   libraries for a package installed with Qt.
+#
+# Module usage:
+#   find_package(SciQt3D ...)
+#
+# This module will define the following variables:
+#  Qt3D_INCLUDE_DIRS = Location of Qt3D includes
+#  Qt3D_LIBRARY      = The Qt3D library
+
+######################################################################
+#
+# SciFindQtPkg: find includes and libraries for a qt package
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# SciGetStaticLibs
+#
+# Given a package name, find the associated include directory and library
+#
+include(CMakeParseArguments)
+macro(SciFindQtPkg)
+
+# Parse the arguments
+  CMAKE_PARSE_ARGUMENTS(SFQP
+    "REQUIRED"
+    "PACKAGE"
+    "HEADERS;LIBRARIES;FRAMEWORKS"
+    ${ARGN}
+  )
+
+# Start message
+  message("")
+  message("--------- SciFindQtPkg looking for ${SFQP_PACKAGE} ---------")
+
+# Construct various names(upper/lower case) for package
+  string(REGEX REPLACE "[./-]" "_" qtpkgreg ${SFQP_PACKAGE})
+# scipkgreg is the regularized package name
+  string(TOUPPER ${qtpkgreg} qtpkguc)
+
+# Assume Qt found
+  if (NOT QT_DIR)
+    set(QT_${qtpkguc}_FOUND FALSE)
+    if (SFQP_REQUIRED)
+      message(FATAL_ERROR "QT_DIR not set.  Cannot find ${SFQP_PACKAGE}.")
+    else ()
+      message(WARNING "QT_DIR not set.  Cannot find ${SFQP_PACKAGE}.")
+    endif ()
+    return()
+  endif ()
+
+# For APPLE should be setting the framework, but less familiar
+  message(STATUS "QT_DIR = ${QT_DIR}.")
+  message(STATUS "QT_LIBRARY_DIR = ${QT_LIBRARY_DIR}.")
+  if (APPLE)
+# JRC: Framework variable names should conform to standards
+# CMake convention is that the library name is the framework name
+    set(QT_${qtpkguc}_FRAMEWORK ${QT_LIBRARY_DIR}/${qtpkgreg}.framework)
+    if (EXISTS ${QT_${qtpkguc}_FRAMEWORK})
+      get_filename_component(QT_${qtpkguc}_FRAMEWORK "${QT_${qtpkguc}_FRAMEWORK}" REALPATH)
+      set(QT_${qtpkguc}_FRAMEWORKS "${QT_${qtpkguc}_FRAMEWORK}")
+      message(STATUS "Found ${QT_${qtpkguc}_FRAMEWORK}.")
+      get_filename_component(QT_${qtpkguc}_FRAMEWORK_DIRS "${QT_${qtpkguc}_FRAMEWORK}/.." REALPATH)
+      get_filename_component(QT_${qtpkguc}_FRAMEWORK_NAMES "${QT_${qtpkguc}_FRAMEWORK}" NAME)
+      set(QT_${qtpkguc}_INCLUDE_DIRS ${QT_${qtpkguc}_FRAMEWORK}/Headers)
+      set(QT_${qtpkguc}_LIBRARIES ${QT_${qtpkguc}_FRAMEWORKS})
+      set(QT_${qtpkguc}_LIBRARY_DIRS ${QT_${qtpkguc}_FRAMEWORK_DIRS})
+      set(QT_${qtpkguc}_LIBRARY_NAMES ${QT_${qtpkguc}_FRAMEWORK_NAMES})
+    else ()
+      message(STATUS "${QT_${qtpkguc}_FRAMEWORK} not found.")
+    endif ()
+  elseif (WIN32)
+    set(QT_${qtpkguc}_INCLUDE_DIRS ${QT_DIR}/include/${qtpkgreg})
+    set(QT_${qtpkguc}_LIBRARIES ${QT_DIR}/lib/${qtpkgreg}.lib)
+    set(QT_${qtpkguc}_DLLS ${QT_DIR}/lib/${qtpkgreg}.dll)
+  else ()
+    set(QT_${qtpkguc}_INCLUDE_DIRS ${QT_DIR}/include/${qtpkgreg})
+    set(QT_${qtpkguc}_LIBRARIES ${QT_DIR}/lib/lib${qtpkgreg}.so)
+  endif ()
+
+# Requires include dirs and libraries to be found
+  set(QT_${qtpkguc}_FOUND TRUE)
+  foreach (i QT_${qtpkguc}_INCLUDE_DIRS QT_${qtpkguc}_LIBRARIES)
+    if (EXISTS ${${i}})
+      get_filename_component(${i} "${${i}}" REALPATH)
+      set(${i} "${${i}}")
+    else ()
+      message(STATUS "${${i}} does not exist.")
+      set(QT_${qtpkguc}_FOUND FALSE)
+    endif ()
+  endforeach ()
+  message(STATUS "QT_${qtpkguc}_FOUND = ${QT_${qtpkguc}_FOUND}.")
+  if (SFQP_REQUIRED AND NOT QT_${qtpkguc}_FOUND)
+    message(FATAL_ERROR "QT_${qtpkguc} not found.")
+  endif ()
+
+  SciPrintCMakeResults(QT_${qtpkguc})
+
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/SciOSPLMacros.cmake superlu_dist5-5.1.3/scimake/Modules/SciOSPLMacros.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/SciOSPLMacros.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/SciOSPLMacros.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,183 @@
+##############################################################################
+# Adding OpenSplics DDS Data Model related files to the build.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+##############################################################################
+#
+# User should include this macro definition file and use ADD_OSPL_DATAMODEL
+# You must include the extension .idl in the name of the data file.  After
+# the macro is executed successfully, the variable
+#
+#        ${datamodel_name}_OSPLDDS_DATAMODEL
+#
+# will contain a list of all generated files which should be added as source files
+# to appropriate executables or libraries.
+#
+# Typical usage(Add the following to your CMakeLists.txt):
+#
+#    # Generate DDS bindings from Chat.idl file
+#    include(SciOSPLMacros)
+#    ADD_OSPL_DATAMODEL(NAME CHAT_KA
+#                       IDLS Chat.idl MoreIDLAllowed.idl
+#                       IDL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}
+#                       GENDIR "gen"
+#    )
+#
+#    INCLUDE_DIRECTORIES(${INCLUDES} ${CMAKE_CURRENT_BINARY_DIR}/gen)
+#
+#    SET(CHATTER_KA_SRCS Chatter.cpp CheckStatus.cpp ${CHAT_KA_OSPLDDS_DATAMODEL})
+#    ADD_EXECUTABLE(chat_ka_ospl ${CHATTER_KA_SRCS})
+#
+# TO-DOs:
+#
+#    * Better and more informative messages
+#    * More comments?
+#    * Better error handling/robustness.
+#
+##############################################################################
+
+# Macro to create a list with all the generated source files for a given .idl filename
+macro(DEFINE_OpenSplice_LANG_SOURCES lang idl)
+        set(gensources)
+        get_filename_component(icore ${idl} NAME_WE)
+        if ("${lang}" STREQUAL "cpp")
+                set(gensources ${gensources} ${icore}.cpp ${icore}.h)
+                set(gensources ${gensources} ${icore}Dcps.cpp ${icore}Dcps.h)
+                set(gensources ${gensources} ${icore}Dcps_impl.cpp ${icore}Dcps_impl.h)
+                set(gensources ${gensources} ${icore}SplDcps.cpp ${icore}SplDcps.h)
+                set(gensources ${gensources} ccpp_${icore}.h)
+        elseif ("${lang}" STREQUAL "c")
+                set(gensources ${gensources} ${icore}.h)
+                set(gensources ${gensources} ${icore}Dcps.h)
+                set(gensources ${gensources} ${icore}SacDcps.c ${icore}SacDcps.h)
+                set(gensources ${gensources} ${icore}SplDcps.c ${icore}SplDcps.h)
+        endif ()
+endmacro(DEFINE_OpenSplice_LANG_SOURCES)
+
+#####
+# Macro:
+#       ADD_OSPL_DATAMODEL(NAME datamodel_name  # Name of the data model
+#                          IDLS idl1 idl2 ...   # A list of IDL files
+#                                               # defining the data model
+#                                               # can be referred by relative
+#                                               # or absolute paths
+#                          LANG [cpp|c|java]    # Only cpp and c are supported
+#                                               # for now.  If not defined,
+#                                               # cpp mapping will be used
+#                          IDL_PREFIX           # Optional IDL path prefix
+#                                               # No trailing slash(fix me)
+#                          IDL_INCLUDES p1 p2.. # Optional list of IDL include
+#                                               # paths
+#                          GENDIR path          # Optional directory for
+#                                               # generated files
+#                                               # No trailing slash(fix me)
+#                          GENERATED_IDLS       # IDL files are generated at run time
+#                                               # Define this option to skip file
+#                                               # existence checks
+#       )
+#
+# Assumption:
+#       This macro assumes the OpenSplice_IDLGEN_BINARY and OSPL_HOME
+#       have been properly defined.  Cmake 2.8.3 or above is requires.
+#
+# Output:
+#       The following variables are defined after the
+#       ADD_OSPL_DATAMODEL is executed successfully.
+#       ${datamodel_name}_OSPLDDS_DATAMODEL contains all the generated
+#       files(header and implementation files.)  Obviously, if GENDIR
+#       option is defined, it needs to be "included" for compilation.
+#
+# bugs:
+#       LANG is currently ignored.  assume we always deal with cpp mapping.
+#       not a whole lot of error checkings now.
+
+include(CMakeParseArguments)
+macro(ADD_OSPL_DATAMODEL)
+    CMAKE_PARSE_ARGUMENTS(SCIADM
+        "GENERATED_IDLS"
+        "NAME;GENDIR;LANG;IDL_PREFIX"
+        "IDLS;IDL_INCLUDES"
+        ${ARGN}
+        )
+
+# We must have a target name, or else, no way to proceed
+    if (DEFINED SCIADM_NAME)
+        message(INFO " Add datamodel: ${SCIADM_NAME}")
+    else ()
+        message(FATAL_ERROR "ADD_OSPL_DATAMODEL: No datamodel name defined.")
+    endif ()
+
+# Check if a non-supported language mapping is used
+    if (NOT SCIADM_LANG)
+        message("Use default cpp mapping for datamodel ${SCIADM_NAME}")
+        set(SCIADM_LANG "cpp")
+    endif ()
+    if ((NOT "${SCIADM_LANG}" STREQUAL "cpp") AND(NOT "${SCIADM_LANG}" STREQUAL "c"))
+       message(FATAL_ERROR "Langauage mapping for ${SCIADM_LANG} is not supported by ADD_OSPL_DATAMODEL.  Use either cpp or c mappings.")
+    else ()
+       message("Language mapping for ${SCIADM_NAME} is ${SCIADM_LANG}")
+    endif ()
+
+# Go thru all the IDL files.  Prepend IDL_PREFIX if defined.(IDL_PREFIX must not end with '/').
+# We can easily fix this.
+    set(allidls)
+    foreach (idl ${SCIADM_IDLS})
+        # check existance of all IDLS
+        if (DEFINED SCIADM_IDL_PREFIX)
+            set(idl ${SCIADM_IDL_PREFIX}/${idl})
+        endif ()
+        if (${SCIADM_GENERATED_IDLS})
+            set(allidls ${allidls} ${idl})
+        elseif (EXISTS ${idl})
+            message("Adding ${idl} to ${SCIADM_NAME} datamodel")
+            set(allidls ${allidls} ${idl})
+        else ()
+            message(WARNING "IDL file(${idl}) does not exist, skipped!")
+        endif ()
+    endforeach (idl)
+
+    if ("${allidls}" STREQUAL "")
+        message(FATAL_ERROR "ADD_OSPL_DATAMODEL: Must provide at least one valid datamodel IDL.")
+    endif ()
+
+    set(ospl_idlgen_include_dirs)
+    if (DEFINED SCIADM_IDL_INCLUDES)
+        foreach (dir ${SCIADM_IDL_INCLUDES})
+            # @@ We should probably check if the dir actually exists and warn otherwise?
+            set(ospl_idlgen_include_dirs ${ospl_idlgen_include_dirs} "-I${dir}")
+        endforeach (dir)
+    endif ()
+
+    set(iall_ospldds_datamodel)
+    foreach (idl ${allidls})
+        get_filename_component(ipath ${idl} PATH)
+        get_filename_component(iname ${idl} NAME)
+        set(idlgen_args "-S" "-l" "${SCIADM_LANG}" "-I${ipath}")
+        DEFINE_OpenSplice_LANG_SOURCES(${SCIADM_LANG} ${iname})
+        if (DEFINED SCIADM_GENDIR)
+            set(idlgen_args ${idlgen_args} "-d" ${SCIADM_GENDIR})
+            set(igensources)
+            foreach (igen ${gensources})
+                set(igensources ${igensources} "${SCIADM_GENDIR}/${igen}")
+            endforeach (igen)
+        else ()
+            set(igensources ${gensources})
+        endif ()
+        ADD_CUSTOM_COMMAND(
+                OUTPUT ${igensources}
+                COMMAND ${OpenSplice_EXEC}
+                ARGS ${OpenSplice_idlpp} ${idlgen_args} ${idl}
+                DEPENDS ${idl}
+        )
+        set(iall_ospldds_datamodel ${iall_ospldds_datamodel} ${igensources})
+    endforeach (idl)
+
+    set(${SCIADM_NAME}_OSPLDDS_DATAMODEL ${iall_ospldds_datamodel})
+
+endmacro(ADD_OSPL_DATAMODEL)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/Modules/SciSphinxFunctions.cmake superlu_dist5-5.1.3/scimake/Modules/SciSphinxFunctions.cmake
--- SuperLU_DIST_5.1.3/scimake/Modules/SciSphinxFunctions.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/Modules/SciSphinxFunctions.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,212 @@
+# - SciSphinxFunctions:
+# Useful functions for simplifying the setting up of sphinx targets
+#
+# All functions assume that FindSciSphinx was used and the following are
+# defined:
+#   Sphinx_EXECUTABLE     = The path to the sphinx command.
+#   Sphinx_OPTS           = Options for sphinx
+#
+# The SciSphinxTarget automates the creation of build and install
+# targets.  The make targets are not added to all, and the install's are
+# optional.  To make the install options work with install, use the
+# add_dependencies command.  For example:
+#  add_dependencies(install install-userdocs)
+#
+
+#################################################################
+#
+# SciSphinxFunction
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#################################################################
+
+include(CMakeParseArguments)
+
+# SciSphinxTarget.cmake
+# Automate the defining of the CMake targets
+# Args:
+#   TARGET:        Target basename.  Targets will be ${TARGET}-<build>,
+#                  where <build> is one of html, latex, or pdf.
+#   RST_FILE_BASE: Root name of Latex file.  From conf.py
+#   SOURCE_DIR:    Directory containing the index.rst.  Defaults
+#                  to CMAKE_CURRENT_SOURCE_DIR
+#   SPHINX_ADDL_OPTS: Additional options to Sphinx
+#   SPHINX_DOCTREE_DIR: Select cache directory (default .doctrees)
+#   FILE_DEPS:      Files that are the dependencies.
+#   SPHINX_BUILDS:  Which builds to include.  Default is "html latex pdf"
+#                   Possible choices are "html latex pdf singlehtml man"
+#   SPHINX_INSTALLS: Which builds to install.  Default is same as builds
+#   NOWARN_NOTMATCH_DIR: Do not warn if file base does not match install dir
+#   INSTALL_SUPERDIR: Name of installation directory up to this one.
+#                     Should not be absolute (not include prefix).
+#                     Overridden by INSTALL_SUBDIR.
+#   INSTALL_SUBDIR:   Name of this subdir for installation.
+#                     Should not be absolute (not include prefix).
+#
+macro(SciSphinxTarget)
+
+# Parse out the args
+  set(opts DEBUG;NOWARN_NOTMATCH_DIR) # no-value args
+  set(oneValArgs RST_FILE_BASE;TARGET;SPHINX_ADDL_OPTS;SPHINX_DOCTREE_DIR;
+        SOURCE_DIR;INSTALL_SUPERDIR;INSTALL_SUBDIR)
+  set(multValArgs FILE_DEPS;ALL_BUILDS) # e.g., lists
+  cmake_parse_arguments(FD "${opts}" "${oneValArgs}" "${multValArgs}" ${ARGN})
+  #
+  # Defaults
+  #
+  if (NOT DEFINED FD_SOURCE_DIR)
+    set(FD_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
+  endif ()
+  if (NOT DEFINED FD_SPHINX_BUILDS)
+    set(FD_SPHINX_BUILDS)
+    list(APPEND FD_SPHINX_BUILDS html latex pdf)
+  endif ()
+  if (NOT DEFINED FD_SPHINX_INSTALLS)
+    set(FD_SPHINX_INSTALLS ${FD_SPHINX_BUILDS})
+  endif ()
+  if (FD_INSTALL_SUBDIR)
+    set(instdir ${FD_INSTALL_SUBDIR})
+  elseif (FD_INSTALL_SUPERDIR)
+    set(instdir ${FD_INSTALL_SUPERDIR}/${thissubdir})
+  else ()
+    set(instdir ${CMAKE_INSTALL_PREFIX})
+  endif ()
+  if (NOT DEFINED USE_WHOOSH )
+    set(USE_WHOOSH false)
+  endif ()
+
+  #
+  #  Basic sanity checks
+  #
+  get_filename_component(thissubdir ${CMAKE_CURRENT_SOURCE_DIR} NAME)
+  if (NOT NOWARN_NOTMATCH_DIR)
+    set(WARN_NOTMATCH_DIR)
+  endif ()
+  if (WARN_NOTMATCH_DIR)
+    if (NOT "${thissubdir}" STREQUAL "${FD_RST_FILE_BASE}")
+      message(WARNING "Main rst file base, ${FD_RST_FILE_BASE}, does not match subdirectory name, ${thissubdir}.")
+    endif ()
+  endif ()
+
+  if (NOT DEFINED FD_TARGET)
+    message(WARNING "SciSphinxTarget called without specifying the target name")
+    return()
+  endif ()
+  if (NOT DEFINED FD_FILE_DEPS)
+    message(WARNING "SciSphinxTarget called without specifying the file dependencies")
+    return()
+  endif ()
+  if (NOT DEFINED FD_RST_FILE_BASE)
+    message(WARNING "SciSphinxTarget called without specifying the latex root from conf.py")
+    return()
+  endif ()
+  if (NOT DEFINED Sphinx_EXECUTABLE)
+    message(WARNING "SciSphinxTarget called without defining Sphinx_EXECUTABLE")
+    return()
+  endif ()
+  if (FD_DEBUG)
+    message("")
+    message("--------- SciSphinxTarget defining targets for ${FD_TARGET} ---------")
+    message(STATUS "[SciSphinxFunctions]: TARGET= ${FD_TARGET} ")
+    message(STATUS "[SciSphinxFunctions]: RST_FILE_BASE= ${FD_RST_FILE_BASE} ")
+    message(STATUS "[SciSphinxFunctions]: Sphinx_EXECUTABLE= ${Sphinx_EXECUTABLE} ")
+    message(STATUS "[SciSphinxFunctions]: Sphinx_OPTS= ${Sphinx_OPTS} ")
+    message(STATUS "[SciSphinxFunctions]: SPHINX_ADDL_OPTS= ${FD_SPHINX_ADDL_OPTS} ")
+    message(STATUS "[SciSphinxFunctions]: SPHINX_DOCTREE_DIR= ${FD_SPHINX_DOCTREE_DIR} ")
+  endif ()
+
+  #
+  #  Do the standard builds
+  #
+  if (NOT EXISTS ${FD_SOURCE_DIR}/${FD_RST_FILE_BASE}.rst)
+     set(html_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/html/${FD_RST_FILE_BASE}.html)
+  else ()
+     set(html_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/html/index.html)
+  endif ()
+  set(singlehtml_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/singlehtml/index.html)
+  set(latex_OUTPUT ${BLDDIR}/pdf/${FD_RST_FILE_BASE}.tex)
+  set(pdf_OUTPUT ${BLDDIR}/pdf/${FD_RST_FILE_BASE}.pdf)
+  set(man_OUTPUT ${BLDDIR}/man/index.man)
+
+  foreach (build ${FD_SPHINX_BUILDS})
+    set (${build}_DIR ${CMAKE_CURRENT_BINARY_DIR}/${build})
+# Latex is actually for pdf which is below
+    if (${build} STREQUAL latex)
+      set (${build}_DIR ${CMAKE_CURRENT_BINARY_DIR}/pdf)
+    endif ()
+
+# There is something weird about passing blank spaces into COMMAND
+# so this method fixes the problems that arise if Sphinx_OPTS is not defined
+    set(all_opts -b ${build} -c ${CMAKE_CURRENT_BINARY_DIR} ${Sphinx_OPTS} ${FD_SPHINX_ADDL_OPTS} ${FD_SPHINX_DOCTREE_DIR})
+    if (NOT ${build} STREQUAL pdf)
+      add_custom_command(
+        OUTPUT ${${build}_OUTPUT}
+        COMMAND ${Sphinx_EXECUTABLE}
+        ARGS ${all_opts} ${FD_SOURCE_DIR} ${${build}_DIR}
+        DEPENDS ${FD_FILE_DEPS}
+      )
+      add_custom_target(${FD_TARGET}-${build} DEPENDS ${${build}_OUTPUT})
+      if (USE_WHOOSH AND "${build}" STREQUAL html)
+        message(STATUS "XXXXXXXXXXX")
+        set(whoosh_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/html/whoosh.txt)
+        set(all_opts -b whoosh -c ${CMAKE_CURRENT_BINARY_DIR} ${Sphinx_OPTS} ${FD_SPHINX_ADDL_OPTS} ${FD_SPHINX_DOCTREE_DIR})
+        add_custom_command(
+          OUTPUT ${whoosh_OUTPUT}
+          COMMAND ${Sphinx_EXECUTABLE}
+          ARGS ${all_opts} ${FD_SOURCE_DIR} ${${build}_DIR}
+          DEPENDS ${FD_FILE_DEPS}
+        )
+        add_custom_target(${FD_TARGET}-whoosh
+                          DEPENDS ${whoosh_OUTPUT})
+       endif ()
+    endif ()
+  endforeach ()
+
+  #
+  #  PDF is special
+  #   This must be make, as sphinx generates a unix makefile
+  #
+  add_custom_command(
+    OUTPUT ${pdf_OUTPUT}
+    COMMAND make all-pdf
+    DEPENDS ${latex_OUTPUT}
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/pdf
+  )
+  add_custom_target(${FD_TARGET}-pdf DEPENDS ${pdf_OUTPUT})
+
+  #
+  #  Each install is a one-off
+  #
+  list(FIND FD_SPHINX_INSTALLS "pdf" indx)
+  if (NOT indx EQUAL -1)
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/pdf/${FD_RST_FILE_BASE}.pdf
+      DESTINATION "${instdir}"
+      PERMISSIONS OWNER_WRITE OWNER_READ GROUP_WRITE GROUP_READ WORLD_READ
+      OPTIONAL
+    )
+  endif ()
+  list(FIND FD_SPHINX_INSTALLS "html" indx)
+  if (NOT indx EQUAL -1)
+    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/html
+      DESTINATION ${instdir}
+      FILE_PERMISSIONS OWNER_WRITE OWNER_READ GROUP_WRITE GROUP_READ WORLD_READ
+      OPTIONAL
+    )
+  endif ()
+  list(FIND FD_SPHINX_INSTALLS "man" indx)
+  if (NOT indx EQUAL -1)
+    install(
+      DIRECTORY ${BLDDIR}/man
+      OPTIONAL
+      DESTINATION ${instdir}/man
+      COMPONENT userdocs
+      OPTIONAL
+    )
+  endif ()
+
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/README.txt superlu_dist5-5.1.3/scimake/README.txt
--- SuperLU_DIST_5.1.3/scimake/README.txt	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/README.txt	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,59 @@
+SciMake CONVENTIONS FOR CMAKE FILES AND MODULES
+
+$Rev: 1132 $ $Date: 2017-02-14 12:37:33 -0700 (Tue, 14 Feb 2017) $
+
+Copyright &copy; 2014-2015, Tech-X Corporation
+
+The scimake document is at
+https://ice.txcorp.com/support/wiki/CmakeCodingStandards
+This needs to be rewritten for the new structure.
+
+Links for conventions
+http://www.cmake.org/pipermail/cmake/2004-July/005283.html
+http://www.phy.bnl.gov/~bviren/lbne/code/ai/external/build/LCG/cmake-2.6.4/Modules/readme.txt
+
+To commit changes:
+
+  svn switch --relocate svn://svn.code.sf.net/p/scimake/code/trunk https://SOURCEFORGE_USERNAME@svn.code.sf.net/p/scimake/code/trunk
+
+SHARED FLAGS
+
+We are currently (20131201) using the following Booleans:
+USE_PYC_LIBS
+USE_SHARED_LIBS
+BUILD_SHARED_LIBS
+ENABLE_SHARED
+BUILD_WITH_SHARED_RUNTIME
+BUILD_WITH_PYCSH_RUNTIME
+along with package specific booleans.
+The above are overlapping and it is not clear what they mean. To regularize:
+
+0) Keep USE_PYC_LIBS and USE_SHARED_LIBS.  These define what one
+   links with.
+
+1) Remove ENABLE_SHARED.  This is a holdover from autotools.  The
+   corresponding CMake variable is BUILD_SHARED_LIBS:
+   http://www.cmake.org/pipermail/cmake/2003-December/004586.html
+
+2) Remove BUILD_WITH_PYCSH_RUNTIME.  This means no more than
+   BUILD_WITH_SHARED_RUNTIME, which means to add the /MD flags on Windows.
+
+So now only the following variables should be used:
+USE_PYC_LIBS: Look for installations in order: pycsh, pycst, sersh,
+  sermd (on Windows), ser
+USE_SHARED_LIBS: Look for installations in order: sersh, sermd (on Windows),
+  ser
+Otherwise: just look for static libs
+BUILD_SHARED_LIBS: CMake var meaning default libs to produce are shared. If
+  USE_SHARED_LIBS is not defined, it is set to true.
+BUILD_WITH_SHARED_RUNTIME: Add /MD to compiler flags on Windows
+
+The logic is implemented in the SciGetInstSubdirs function in
+SciFindPackage.cmake.  The USE_PYC_LIBS variable and other booleans
+must be set on the cmake command line, with
+e.g. -DUSE_PYC_LIBS:BOOL=TRUE.  When using Bilder this flag should
+be set via a bilder script.
+
+Target properties
+  http://www.kitware.com/blog/home/post/390
+
diff -ruN SuperLU_DIST_5.1.3/scimake/rmcomms.sed superlu_dist5-5.1.3/scimake/rmcomms.sed
--- SuperLU_DIST_5.1.3/scimake/rmcomms.sed	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/rmcomms.sed	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,22 @@
+#!/bin/sed -f
+# Simple Sed Program to remove all comments from c program
+# --------------------------------------------------------------------
+# This is a free shell script under GNU GPL version 2.0 or above
+# Copyright (C) 2005 nixCraft project.
+# Feedback/comment/suggestions : http://cyberciti.biz/fb/
+# -------------------------------------------------------------------------
+# This script is part of nixCraft shell script collection (NSSC)
+# Visit http://bash.cyberciti.biz/ for more information.
+# -------------------------------------------------------------------------
+# if no /* get next
+/\/\*/!b
+# here we've got an /*, append lines until get the corresponding
+# */
+:x
+/\*\//!{
+N
+bx
+}
+# delete /*...*/
+s/\/\*.*\*\///
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciCChecks.cmake superlu_dist5-5.1.3/scimake/SciCChecks.cmake
--- SuperLU_DIST_5.1.3/scimake/SciCChecks.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciCChecks.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,227 @@
+######################################################################
+#
+# SciCChecks: check various C capabilities
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+# Determine compiler version
+message("")
+include(${SCIMAKE_DIR}/SciFindCompilerVersion.cmake)
+SciFindCompilerVersion(C)
+if (NOT C_VERSION)
+  message(FATAL_ERROR "Could not determine compiler version.")
+endif ()
+
+# Type checks
+include(CheckTypeSize)
+
+# Print some sizes
+check_type_size(int SCI_SIZEOF_INT)
+message(STATUS "SCI_SIZEOF_INT = ${SCI_SIZEOF_INT}.")
+check_type_size("unsigned int" SCI_SIZEOF_UINT)
+message(STATUS "SCI_SIZEOF_UINT = ${SCI_SIZEOF_UINT}.")
+
+# Check for size_t
+set(CMAKE_REQUIRED_INCLUDES_SAV ${CMAKE_REQUIRED_INCLUDES})
+set(CMAKE_REQUIRED_INCLUDES stdio.h)
+check_type_size(size_t SCI_SIZEOF_SIZE_T)
+set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES_SAV})
+message(STATUS "SCI_SIZEOF_SIZE_T = ${SCI_SIZEOF_SIZE_T}.")
+if (HAVE_SCI_SIZEOF_SIZE_T)
+  message(STATUS "size_t defined.")
+  if ("${SCI_SIZEOF_UINT}" EQUAL "${SCI_SIZEOF_SIZE_T}")
+    set(UINT_IS_NOT_SIZE_T FALSE)
+    set(UINT_IS_SIZE_T TRUE)
+    set(INT_IS_NOT_SSIZE_T FALSE)
+    set(INT_IS_SSIZE_T TRUE)
+  else ()
+    set(UINT_IS_NOT_SIZE_T TRUE)
+    set(UINT_IS_SIZE_T FALSE)
+    set(INT_IS_NOT_SSIZE_T TRUE)
+    set(INT_IS_SSIZE_T FALSE)
+  endif ()
+else ()
+  message(STATUS "size_t not defined.")
+endif ()
+
+# Check for ssize_t.  We know Windows has SSIZE_T.
+# Some compilers (Intel) even on Unix may not have ssize_t.
+set(CMAKE_REQUIRED_INCLUDES_SAV ${CMAKE_REQUIRED_INCLUDES})
+set(CMAKE_REQUIRED_INCLUDES unistd.h)
+check_type_size(ssize_t SCI_SIZEOF_SSIZE_T)
+if (HAVE_SCI_SIZEOF_SSIZE_T)
+  message(STATUS "SCI_SIZEOF_SSIZE_T = ${SCI_SIZEOF_SSIZE_T}.")
+  message(STATUS "ssize_t defined.")
+  set(SCI_HAVE_SSIZE_T TRUE)
+else ()
+  message(STATUS "ssize_t not defined.")
+  set(SCI_HAVE_SSIZE_T FALSE)
+endif ()
+set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES_SAV})
+
+# Check whether time and sys/time can both be included
+include(CheckCSourceCompiles)
+check_c_source_compiles(
+"
+#include <sys/time.h>
+#include <time.h>
+int main(int argc, char** argv) {return 0;}
+"
+TIME_WITH_SYS_TIME
+)
+if (TIME_WITH_SYS_TIME)
+  if (DEBUG_CMAKE)
+    message("time.h and sys/time.h are compatible.")
+  endif ()
+  set(TIME_WITH_SYS_TIME 1 CACHE BOOL "Whether time and sys/time are compatible")
+else ()
+  if (DEBUG_CMAKE)
+    message("time.h and sys/time.h are NOT compatible.")
+  endif ()
+endif ()
+
+# Check whether struct tm is in sys/time
+include(CheckCSourceCompiles)
+check_c_source_compiles(
+"#include <sys/time.h>\nint main(int argc, char** argv) {struct tm tm;int *p = &tm.tm_sec;return !p;}"
+TM_IN_SYS_TIME
+)
+if (TM_IN_SYS_TIME)
+  if (DEBUG_CMAKE)
+    message("struct tm is in time.h.")
+  endif ()
+  set(TM_IN_SYS_TIME 1 CACHE BOOL "Whether struct tm is in sys/time.")
+else ()
+  if (DEBUG_CMAKE)
+    message("struct tm is NOT in time.h.")
+  endif ()
+endif ()
+
+# Get math into C for Windows
+if (WIN32)
+  set(_USE_MATH_DEFINES 1 CACHE BOOL "To bring in math defines on Windows.")
+endif ()
+
+#
+# Tech-X Builde type: FULL, meaning as optimized as possible
+# for this specific processor
+#
+
+set(Generic_FLAG " ")
+# Initialize the following flags to bogus values so we don't
+# get ISA_COMPILES and ISA_RUNS for ISAs that arent' really supported.
+set(SSE2_FLAG "compiler flags for this ISA not known")
+set(AVX_FLAG "compiler flags for this ISA not known")
+set(AVX2_FLAG "compiler flags for this ISA not known")
+set(AVX512_FLAG "compiler flags for this ISA not known")
+#
+# Determine flags by compiler
+#
+set(CMAKE_C_FLAGS_FULL "${CMAKE_C_FLAGS_RELEASE}")
+if (${C_COMPILER_ID} STREQUAL GNU)
+
+  set(CMAKE_C_FLAGS_FULL "${CMAKE_C_FLAGS_FULL} -ffast-math")
+  set(SSE2_FLAG "-msse2")
+  set(AVX_FLAG "-mavx")
+  if (APPLE)
+# On OS X direct to use clang assembler
+    set(AVX_FLAG "${AVX_FLAG} -Wa,-q")
+  endif ()
+  set(AVX2_FLAG "-mavx2")
+  set(AVX512_FLAG "-mavx512f")
+  set(OPENMP_FLAGS -fopenmp)
+
+elseif (${C_COMPILER_ID} STREQUAL Clang)
+
+  set(SSE2_FLAG "-msse2")
+  set(AVX_FLAG "-mavx")
+  set(AVX2_FLAG "-mavx2")
+
+elseif (${C_COMPILER_ID} STREQUAL Cray)
+
+  set(OPENMP_FLAGS "-h omp")
+
+elseif (${C_COMPILER_ID} STREQUAL Intel)
+
+  set(SSE2_FLAG "-msse2")
+  set(AVX_FLAG "-march=corei7-avx")
+  if (APPLE)
+# On OS X direct to use clang assembler.  Needs testing.
+    set(AVX_FLAG "${AVX_FLAG} -Wa,-q")
+  endif ()
+  set(AVX2_FLAG "-march=core-avx2")
+# As of 17.0, need to use -fopenmp.  Maybe before?  Change as discovered.
+  if (${C_VERSION} VERSION_LESS 17.0)
+    set(OPENMP_FLAGS "-openmp")
+  else ()
+    set(OPENMP_FLAGS "-fopenmp")
+  endif ()
+
+elseif (${C_COMPILER_ID} STREQUAL MSVC)
+
+  set(SSE2_FLAG "")
+  set(AVX_FLAG "/arch:AVX")
+  set(AVX2_FLAG "/arch:AVX2")
+  set(AVX512_FLAG "unknown architecture flags")
+  set(OPENMP_FLAGS "/openmp")
+
+elseif (${C_COMPILER_ID} STREQUAL PathScale)
+
+elseif (${C_COMPILER_ID} STREQUAL PGI)
+
+# Compiler optimization flags set based on "ultra" optimization in
+# flags.m4.  Overrides scimake default, since that had -Mipa=fast
+# (no inline).
+  set(CMAKE_C_FLAGS_FULL
+      "-fast -O3 -DNDEBUG -Munroll -Minline=levels:5 -Mipa=fast,inline -Mmovnt")
+  set(SSE2_FLAG "-Mvect=simd:128")
+  set(AVX_FLAG "-Mvect=simd:256")
+  # set(AVX_FLAG -h intrinsics)
+  set(OPENMP_FLAGS "-mp")
+
+elseif (${C_COMPILER_ID} STREQUAL XL)
+
+# CMake default XL compiler flags are very poor
+  set(CMAKE_C_FLAGS_RELEASE "-O3 -qnooptdebug")
+  set(CMAKE_C_FLAGS_FULL "${CMAKE_C_FLAGS_RELEASE}")
+  set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -qoptdebug")
+  set(CMAKE_C_FLAGS_DEBUG "-g -qnoopt -O0 -qcheck=all")
+  set(OPENMP_FLAGS "-qsmp=omp -qsmp=stackcheck")
+
+else ()
+  message(STATUS "FULL flags not known for ${C_COMPILER_ID}")
+endif ()
+
+SciPrintString("")
+SciPrintString("  CMake detected C implicit libraries:")
+SciPrintVar(CMAKE_C_IMPLICIT_LINK_LIBRARIES)
+SciPrintVar(CMAKE_C_IMPLICIT_LINK_DIRECTORIES)
+
+# Print the performance flags
+message(STATUS "Performance flags:")
+SciPrintVar(Generic_FLAG)
+SciPrintVar(SSE2_FLAG)
+SciPrintVar(AVX_FLAG)
+SciPrintVar(AVX2_FLAG)
+SciPrintVar(AVX512_FLAG)
+SciPrintVar(OPENMP_FLAGS)
+
+# Remove /MD etc for static builds on Windows, Add /bigobj.
+if (WIN32 AND NOT MINGW)
+  foreach (bldtype FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+    SciRplCompilerFlags(C ${bldtype})
+  endforeach ()
+endif ()
+
+# Print results
+message(STATUS "C compiler options:")
+foreach (bld FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+  SciPrintVar(CMAKE_C_FLAGS_${bld})
+endforeach ()
+SciPrintVar(CMAKE_C_FLAGS)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciCppCheck.cmake superlu_dist5-5.1.3/scimake/SciCppCheck.cmake
--- SuperLU_DIST_5.1.3/scimake/SciCppCheck.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciCppCheck.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,60 @@
+######################################################################
+#
+# SciCppCheck: Run cppcheck on a source directory.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+if (NOT SCIMAKE_DIR)
+  set(SCIMAKE_DIR "${TEST_SCIMAKE_DIR}")
+endif ()
+
+# Execute cppcheck
+set(CppCheck_suppargs)
+if (EXISTS ${CPPCHECK_SOURCE_DIR}/cppchecksupp.txt)
+  set(CppCheck_suppargs
+    --suppressions-list=${CPPCHECK_SOURCE_DIR}/cppchecksupp.txt
+  )
+endif ()
+# Run with --xml to get error ids
+# set(cmd ${CppCheck_cppcheck} --inline-suppr --enable=warning --xml ${CppCheck_suppargs} ${CPPCHECK_SOURCE_DIR})
+set(cmd ${CppCheck_cppcheck} --inline-suppr --enable=warning ${CppCheck_suppargs} ${CPPCHECK_SOURCE_DIR})
+# Convert to list for printing
+string(REPLACE ";" " " cmdstr "${cmd}")
+message(STATUS "Executing ${cmdstr}")
+execute_process(COMMAND ${cmd}
+  RESULT_VARIABLE EXEC_ERROR
+  OUTPUT_FILE ${CMAKE_BINARY_DIR}/cppcheck.out
+  ERROR_FILE ${CMAKE_BINARY_DIR}/cppcheck.err
+  WORKING_DIRECTORY ${CPPCHECK_SOURCE_DIR}
+)
+
+# Make sure cppcheck succeeded
+if (EXEC_ERROR)
+  message(STATUS "EXEC_ERROR      = ${EXEC_ERROR}")
+  message(FATAL_ERROR "Execution failure.")
+endif ()
+message(STATUS "Execution succeeded.")
+
+# Look for error messages
+file(STRINGS cppcheck.err CPPCHECK_ERRORS REGEX "(error)")
+string(LENGTH "${CPPCHECK_ERRORS}" errlen)
+if (errlen)
+  message(STATUS "cppcheck errors:")
+  string(REPLACE ";" "\n" CPPCHECK_ERRORS "${CPPCHECK_ERRORS}")
+  message(FATAL_ERROR ${CPPCHECK_ERRORS})
+endif ()
+
+# Look for warning messages
+file(STRINGS cppcheck.err CPPCHECK_WARNINGS REGEX "(warning)")
+string(LENGTH "${CPPCHECK_WARNINGS}" errlen)
+if (errlen)
+  message(STATUS "cppcheck warnings:")
+  string(REPLACE ";" "\n" CPPCHECK_WARNINGS "${CPPCHECK_WARNINGS}")
+  message(WARNING ${CPPCHECK_WARNINGS})
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciCxxChecks.cmake superlu_dist5-5.1.3/scimake/SciCxxChecks.cmake
--- SuperLU_DIST_5.1.3/scimake/SciCxxChecks.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciCxxChecks.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,232 @@
+######################################################################
+#
+# SciCxxChecks: check various C++ capabilities
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Determine compiler version
+message("")
+include(${SCIMAKE_DIR}/SciFindCompilerVersion.cmake)
+SciFindCompilerVersion(CXX)
+set(CXX ${CMAKE_CXX_COMPILER})
+if (NOT CXX_VERSION)
+  message(FATAL_ERROR "Could not determine C++ compiler version.")
+endif ()
+
+if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
+  if (NOT USING_MINGW)
+    if (NOT ("${CMAKE_CXX_FLAGS}" MATCHES "(^| )-pipe($| )"))
+      set(CMAKE_CXX_FLAGS "-pipe ${CMAKE_CXX_FLAGS}")
+    endif ()
+  endif ()
+# Enable c++11 whenever possible
+  if (CXX_VERSION VERSION_LESS "4.7.0")
+    set(CMAKE_CXX_FLAGS "-ansi ${CMAKE_CXX_FLAGS}")
+  else ()
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
+  endif ()
+# Make it an error not to give the return upe
+  if (CXX_VERSION VERSION_GREATER "4.4")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type")
+  endif ()
+# Obsolete directory installation dir
+  string(SUBSTRING ${CXX_VERSION} 0 1 CXX_MAJOR_VERSION)
+  set(CXX_COMP_LIB_SUBDIR gcc${CXX_MAJOR_VERSION})
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
+  string(SUBSTRING ${CXX_VERSION} 0 1 CXX_MAJOR_VERSION)
+  set(CXX_COMP_LIB_SUBDIR clang${CXX_MAJOR_VERSION})
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL Cray)
+  string(REGEX REPLACE "\\.[0-9]+-.*$" "" CXX_MAJOR_VERSION ${CXX_VERSION})
+  set(CXX_COMP_LIB_SUBDIR cray${CXX_MAJOR_VERSION})
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL Intel)
+  string(REGEX REPLACE "\\.[0-9]+.*$" "" CXX_MAJOR_VERSION ${CXX_VERSION})
+  set(CXX_COMP_LIB_SUBDIR icpc${CXX_MAJOR_VERSION})
+# Enable C++11.  Assuming Intel compiler supports.  If not, protect by version.
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL PathScale)
+  string(SUBSTRING ${CXX_VERSION} 0 1 CXX_MAJOR_VERSION)
+  set(CXX_COMP_LIB_SUBDIR path${CXX_MAJOR_VERSION})
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL PGI)
+  string(REGEX REPLACE "\\.[0-9]+-.*$" "" CXX_MAJOR_VERSION ${CXX_VERSION})
+  set(CXX_COMP_LIB_SUBDIR pgi${CXX_MAJOR_VERSION})
+# Don't automatically include standard library headers.
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --no_using_std")
+# Compiler optimization flags set based on "ultra" optimization in
+# flags.m4.  Overrides scimake default, since that had -Mipa=fast (no inline).
+  set(CMAKE_CXX_FLAGS_RELEASE
+    "-fast -O3 -DNDEBUG -Munroll -Minline=levels:5 -Mipa=fast,inline -Mmovnt")
+# For a fully-optimized build, set IPA options for linker too
+  set(CMAKE_EXE_LINKER_FLAGS_RELEASE
+    "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Mipa=fast,inline")
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL XL)
+# This should be the basename of the compiler
+  string(REGEX REPLACE "\\.[0-9]+.*$" "" CXX_MAJOR_VERSION ${CXX_VERSION})
+  string(REGEX REPLACE "^0+" "" CXX_MAJOR_VERSION ${CXX_MAJOR_VERSION})
+  get_filename_component(REL_CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER} NAME)
+# Since we install ben builds in a completely different directory, can
+# use same name for CXX_COMP_LIB_SUBDIR
+  if (${REL_CMAKE_CXX_COMPILER} MATCHES ".*_r$")
+    set(CXX_COMP_LIB_SUBDIR xlC_r${CXX_MAJOR_VERSION})
+  else ()
+    set(CXX_COMP_LIB_SUBDIR xlC${CXX_MAJOR_VERSION})
+  endif ()
+  set(SEPARATE_INSTANTIATIONS 1 CACHE BOOL "Whether to separate instantiations -- for correct compilation on xl")
+  set(CMAKE_CXX_FLAGS_RELEASE "-O3 -qarch=qp -qtune=qp")
+endif ()
+SciPrintVar(CXX_COMP_LIB_SUBDIR)
+
+# Look for includes
+include(CheckCXXSourceCompiles)
+include(CheckIncludeFileCXX)
+check_include_file_cxx(sstream HAVE_SSTREAM)
+check_include_file_cxx(iostream HAVE_IOSTREAM)
+
+# See whether generally declared statics work
+try_compile(HAVE_GENERALLY_DECLARED_STATICS ${PROJECT_BINARY_DIR}/scimake
+  ${SCIMAKE_DIR}/trycompile/gendeclstatics.cxx)
+set(HAVE_GENERALLY_DECLARED_STATICS ${HAVE_GENERALLY_DECLARED_STATICS} CACHE BOOL "Whether the C++ compiler allows generally declared templated static variables")
+if (HAVE_GENERALLY_DECLARED_STATICS)
+  if (DEBUG_CMAKE)
+    message("${SCIMAKE_DIR}/trycompile/gendeclstatics.cxx compiled.")
+  endif ()
+else ()
+  if (DEBUG_CMAKE)
+    message("${SCIMAKE_DIR}/trycompile/gendeclstatics.cxx did not compile.")
+  endif ()
+endif ()
+
+# See whether std::abs<double> known.
+try_compile(HAVE_STD_ABS_DOUBLE ${PROJECT_BINARY_DIR}/scimake
+  ${SCIMAKE_DIR}/trycompile/stdabsdbl.cxx)
+set(HAVE_STD_ABS_DOUBLE ${HAVE_STD_ABS_DOUBLE} CACHE BOOL "Whether the C++ compiler understands std::abs with double arg")
+if (HAVE_STD_ABS_DOUBLE)
+  if (DEBUG_CMAKE)
+    message("${SCIMAKE_DIR}/trycompile/stdabsdbl.cxx compiled.")
+  endif ()
+else ()
+  if (DEBUG_CMAKE)
+    message("${SCIMAKE_DIR}/trycompile/stdabsdbl.cxx did not compile.")
+  endif ()
+endif ()
+set(NOT_HAVE_STD_ABS_DOUBLE ${NOT_HAVE_STD_ABS_DOUBLE} CACHE BOOL "Define when the C++ compiler does not understand std::abs with double arg")
+
+# See whether compiler RTTI typeid is working properly
+try_run(RTTI_RUN_RESULT RTTI_COMPILES ${PROJECT_BINARY_DIR}/scimake
+  ${SCIMAKE_DIR}/trycompile/checkCompilerRTTI.cxx)
+message(STATUS "RTTI_RUN_RESULT = ${RTTI_RUN_RESULT}.")
+message(STATUS "RTTI_COMPILES = ${RTTI_COMPILES}.")
+set(RTTI_RUN_RESULT ${RTTI_RUN_RESULT} CACHE BOOL "Whether the C++ compiler builds executables that understand run-time type identification.")
+set(RTTI_COMPILES ${RTTI_COMPILES} CACHE BOOL "Whether the C++ compiler compiles source using run-time type identification.")
+if (RTTI_COMPILES)
+  if (DEBUG_CMAKE)
+    message("${SCIMAKE_DIR}/trycompile/checkCompilerRTTI.cxx compiled.")
+  endif ()
+  if (RTTI_RUN_RESULT EQUAL 0)
+    set(COMPILER_TYPEID_IS_VALID 1)
+    if (DEBUG_CMAKE)
+      message(STATUS "Compiler RTTI typeid test passed.")
+    endif ()
+  elseif ()
+    if (DEBUG_CMAKE)
+      message(WARNING "Compiler RTTI typeid test did not pass.")
+    endif ()
+  endif ()
+else ()
+  if (DEBUG_CMAKE)
+    message("${SCIMAKE_DIR}/trycompile/checkCompilerRTTI.cxx did not compile.")
+  endif ()
+endif ()
+
+# Check for iterator being same as pointer
+check_cxx_source_compiles(
+"
+#include <vector>
+void f(int* i){}
+void f(std::vector<int>::iterator i){}
+int main(int argc, char** argv) {return 0;}
+"
+VECTOR_ITERATOR_IS_NOT_POINTER
+)
+if (VECTOR_ITERATOR_IS_NOT_POINTER)
+  if (DEBUG_CMAKE)
+    message(STATUS "std::vector<int>::iterator and int* are not the same.")
+  endif ()
+else ()
+  if (DEBUG_CMAKE)
+    message(STATUS "std::vector<int>::iterator and int* are the same.")
+  endif ()
+endif ()
+set(VECTOR_ITERATOR_IS_NOT_POINTER ${VECTOR_ITERATOR_IS_NOT_POINTER} CACHE BOOL "Whether std::vector<int>::iterator is the same as int*")
+
+# Check for template alias exists
+check_cxx_source_compiles(
+"
+#include <vector>
+using vec_int = std::vector<int>;
+int main(int argc, char** argv) {return 0;}
+"
+HAVE_TEMPLATE_ALIAS
+)
+if (HAVE_TEMPLATE_ALIAS)
+  if (DEBUG_CMAKE)
+    message(STATUS "Template alias with using works.")
+  endif ()
+else ()
+  if (DEBUG_CMAKE)
+    message(STATUS "Template alias with using does not work.")
+  endif ()
+endif ()
+set(HAVE_TEMPLATE_ALIAS ${HAVE_TEMPLATE_ALIAS} CACHE BOOL "Whether template alias with using works")
+
+# Check for C++11 threads
+check_cxx_source_compiles(
+"
+#include <thread>
+int main(int argc, char** argv) {return 0;}
+"
+HAVE_CXX11_THREAD
+)
+if (HAVE_CXX11_THREAD)
+  if (DEBUG_CMAKE)
+    message(STATUS "Have C++11 threads.")
+  endif ()
+else ()
+  if (DEBUG_CMAKE)
+    message(STATUS "C++11 threads not present.")
+  endif ()
+endif ()
+set(HAVE_CXX11_THREAD ${HAVE_CXX11_THREAD} CACHE BOOL "Whether have C++11 threads")
+
+SciPrintString("")
+SciPrintString("  CMake detected C implicit libraries:")
+SciPrintVar(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES)
+SciPrintVar(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES)
+
+# Add in full flags
+set(CMAKE_CXX_FLAGS_FULL "${CMAKE_C_FLAGS_FULL}")
+
+# Remove /MD etc for static builds on Windows
+if (WIN32 AND NOT MINGW)
+  foreach (bldtype FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+    SciRplCompilerFlags(CXX ${bldtype})
+  endforeach ()
+endif ()
+
+# Check flags
+message(STATUS "C++ compiler options:")
+foreach (bld FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+  SciPrintVar(CMAKE_CXX_FLAGS_${bld})
+endforeach ()
+SciPrintVar(CMAKE_CXX_FLAGS)
+set(BUILD_FLAGS_VAR  CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE})
+set(BUILD_FLAGS_VAL "${${BUILD_FLAGS_VAR}}")
+set(CXXFLAGS "${BUILD_FLAGS_VAL} ${CMAKE_CXX_FLAGS}")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciDiffMacros.cmake superlu_dist5-5.1.3/scimake/SciDiffMacros.cmake
--- SuperLU_DIST_5.1.3/scimake/SciDiffMacros.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciDiffMacros.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,119 @@
+######################################################################
+#
+# SciDiffMacros: A collection of macros for diffing files
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+include(CMakeParseArguments)
+
+# macro for determining the file type
+macro(SciGetFileType FILENAME OUTVAR)
+  get_filename_component(FILETYPE_SUFFIX "${FILENAME}" EXT)
+  string(TOLOWER "${FILETYPE_SUFFIX}" FILETYPE_SUFFIX)
+  if (FILETYPE_SUFFIX STREQUAL ".h5" OR FILETYPE_SUFFIX STREQUAL ".vsh5")
+    set(${OUTVAR} "h5File")
+  elseif (FILETYPE_SUFFIX STREQUAL ".stl" OR FILETYPE_SUFFIX STREQUAL ".ply" OR FILETYPE_SUFFIX STREQUAL ".vtk")
+    set(${OUTVAR} "polysFile")
+  elseif (FILETYPE_SUFFIX STREQUAL ".stp" OR FILETYPE_SUFFIX STREQUAL ".step")
+    set(${OUTVAR} "stepFile")
+  else ()
+    set(${OUTVAR} "unknown")
+  endif ()
+endmacro()
+
+# macro for diffing two files
+macro(SciDiffFiles DIFF_TEST_FILE DIFF_DIFF_FILE DIFF_FILES_EQUAL)
+# specify optional arguments
+  # set(opts SORT)
+  # message(STATUS "SciDiffFiles called with ${ARGN}.")
+  set(oneValArgs TEST_DIR DIFF_DIR)
+  set(multiValArgs DIFFER SORTER)
+# parse optional arguments
+  cmake_parse_arguments(DIFF "${opts}" "${oneValArgs}" "${multiValArgs}"
+    ${ARGN}
+  )
+  message(STATUS "[SciDiffFiles] DIFF_DIFFER = ${DIFF_DIFFER}.")
+  message(STATUS "[SciDiffFiles] DIFF_SORTER = ${DIFF_SORTER}.")
+  # message(STATUS "[SciDiffFiles] PATH = $ENV{PATH}.")
+  if (WIN32)
+    execute_process(COMMAND where sort
+      COMMAND head -1
+      OUTPUT_VARIABLE sortloc
+      OUTPUT_STRIP_TRAILING_WHITESPACE
+    )
+    file(TO_CMAKE_PATH "${sortloc}" sortloc)
+  else ()
+    set(sortloc sort)
+  endif ()
+  message(STATUS "[SciDiffFiles] sortloc = ${sortloc}.")
+
+# if no diff file specified use the test file name with the results directory
+  set(DIFF_TEST_FILEPATH "${DIFF_TEST_FILE}")
+  set(DIFF_DIFF_FILEPATH "${DIFF_DIFF_FILE}")
+  if (DIFF_TEST_DIR)
+    set(DIFF_TEST_FILEPATH "${DIFF_TEST_DIR}/${DIFF_TEST_FILE}")
+  endif ()
+  if (DIFF_DIFF_DIR)
+    set(DIFF_DIFF_FILEPATH "${DIFF_DIFF_DIR}/${DIFF_DIFF_FILE}")
+  endif ()
+
+# make sure both files exist
+  message(STATUS "DIFF_TEST_FILEPATH = ${DIFF_TEST_FILEPATH}.")
+  if (NOT EXISTS "${DIFF_TEST_FILEPATH}")
+    set(${DIFF_FILES_EQUAL} FALSE)
+    message(FATAL_ERROR "TEST FILE ${DIFF_TEST_FILEPATH} does not exist.")
+  endif ()
+  message(STATUS "DIFF_DIFF_FILEPATH = ${DIFF_DIFF_FILEPATH}.")
+  if (NOT EXISTS "${DIFF_DIFF_FILEPATH}")
+    set(${DIFF_FILES_EQUAL} FALSE)
+    message(FATAL_ERROR "DIFF FILE ${DIFF_DIFF_FILEPATH} does not exist.")
+  endif ()
+
+# Sort the new file if requested
+  if (DIFF_SORTER)
+    # string(REPLACE ";" " " sorter "${DIFF_SORTER}")
+# Sort is a unix command, so need to pull off drive.  If we get a windows command,
+# will need to do differently
+    message(STATUS "[SciDiffFiles] Executing ${sortloc} -df \"${DIFF_TEST_FILEPATH}\".")
+    execute_process(COMMAND ${sortloc} -df "${DIFF_TEST_FILEPATH}"
+      OUTPUT_FILE "${DIFF_TEST_FILEPATH}.sorted"
+      RESULT_VARIABLE res
+    )
+    message (STATUS "res = ${res}.")
+    if (res EQUAL 0)
+      file(RENAME "${DIFF_TEST_FILEPATH}.sorted" "${DIFF_TEST_FILEPATH}")
+    else ()
+      message(STATUS "[SciDiffFiles] Execution failed.")
+    endif ()
+  endif ()
+
+# make sure a diff command is specified
+  if (NOT DIFF_DIFFER)
+    set(DIFF_DIFFER diff --strip-trailing-cr)
+  endif ()
+
+# SciAddUnitTest requires the differ to be passed as a single string, so
+# here we must separate the args for cmake.
+  separate_arguments(DIFF_DIFFER)
+  # message(STATUS "[SciDiffFiles] DIFF_DIFFER = ${DIFF_DIFFER}.")
+# execute the diff process
+  execute_process(COMMAND ${DIFF_DIFFER}
+    "${DIFF_TEST_FILEPATH}" "${DIFF_DIFF_FILEPATH}"
+    RESULT_VARIABLE DIFF_FILES_DIFFER)
+# return results in results variable
+  # message(STATUS "DIFF_FILES_DIFFER = ${DIFF_FILES_DIFFER}.")
+  if (DIFF_FILES_DIFFER)
+    set(${DIFF_FILES_EQUAL} FALSE)
+  else ()
+    set(${DIFF_FILES_EQUAL} TRUE)
+  endif ()
+  # message(STATUS "${DIFF_FILES_EQUAL} = ${${DIFF_FILES_EQUAL}}.")
+
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciDocLogic.cmake superlu_dist5-5.1.3/scimake/SciDocLogic.cmake
--- SuperLU_DIST_5.1.3/scimake/SciDocLogic.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciDocLogic.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,65 @@
+######################################################################
+#
+# To encourage our software to use the same documentation, moving
+# functionality to a common cmake file
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+# This script sets the following variables which are also options:
+#   ENABLE_DEVELDOCS
+#   ENABLE_USERDOCS
+#   ENABLE_WEBDOCS
+#
+# It also finds the following packages:
+#   Doxygen
+#   Sphinx
+#
+# Logic can be found in bilder/README/README-docs.txt
+# Reading that document should be done if trying to understand this
+# logic
+#
+#
+#####################################################################
+
+# develdocs
+option(ENABLE_DEVELDOCS "Enable developer documentation to be built" ON)
+# Below needed?
+# set(ENABLE_DEVELDOCS ${ENABLE_DEVELDOCS})
+find_package(SciDoxygen)
+
+# Need to know for userdocs
+option(ENABLE_USERDOCS "Enable user documentation to be built" ON)
+option(ENABLE_WEBDOCS "Install documentation at top" OFF)
+find_package(SciSphinx)
+if (SPHINX_FOUND)
+  # message(STATUS "SPHINX_EXECUTABLE found.")
+  # message(STATUS "SPHINX_EXECUTABLE = ${SPHINX_EXECUTABLE}")
+else ()
+  message(STATUS "SPHINX_EXECUTABLE not found. User documentation cannot be built.")
+  set(ENABLE_USERDOCS FALSE)
+endif ()
+
+# Enable installation of a minimal MathJax
+option(ENABLE_MINMATHJAX "Install minimal MathJax with user documentation" ON)
+
+# ENABLE_WEBDOCS installs documentation at top.  Useful for putting on web.
+# If installing at top, cannot do both userdocs and develdocs
+if (ENABLE_WEBDOCS AND ENABLE_USERDOCS)
+  set(ENABLE_DEVELDOCS FALSE)
+endif ()
+
+# Final results
+if (ENABLE_USERDOCS)
+  message(STATUS "User documentation will be buildable.")
+else ()
+  message(STATUS "User documentation will not be buildable.")
+endif ()
+if (ENABLE_DEVELDOCS)
+  message(STATUS "Developer documentation will be buildable.")
+else ()
+  message(STATUS "Developer documentation will not be buildable.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciFinalize.cmake superlu_dist5-5.1.3/scimake/SciFinalize.cmake
--- SuperLU_DIST_5.1.3/scimake/SciFinalize.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciFinalize.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,162 @@
+######################################################################
+#
+# SciFinalize: Do the final stuff for any package
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+######################################################################
+#
+# Configure standard files
+#
+######################################################################
+
+if (NOT DEFINED INSTALL_CONFIG_HEADERS)
+  set(INSTALL_CONFIG_HEADERS TRUE)
+endif ()
+
+foreach (configfile config configrev)
+  if (EXISTS ${CMAKE_SOURCE_DIR}/${configfile}-cmake.h.in)
+    configure_file(${CMAKE_SOURCE_DIR}/${configfile}-cmake.h.in ${configfile}.h)
+    if (INSTALL_CONFIG_HEADERS)
+      install(FILES ${CMAKE_BINARY_DIR}/${configfile}.h DESTINATION include
+        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
+                    GROUP_READ ${SCI_GROUP_WRITE} GROUP_EXECUTE
+                    ${SCI_WORLD_PROGRAM_PERMS}
+        RENAME ${CMAKE_PROJECT_NAME}_${configfile}.h
+      )
+    endif ()
+    if (CMAKE_Fortran_COMPILER_WORKS)
+      execute_process(
+        COMMAND sed -f ${SCIMAKE_DIR}/rmcomms.sed
+        INPUT_FILE ${CMAKE_BINARY_DIR}/${configfile}.h
+        OUTPUT_FILE ${CMAKE_BINARY_DIR}/${configfile}.f
+      )
+      if (INSTALL_CONFIG_HEADERS)
+        install(FILES ${CMAKE_BINARY_DIR}/${configfile}.f DESTINATION include
+          PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
+                      GROUP_READ ${SCI_GROUP_WRITE} GROUP_EXECUTE
+                      ${SCI_WORLD_PROGRAM_PERMS}
+          RENAME ${CMAKE_PROJECT_NAME}_${configfile}.f
+        )
+      endif ()
+    endif ()
+  elseif (EXISTS ${CMAKE_SOURCE_DIR}/${configfile}-cmake.f.in)
+    configure_file(${CMAKE_SOURCE_DIR}/${configfile}-cmake.f.in ${configfile}.f)
+    if (INSTALL_CONFIG_HEADERS)
+      install(FILES ${CMAKE_BINARY_DIR}/${configfile}.f DESTINATION include
+        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
+                    GROUP_READ ${SCI_GROUP_WRITE} GROUP_EXECUTE
+                    ${SCI_WORLD_PROGRAM_PERMS}
+        RENAME ${CMAKE_PROJECT_NAME}_${configfile}.f
+      )
+    endif ()
+  endif ()
+endforeach ()
+if (EXISTS ${CMAKE_BINARY_DIR}/config.h)
+  set(HAVE_CONFIG_H TRUE)
+endif ()
+if (EXISTS ${CMAKE_BINARY_DIR}/config.f)
+  set(HAVE_CONFIG_F TRUE)
+endif ()
+
+######################################################################
+#
+# Create additional files
+#
+######################################################################
+
+######################################################################
+#
+# Install files
+#
+######################################################################
+
+set(CONFIG_FILES ${CONFIG_FILES}
+  ${CONFIG_SUMMARY} ${CMAKE_BINARY_DIR}/scimakeCache.txt
+  ${CMAKE_SOURCE_DIR}/svninfo.txt
+)
+
+file(GLOB CONFIG_SCRIPTS
+  ${CMAKE_BINARY_DIR}/*-${CMAKE_PROJECT_NAME}-*-config.sh
+  ${CMAKE_BINARY_DIR}/*-${CMAKE_PROJECT_NAME}-*-build.sh
+)
+
+if (COMMON_INSTALL) # Whether all builds install in one place
+  if (${ENABLE_PARALLEL})
+    set(sharedir share-par)
+  else ()
+    set(sharedir share-ser)
+  endif ()
+else ()
+  set(sharedir share)
+endif ()
+
+install(FILES ${CONFIG_FILES} DESTINATION ${sharedir}
+  PERMISSIONS OWNER_READ OWNER_WRITE
+              GROUP_READ ${SCI_GROUP_WRITE}
+              ${SCI_WORLD_FILE_PERMS}
+  OPTIONAL
+)
+install(PROGRAMS ${CONFIG_SCRIPTS} DESTINATION ${sharedir}
+  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
+              GROUP_READ ${SCI_GROUP_WRITE} GROUP_EXECUTE
+              ${SCI_WORLD_PROGRAM_PERMS}
+)
+
+# Generate autotools files for inclusion
+# Important for transitioning between autotools and scimake.
+# Used for fciowrappers, ntcc_transport, netlib_lite, fmcfm, facets, etc.
+if (NOT DEFINED GENERATE_AUTOTOOLS)
+  set(GENERATE_AUTOTOOLS TRUE)
+endif ()
+if (GENERATE_AUTOTOOLS AND EXISTS ${CMAKE_SOURCE_DIR}/configure.ac)
+  message(STATUS "make dist will generating autotools files for inclusion in distribution.")
+  add_custom_target(cleanconf
+    COMMAND config/cleanconf.sh
+    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+  )
+  add_dependencies(dist cleanconf)
+endif ()
+
+######################################################################
+#
+# Package source.  Package is responsible for binary packaging.
+#
+######################################################################
+
+# CPack version numbers for release tarball name.
+if (NOT CPACK_PACKAGE_VERSION_PATCH)
+  set(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
+  set(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
+  set(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH}-r${PROJECT_REV})
+endif ()
+
+if (NOT DEFINED CPACK_SOURCE_PACKAGE_FILE_NAME)
+  set(CPACK_SOURCE_PACKAGE_FILE_NAME
+    "${CMAKE_PROJECT_NAME}-${PROJECT_VERSION}-r${PROJECT_REV}"
+    CACHE INTERNAL "tarball basename"
+  )
+endif ()
+set(CPACK_SOURCE_GENERATOR TGZ)
+set(CPACK_SOURCE_IGNORE_FILES
+  "/CVS/;/.svn/;.swp$;.#;/#;/build/;/serial/;/ser/;/parallel/;/par/;~;/preconfig.out;/autom4te.cache/;/.config")
+include(CPack)
+
+# add make dist target
+add_custom_target(dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)
+
+######################################################################
+#
+# Conclude
+#
+######################################################################
+
+SciPrintString("")
+SciPrintString("${CMAKE_PROJECT_NAME} configured with scimake.")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciFindCompilerVersion.cmake superlu_dist5-5.1.3/scimake/SciFindCompilerVersion.cmake
--- SuperLU_DIST_5.1.3/scimake/SciFindCompilerVersion.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciFindCompilerVersion.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,181 @@
+######################################################################
+#
+# SciFindCompilerVersion: Determine compiler version for any compiler
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+macro(SciFindCompilerVersion COMPLANG)
+
+  set(${COMPLANG}_COMPILER ${CMAKE_${COMPLANG}_COMPILER})
+  set(${COMPLANG}_COMPILER_ID ${CMAKE_${COMPLANG}_COMPILER_ID})
+  message(STATUS "Checking ${COMPLANG} compiler.")
+  SciPrintVar(${COMPLANG}_COMPILER)
+  SciPrintVar(${COMPLANG}_COMPILER_ID)
+
+  if (CMAKE_${COMPLANG}_COMPILER_ID STREQUAL GNU OR
+      CMAKE_${COMPLANG}_COMPILER_ID STREQUAL Clang)
+  # Get first line of version string
+    execute_process(
+      COMMAND ${CMAKE_${COMPLANG}_COMPILER} --version
+      OUTPUT_FILE ${PROJECT_BINARY_DIR}/_version.txt
+    )
+    file(STRINGS ${PROJECT_BINARY_DIR}/_version.txt _version_strlist)
+    file(REMOVE ${PROJECT_BINARY_DIR}/_version.txt)
+    list(GET _version_strlist 0 _version_str)
+  # New approach, just try to match a three-number version
+  # then a two-number version
+    # message(STATUS "_version_str = '${_version_str}'")
+    string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
+      _version_tmp "${_version_str}"
+    )
+    if (NOT _version_tmp)
+      string(REGEX MATCH "[0-9]+\\.[0-9]+" _version_tmp "${_version_str}")
+    endif ()
+    if (NOT _version_tmp)
+      message(ERROR "Unable to extract version from '${_version_str}'")
+    endif ()
+
+  elseif (CMAKE_${COMPLANG}_COMPILER_ID STREQUAL Cray)
+    exec_program(${CMAKE_${COMPLANG}_COMPILER}
+      ARGS -V
+      OUTPUT_VARIABLE _version_tmp
+    )
+    string(REGEX MATCH
+      "Version [0-9]+\\.[0-9]+\\.[0-9]+"
+      _version_tmp
+      ${_version_tmp}
+    )
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+    string(REPLACE "Version " "" _version_tmp ${_version_tmp})
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+  elseif (CMAKE_${COMPLANG}_COMPILER_ID STREQUAL Intel)
+    message(STATUS "Intel: CMAKE_${COMPLANG}_COMPILER = ${CMAKE_${COMPLANG}_COMPILER}")
+    if (WIN32)
+    if (CMAKE_${COMPLANG}_COMPILER MATCHES "icl")
+      exec_program(${CMAKE_${COMPLANG}_COMPILER}
+        OUTPUT_VARIABLE _version_str
+      )
+      string(REGEX MATCH
+        "Version [0-9][0-9]\\.[0-9]\\.[0-9]\\.[0-9][0-9][0-9]"
+        _version_tmp
+        ${_version_str}
+      )
+      message(STATUS "Evaluating '${_version_str}'")
+      message(STATUS "Got '${_version_tmp}'")
+      string(REPLACE "Version " "" _version_tmp ${_version_tmp})
+    elseif (CMAKE_${COMPLANG}_COMPILER MATCHES "mpi")
+      exec_program(
+        icl OUTPUT_VARIABLE _version_str
+      )
+      string(REGEX MATCH
+        "Version [0-9][0-9]\\.[0-9]\\.[0-9]\\.[0-9][0-9][0-9]"
+        _version_tmp
+        ${_version_str}
+      )
+      message(STATUS "Evaluating '${_version_str}'")
+      message(STATUS "Got '${_version_tmp}'")
+      string(REPLACE "Version " "" _version_tmp ${_version_tmp})
+    endif ()
+    else ()
+    if (CMAKE_${COMPLANG}_COMPILER MATCHES "icc"
+        OR CMAKE_${COMPLANG}_COMPILER MATCHES "icpc"
+        OR CMAKE_${COMPLANG}_COMPILER MATCHES "mpi"
+        OR CMAKE_${COMPLANG}_COMPILER MATCHES "CC"
+        OR CMAKE_${COMPLANG}_COMPILER MATCHES "cc")
+      execute_process(
+        COMMAND ${CMAKE_${COMPLANG}_COMPILER} --version
+        OUTPUT_VARIABLE _version_str
+      )
+      # Works on verus: '(ICC) m.n.r' no trailing space on stix
+      # string(REGEX MATCH '(GCC) [0-9]+\\.[0-9]+\\.[0-9]+'
+      string(REGEX MATCH ".ICC. [0-9]+\\.[0-9]+"
+        _version_tmp "${_version_str}"
+      )
+      if (DEBUG_CMAKE)
+        message(STATUS "Evaluating '${_version_str}'")
+        message(STATUS "Got '${_version_tmp}'")
+      endif ()
+
+      if (NOT _version_tmp)
+        message(ERROR "Unable to extract version from '${_version_str}'")
+      endif ()
+      string(REPLACE "(ICC) " "" _version_tmp "${_version_tmp}")
+      string(STRIP ${_version_tmp} _version_tmp)
+    endif ()
+    endif ()
+  elseif (CMAKE_${COMPLANG}_COMPILER MATCHES "cl")
+
+    exec_program(${CMAKE_${COMPLANG}_COMPILER}
+      OUTPUT_VARIABLE _version_tmp
+    )
+    string(REGEX MATCH
+      "Version [0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+)? for"
+      _version_tmp
+      ${_version_tmp}
+    )
+    string(REPLACE "Version " "" _version_tmp ${_version_tmp})
+    string(REPLACE " for" "" _version_tmp ${_version_tmp})
+
+  elseif ("${CMAKE_${COMPLANG}_COMPILER_ID}" STREQUAL PathScale)
+
+    exec_program(${CMAKE_${COMPLANG}_COMPILER}
+      ARGS --version
+      OUTPUT_VARIABLE _version_tmp
+    )
+    # ARGS -v # This used to work above?
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+    string(REGEX MATCH
+      "Version [0-9]+\\.[0-9]"
+      _version_tmp
+      ${_version_tmp}
+    )
+    string(REPLACE "Version " "" _version_tmp ${_version_tmp})
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+
+  elseif ("${CMAKE_${COMPLANG}_COMPILER_ID}" STREQUAL PGI)
+
+    exec_program(${CMAKE_${COMPLANG}_COMPILER}
+      ARGS -V
+      OUTPUT_VARIABLE _version_tmp
+    )
+    string(REGEX MATCH
+      "pgCC [0-9]+\\.[0-9]+-[0-9]+"
+      _version_tmp
+      ${_version_tmp}
+    )
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+    string(REPLACE "pgCC " "" _version_tmp ${_version_tmp})
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+
+  elseif ("${CMAKE_${COMPLANG}_COMPILER_ID}" STREQUAL XL)
+
+    exec_program(${CMAKE_${COMPLANG}_COMPILER}
+      ARGS -qversion
+      OUTPUT_VARIABLE _version_tmp
+    )
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+    string(REGEX MATCH
+      "Version: .*"
+      _version_tmp
+      ${_version_tmp}
+    )
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+    string(REPLACE "Version: " "" _version_tmp ${_version_tmp})
+    # MESSAGE("_version_tmp = ${_version_tmp}.")
+
+  else ()
+
+    message(FATAL_ERROR "Unknown compiler ID, ${CMAKE_${COMPLANG}_COMPILER_ID}.")
+
+  endif ()
+
+  set(${COMPLANG}_VERSION ${_version_tmp})
+  SciPrintVar(${COMPLANG}_VERSION)
+
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciFortranChecks.cmake superlu_dist5-5.1.3/scimake/SciFortranChecks.cmake
--- SuperLU_DIST_5.1.3/scimake/SciFortranChecks.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciFortranChecks.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,344 @@
+######################################################################
+#
+# SciFortranChecks: check various Fortran capabilities
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+# THIS FILE NEEDS ALOT OF WORK.  JUST STARTING WITH GNU.
+#
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciFortranFindVersion.cmake)
+
+# Set the lib subdir from the Compiler ID and version
+if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL Cray)
+  string(REGEX REPLACE "\\.[0-9]+-.*$" "" Fortran_MAJOR_VERSION ${Fortran_VERSION})
+  set(Fortran_COMP_LIB_SUBDIR cray${Fortran_MAJOR_VERSION})
+  set(CMAKE_Fortran_FLAGS_RELEASE "-O2")
+  set(FC_MOD_FLAGS "-emf")
+  set(FC_DOUBLE_FLAGS "-s real64")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL GNU)
+  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS}")
+  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+  if (NOT USING_MINGW)
+    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -pipe")
+    set(CMAKE_Fortran_FLAGS_RELEASE "-fPIC -O3")
+    set(CMAKE_Fortran_FLAGS_DEBUG   "-fPIC -O0 -g -Wp,-DDEBUG")
+  endif ()
+  string(SUBSTRING ${Fortran_VERSION} 0 3 Fortran_MAJOR_VERSION)
+  set(Fortran_COMP_LIB_SUBDIR gfortran${Fortran_MAJOR_VERSION})
+  set(FC_DOUBLE_FLAGS "-fdefault-real-8 -fdefault-double-8")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL Intel)
+  string(REGEX REPLACE "\\.[0-9]+.*$" "" Fortran_MAJOR_VERSION ${Fortran_VERSION})
+  set(Fortran_COMP_LIB_SUBDIR icpc${Fortran_MAJOR_VERSION})
+  # CMake sets it to i_dynamic by default but that's debateable
+  set(CMAKE_SHARED_LIBRARY_LINK_Fortran_FLAGS "")
+  set(FC_DOUBLE_FLAGS "-autodouble")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL PathScale)
+  string(SUBSTRING ${Fortran_VERSION} 0 1 Fortran_MAJOR_VERSION)
+  set(Fortran_COMP_LIB_SUBDIR path${Fortran_MAJOR_VERSION})
+  set(FC_DOUBLE_FLAGS "-r8")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL PGI)
+  string(REGEX REPLACE "\\.[0-9]+-.*$" "" Fortran_MAJOR_VERSION ${Fortran_VERSION})
+  set(Fortran_COMP_LIB_SUBDIR pgi${Fortran_MAJOR_VERSION})
+# Compiler optimization flags set based on "ultra" optimization in
+# flags.m4.  Overrides scimake default, since that had -Mipa=fast (no inline).
+  set(CMAKE_Fortran_FLAGS_RELEASE
+    "-fast -O3 -DNDEBUG -Munroll -Minline=levels:5 -Mipa=fast,inline -Mmovnt")
+# For a fully-optimized build, set IPA options for linker too
+  set(CMAKE_EXE_LINKER_FLAGS_RELEASE
+    "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Mipa=fast,inline")
+  set(FC_DOUBLE_FLAGS "-r8")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL XL)
+# This should be the basename of the compiler
+  string(REGEX REPLACE "\\.[0-9]+.*$" "" Fortran_MAJOR_VERSION ${Fortran_VERSION})
+  string(REGEX REPLACE "^0+" "" Fortran_MAJOR_VERSION ${Fortran_MAJOR_VERSION})
+#SriV. want file name without extension.
+  get_filename_component(REL_CMAKE_Fortran_COMPILER ${CMAKE_Fortran_COMPILER} NAME_WE)
+# Since we install ben builds in a completely different directory, can
+# use same name for Fortran_COMP_LIB_SUBDIR
+  if (${REL_CMAKE_Fortran_COMPILER} MATCHES ".*_r$")
+    set(Fortran_COMP_LIB_SUBDIR xlC_r${Fortran_MAJOR_VERSION})
+  else ()
+    set(Fortran_COMP_LIB_SUBDIR xlC${Fortran_MAJOR_VERSION})
+  endif ()
+  set(SEPARATE_INSTANTIATIONS 1 CACHE BOOL "Whether to separate instantiations -- for correct compilation on xl")
+# Customize flags because cmake defaults are very poor
+  set(CMAKE_Fortran_FLAGS_RELEASE "-O3 -qnooptdebug -qreport -qmaxmem=-1")
+  set(CMAKE_Fortran_FLAGS_FULL "${CMAKE_Fortran_FLAGS_RELEASE}")
+  set(CMAKE_Fortran_FLAGS_RELWITHDEBINFO "-O2")
+  set(CMAKE_Fortran_FLAGS_DEBUG "-g -qnoopt -O0 -qcheck")
+  set(FC_DOUBLE_FLAGS "-qautodbl=dbl4")
+endif ()
+if (SCI_FC_PROMOTE_REAL_TO_DOUBLE)
+  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${FC_DOUBLE_FLAGS}")
+endif ()
+set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${FC_MOD_FLAGS}")
+SciPrintString("  Fortran_COMP_LIB_SUBDIR = ${Fortran_COMP_LIB_SUBDIR}")
+
+SciPrintString("")
+SciPrintString("  CMake detected fortran implicit libraries:")
+SciPrintVar(CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES)
+SciPrintVar(CMAKE_Fortran_IMPLICIT_LINK_DIRECTORIES)
+
+# The variables below will contain the libraries needed to add to
+# a C++ linked executable when it links fortran compiled objects
+set(Fortran_IMPLICIT_LIBRARY_DIRS "")
+set(Fortran_IMPLICIT_LIBRARY_NAMES "")
+set(Fortran_IMPLICIT_LIBRARIES "")
+set(Fortran_IGNORED_LIBRARIES "")
+foreach (scilib ${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES})
+
+# Whether finished with this library
+  set(libprocessed FALSE)
+
+# Ignore mpi and io libraries
+  if (${scilib} MATCHES "^mpich")
+    if (DEBUG_CMAKE)
+      message("${scilib} is an MPICH library.  Ignoring.")
+    endif ()
+    set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+    set(libprocessed TRUE)
+  elseif (${scilib} MATCHES "^open-" OR ${scilib} MATCHES "^mpi$" OR
+        ${scilib} MATCHES "^mpi_usempi")
+# mpi_mpifh needed for fortran messaging
+    if (DEBUG_CMAKE)
+      message("${scilib} is an OpenMPI library.  Ignoring.")
+    endif ()
+    set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+    set(libprocessed TRUE)
+  elseif (${scilib} MATCHES "^darshan-" OR ${scilib} MATCHES "^libmpi")
+    if (DEBUG_CMAKE)
+      message("${scilib} is an MPI library.  Ignoring.")
+    endif ()
+    set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+    set(libprocessed TRUE)
+  endif ()
+
+# Ignore system libraries
+  if (NOT libprocessed)
+    foreach (lib pthread dl nsl util rt m c z)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is a system library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# Ignore communication and queue libraries
+  if (NOT libprocessed)
+    foreach (lib rdmacm ibverbs torque)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is an infiniband or torque library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# Pull out Hopper Cray wrapper libraries added by wrapper for any compiler
+  if (NOT libprocessed)
+    foreach (lib fftw3 fftw3f rca AtpSigHandler AtpSigHCommData mpl sma xpmem dmapp ugni pmi alpslli alpsutil udreg)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is a Hopper Cray pgi wrapper library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# Pull out Hopper Cray gnu wrapper libraries that wrapper adds
+  if ((${C_COMPILER_ID} STREQUAL "GNU") AND NOT libprocessed)
+    foreach (lib scicpp_gnu sci_gnu_mp sci_gnu)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is a Hopper Cray gnu wrapper library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# Pull out Hopper Cray pgi wrapper libraries that wrapper adds
+  if ((${C_COMPILER_ID} STREQUAL "Intel") AND NOT libprocessed)
+    foreach (lib scicpp_intel sci_intel_mp zceh svml ipgo intlc irc_s iomp5)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is a Hopper Cray pgi wrapper library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# Pull out Hopper Cray pgi wrapper libraries that wrapper adds
+  if ((${C_COMPILER_ID} STREQUAL "PGI") AND NOT libprocessed)
+    foreach (lib scicpp_pgi sci_pgi_mp zceh stdmpz Cmpz pgmp nspgc pgc)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is a Hopper Cray pgi wrapper library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# Ignore bgp libraries
+  if (NOT libprocessed)
+    foreach (lib opa dcmf.cnk dcmfcoll.cnk SPI.cna)
+      if (${scilib} STREQUAL ${lib})
+        if (DEBUG_CMAKE)
+          message("${scilib} is a BGP compute node library.  Ignoring.")
+        endif ()
+        set(Fortran_IGNORED_LIBRARIES ${Fortran_IGNORED_LIBRARIES} ${scilib})
+        set(libprocessed TRUE)
+        break ()
+      endif ()
+    endforeach ()
+  endif ()
+
+# The remaining libs are added
+  if (NOT libprocessed)
+    set(scilibpathvar ${scilib}_LIBRARY)        # Cache variable
+    # message("Looking for ${scilib}.")
+    find_library(${scilibpathvar} ${scilib}
+        PATHS ${CMAKE_Fortran_IMPLICIT_LINK_DIRECTORIES}
+        NO_DEFAULT_PATH)
+    set(scilibpath ${${scilibpathvar}})
+    if (scilibpath)
+      set(Fortran_IMPLICIT_LIBRARIES ${Fortran_IMPLICIT_LIBRARIES} ${scilibpath})
+      set(Fortran_IMPLICIT_LIBRARY_NAMES ${Fortran_IMPLICIT_LIBRARY_NAMES} ${scilib})
+      get_filename_component(scilibdir ${scilibpath}/.. REALPATH)
+      set(Fortran_IMPLICIT_LIBRARY_DIRS ${Fortran_IMPLICIT_LIBRARY_DIRS} ${scilibdir})
+    endif ()
+  endif ()
+
+endforeach ()
+list(REMOVE_DUPLICATES Fortran_IMPLICIT_LIBRARIES)
+list(REMOVE_DUPLICATES Fortran_IMPLICIT_LIBRARY_NAMES)
+list(REMOVE_DUPLICATES Fortran_IMPLICIT_LIBRARY_DIRS)
+SciGetStaticLibs("${Fortran_IMPLICIT_LIBRARIES}" Fortran_IMPLICIT_STLIBS)
+
+if (Fortran_IMPLICIT_LIBFLAGS)
+  string(STRIP ${Fortran_IMPLICIT_LIBFLAGS} Fortran_IMPLICIT_LIBFLAGS)
+endif ()
+SciPrintString("")
+SciPrintString("  RESULTS FOR fortran implicit libraries:")
+SciPrintVar(Fortran_IMPLICIT_LIBRARIES)
+SciPrintVar(Fortran_IMPLICIT_LIBRARY_NAMES)
+SciPrintVar(Fortran_IMPLICIT_LIBRARY_DIRS)
+SciPrintVar(Fortran_IMPLICIT_STLIBS)
+SciPrintVar(Fortran_IMPLICIT_LIBFLAGS)
+SciPrintVar(Fortran_IGNORED_LIBRARIES)
+
+# Set release flags.  Assume same for now.  If different, we will
+# put in the if, elseif coding.
+if ("${CMAKE_BUILD_TYPE}" STREQUAL RELEASE AND OPTIMIZATION)
+  set(CMAKE_Fortran_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})
+  SciPrintVar(CMAKE_Fortran_FLAGS_RELEASE)
+endif ()
+
+# Default macros for the fortran-C interface
+set(FC_FUNC  "FC_FUNC(name,NAME) name ## _")
+set(FC_FUNC_ "FC_FUNC_(name,NAME) name ## _")
+
+#
+# Detect name mangling convention used between Fortran and C
+#
+include(FortranCInterface)
+FortranCInterface_HEADER(
+  ${CMAKE_BINARY_DIR}/FCMangle.h
+  MACRO_NAMESPACE "FC_"
+  SYMBOL_NAMESPACE "FC_"
+  SYMBOLS mysub mymod:my_sub
+)
+
+file(STRINGS ${CMAKE_BINARY_DIR}/FCMangle.h CONTENTS REGEX "FC_GLOBAL\\(.*,.*\\) +(.*)")
+string(REGEX MATCH "FC_GLOBAL\\(.*,.*\\) +(.*)" RESULT "${CONTENTS}")
+set(FC_FUNC "FC_FUNC(name,NAME) ${CMAKE_MATCH_1}")
+
+file(STRINGS ${CMAKE_BINARY_DIR}/FCMangle.h CONTENTS REGEX "FC_GLOBAL_\\(.*,.*\\) +(.*)")
+string(REGEX MATCH "FC_GLOBAL_\\(.*,.*\\) +(.*)" RESULT "${CONTENTS}")
+set(FC_FUNC_ "FC_FUNC_(name,NAME) ${CMAKE_MATCH_1}")
+
+#
+# Detect module file name
+#
+message(STATUS "Compiling trycompile/modulesrcfile.f90.")
+execute_process(
+  COMMAND ${CMAKE_Fortran_COMPILER};${FC_MOD_FLAGS};-c;${SCIMAKE_DIR}/trycompile/modulesrcfile.f90;-o;modulesrcfile.o
+  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+set(SCI_FC_MODULENAME_CAPITALIZED FALSE)
+set(SCI_FC_MODULE_SUFFIX)
+if (EXISTS ${CMAKE_BINARY_DIR}/modulename.mod)
+  set(SCI_FC_MODULE_SUFFIX mod)
+  file(REMOVE ${CMAKE_BINARY_DIR}/modulename.mod)
+elseif (EXISTS ${CMAKE_BINARY_DIR}/modulename.MOD)
+  set(SCI_FC_MODULE_SUFFIX MOD)
+  file(REMOVE ${CMAKE_BINARY_DIR}/modulename.MOD)
+elseif (EXISTS ${CMAKE_BINARY_DIR}/MODULENAME.MOD)
+  set(SCI_FC_MODULE_SUFFIX MOD)
+  set(SCI_FC_MODULENAME_CAPITALIZED TRUE)
+  file(REMOVE ${CMAKE_BINARY_DIR}/MODULENAME.MOD)
+elseif (EXISTS ${CMAKE_BINARY_DIR}/MODULENAME.mod)
+  set(SCI_FC_MODULE_SUFFIX mod)
+  set(SCI_FC_MODULENAME_CAPITALIZED TRUE)
+  file(REMOVE ${CMAKE_BINARY_DIR}/MODULENAME.mod)
+endif ()
+file(REMOVE ${CMAKE_BINARY_DIR}/modulesrcfile.o)
+
+get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)
+SciPrintVar(Fortran_COMPILER_NAME)
+SciPrintVar(SCI_FC_MODULENAME_CAPITALIZED)
+SciPrintVar(SCI_FC_MODULE_SUFFIX)
+set(CMAKE_Fortran_FLAGS_FULL ${CMAKE_Fortran_FLAGS_RELEASE})
+SciPrintVar(CMAKE_Fortran_FLAGS_FULL)
+SciPrintVar(CMAKE_Fortran_FLAGS_RELEASE)
+SciPrintVar(CMAKE_Fortran_FLAGS_RELWITHDEBINFO)
+SciPrintVar(CMAKE_Fortran_FLAGS_DEBUG)
+SciPrintVar(CMAKE_Fortran_FLAGS)
+
+#  This checks for the FortranC interface including the mangling
+#  http://www.cmake.org/cmake/help/git-master/module/FortranCInterface.html
+option(CHECK_FortranC_INTERFACE "Determine whether to determine interoperability" OFF)
+
+if (CHECK_FortranC_INTERFACE)
+  set(HAVE_F90_INTERFACE FALSE)
+  if (CMAKE_Fortran_COMPILER_SUPPORTS_F90)
+    include(FortranCInterface)
+    FortranCInterface_VERIFY(CXX)
+    if (FortranCInterface_VERIFIED_CXX)
+      set(HAVE_F90_INTERFACE TRUE)
+      FortranCInterface_HEADER(${CMAKE_CURRENT_BINARY_DIR}/FCMangle.h
+        MACRO_NAMESPACE "FC_")
+    endif ()
+  else ()
+    message(STATUS "${CMAKE_Fortran_COMPILER} does not appear to support F90")
+  endif ()
+  SciPrintVar(FortranCInterface_GLOBAL_SYMBOLS)
+  SciPrintVar(FortranCInterface_MODULE_SYMBOLS)
+endif ()
+
+SciPrintString("")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciFortranDouble.cmake superlu_dist5-5.1.3/scimake/SciFortranDouble.cmake
--- SuperLU_DIST_5.1.3/scimake/SciFortranDouble.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciFortranDouble.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,16 @@
+######################################################################
+#
+# : Compute ntcc specific options
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${FC_DOUBLE_FLAGS}")
+# message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
+message(STATUS "CMAKE_Fortran_FLAGS = ${CMAKE_Fortran_FLAGS}")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciFortranFindVersion.cmake superlu_dist5-5.1.3/scimake/SciFortranFindVersion.cmake
--- SuperLU_DIST_5.1.3/scimake/SciFortranFindVersion.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciFortranFindVersion.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,201 @@
+######################################################################
+#
+# SciFortranFindVersion: Determine compiler version for any compiler
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+SciPrintString("")
+SciPrintString("CMAKE_Fortran_COMPILER_ID = '${CMAKE_Fortran_COMPILER_ID}'.")
+if ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL Cray)
+  exec_program(${CMAKE_Fortran_COMPILER}
+    ARGS -V
+    OUTPUT_VARIABLE fc_version_tmp
+  )
+  string(REGEX MATCH
+    "Version [0-9]+\\.[0-9]+\\.[0-9]+"
+    fc_version_tmp
+    ${fc_version_tmp}
+  )
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+  string(REPLACE "Version " "" fc_version_tmp ${fc_version_tmp})
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL GNU)
+# exec_program is deprecated
+  execute_process(
+    COMMAND ${CMAKE_Fortran_COMPILER} --version
+    OUTPUT_VARIABLE fc_version_str
+  )
+# Test for ubuntu
+  # set(fc_version_str "gcc(Ubuntu 4.4.3-4ubuntu5) 4.4.3 ")
+  # message(STATUS "fc_version_str = '${fc_version_str}'")
+# Works on stix: '(GCC) m.n.r' no trailing space on stix
+  # string(REGEX MATCH '(GCC) [0-9]+\\.[0-9]+\\.[0-9]+'
+  string(REGEX MATCH ".GCC. [0-9]+\\.[0-9]+\\.[0-9]+"
+    fc_version_tmp "${fc_version_str}"
+  )
+  # message(STATUS "fc_version_tmp = '${fc_version_tmp}'")
+
+  if (NOT fc_version_tmp)
+# Works for Ubuntu
+    string(REGEX MATCH " [0-9]+\\.[0-9]+\\.[0-9]+ *\$"
+      fc_version_tmp "${fc_version_str}"
+    )
+  endif ()
+
+  if (NOT fc_version_tmp)
+# Now try to get Gentoo...not very robust either, but nothing else is working.
+# Could do with more sophisticated options such as multiline regex/ \s
+     string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"  fc_version_tmp "${fc_version_str}" )
+  endif ()
+
+#  message(STATUS "fc_version_tmp = '${fc_version_tmp}'")
+#  message(STATUS "fc_version_str = '${fc_version_str}'")
+  if (NOT fc_version_tmp)
+    message(ERROR "Unable to extract version from '${fc_version_str}'")
+  endif ()
+
+  # message(STATUS "fc_version_tmp = '${fc_version_tmp}'")
+  # message(STATUS "fc_version_tmp = '${fc_version_tmp}'")
+  string(REPLACE "(GCC) " "" fc_version_tmp "${fc_version_tmp}")
+  string(STRIP ${fc_version_tmp} fc_version_tmp)
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL Intel)
+  if (WIN32)
+    if (CMAKE_Fortran_COMPILER MATCHES "mpi")
+      exec_program(
+        ifort OUTPUT_VARIABLE fc_version_str
+      )
+    string(REGEX MATCH
+      "Version [0-9][0-9]\\.[0-9]\\.[0-9]\\.[0-9][0-9][0-9]"
+      fc_version_tmp
+      ${fc_version_str}
+    )
+    string(REPLACE "Version " "" fc_version_tmp ${fc_version_tmp})
+    else ()
+    exec_program(${CMAKE_Fortran_COMPILER}
+      OUTPUT_VARIABLE fc_version_str
+    )
+    string(REGEX MATCH
+      "Version [0-9][0-9]\\.[0-9]\\.[0-9]\\.[0-9][0-9][0-9]"
+      fc_version_tmp
+      ${fc_version_str}
+    )
+    string(REPLACE "Version " "" fc_version_tmp ${fc_version_tmp})
+    endif ()
+  else ()
+    execute_process(
+      COMMAND ${CMAKE_Fortran_COMPILER} --version
+      OUTPUT_VARIABLE fc_version_str
+    )
+    message(STATUS "fc_version_tmp = '${fc_version_str}'")
+    # Works on verus: '(ICC) m.n.r' no trailing space on stix
+    # string(REGEX MATCH '(GCC) [0-9]+\\.[0-9]+\\.[0-9]+'
+
+#
+# Roopa: Check if its ICC or IFORT
+#
+    string(FIND ${fc_version_str} "(ICC)" fc_icc_tmp)
+    string(FIND ${fc_version_str} "(IFORT)" fc_ifort_tmp)
+
+    if (${fc_icc_tmp} STRGREATER "0")
+      if (DEBUG_CMAKE)
+        message(STATUS "Using Intel's icc compiler")
+      endif ()
+      set(fc_type_tmp "ICC")
+    elseif (${fc_ifort_tmp} STRGREATER "0")
+      if (DEBUG_CMAKE)
+        message(STATUS "Using Intel's ifort compiler")
+      endif ()
+      set(fc_type_tmp "IFORT")
+    endif ()
+
+    string(REGEX MATCH ".${fc_type_tmp}. [0-9]+\\.[0-9]+\\.[0-9]+"
+      fc_version_tmp "${fc_version_str}"
+    )
+
+    if (NOT fc_version_tmp)
+      string(REGEX MATCH ".${fc_type_tmp}. [0-9]+\\.[0-9]+"  fc_version_tmp "${fc_version_str}" )
+    endif ()
+
+    if (NOT fc_version_tmp)
+      message(STATUS "hi there")
+      message(ERROR "Unable to extract version from '${fc_version_str}'")
+    endif ()
+
+    string(REPLACE "(${fc_type_tmp}) " "" fc_version_tmp "${fc_version_tmp}")
+    string(STRIP ${fc_version_tmp} fc_version_tmp)
+  endif ()
+elseif (CMAKE_Fortran_COMPILER MATCHES "icl")
+  exec_program(${CMAKE_Fortran_COMPILER}
+    OUTPUT_VARIABLE fc_version_tmp
+  )
+  string(REGEX MATCH
+    "w_cproc_p_[0-9][0-9]\\.[0-9]\\.[0-9][0-9][0-9]"
+    fc_version_tmp
+    ${fc_version_tmp}
+  )
+  string(REPLACE "w_cproc_p_" "" fc_version_tmp ${fc_version_tmp})
+elseif (CMAKE_Fortran_COMPILER MATCHES "cl")
+  exec_program(${CMAKE_Fortran_COMPILER}
+    OUTPUT_VARIABLE fc_version_tmp
+  )
+  string(REGEX MATCH
+    "Version [0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+ for"
+    fc_version_tmp
+    ${fc_version_tmp}
+  )
+  string(REPLACE "Version " "" fc_version_tmp ${fc_version_tmp})
+  string(REPLACE " for" "" fc_version_tmp ${fc_version_tmp})
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL PathScale)
+  exec_program(${CMAKE_Fortran_COMPILER}
+    ARGS --version
+    OUTPUT_VARIABLE fc_version_tmp
+  )
+  # ARGS -v # This used to work above?
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+  string(REGEX MATCH
+    "Version [0-9]+\\.[0-9]"
+    fc_version_tmp
+    ${fc_version_tmp}
+  )
+  string(REPLACE "Version " "" fc_version_tmp ${fc_version_tmp})
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL PGI)
+  exec_program(${CMAKE_Fortran_COMPILER}
+    ARGS -V
+    OUTPUT_VARIABLE fc_version_tmp
+  )
+  string(REGEX MATCH
+    "pgf90 [0-9]+\\.[0-9]+-[0-9]+"
+    fc_version_tmp
+    ${fc_version_tmp}
+  )
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+  string(REPLACE "pgf90 " "" fc_version_tmp ${fc_version_tmp})
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+elseif ("${CMAKE_Fortran_COMPILER_ID}" STREQUAL XL)
+  exec_program(${CMAKE_Fortran_COMPILER}
+    ARGS -qversion
+    OUTPUT_VARIABLE fc_version_tmp
+  )
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+  string(REGEX MATCH
+    "Version: .*"
+    fc_version_tmp
+    ${fc_version_tmp}
+  )
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+  string(REPLACE "Version: " "" fc_version_tmp ${fc_version_tmp})
+  # MESSAGE("fc_version_tmp = ${fc_version_tmp}.")
+# This does not work, as it sets Boost_INCLUDE_DIR
+else ()
+  message(FATAL_ERROR "Unknown compiler ID, ${CMAKE_Fortran_COMPILER_ID}.")
+endif ()
+
+set(Fortran_VERSION ${fc_version_tmp})
+SciPrintString("  Fortran_VERSION = '${Fortran_VERSION}'")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciFuncsMacros.cmake superlu_dist5-5.1.3/scimake/SciFuncsMacros.cmake
--- SuperLU_DIST_5.1.3/scimake/SciFuncsMacros.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciFuncsMacros.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,277 @@
+######################################################################
+#
+# @file    SciFuncsMacros.cmake
+#
+# @brief   Various functions and macros used by Tech-X scimake
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+#
+# SciPrintString: print a string in a status message as well as to
+#   ${CONFIG_SUMMARY}
+# Args:
+#   str the string
+#
+macro(SciPrintString str)
+  message(STATUS "${str}")
+  if (DEFINED CONFIG_SUMMARY)
+    file(APPEND "${CONFIG_SUMMARY}" "${str}\n")
+  else ()
+    message(STATUS "NOTE: [SciFuncsMacros] Variable CONFIG_SUMMARY is not defined, SciPrintString is unable to write to the summary file.")
+  endif ()
+endmacro()
+
+#
+# SciPrintVar: print a variable with standard formatting
+# Args:
+#   var the name of the variable
+#
+macro(SciPrintVar var)
+  string(LENGTH "${var}" lens)
+  math(EXPR lenb "35 - ${lens}")
+  if (lenb GREATER 0)
+    string(RANDOM LENGTH ${lenb} ALPHABET " " blstr)
+  else ()
+    set(blstr "")
+  endif ()
+  SciPrintString("  ${var}${blstr}= ${${var}}")
+endmacro()
+
+#
+# Print all cmake variables generated by SciFindPackage
+# Args:
+#   pkg: the name of the package
+#
+macro(SciPrintCMakeResults pkg)
+  # message("--------- RESULTS FOR ${pkg} ---------")
+  SciPrintString("")
+  SciPrintString("RESULTS FOR ${pkg}:")
+  set(sfxs ROOT_DIR CONFIG_CMAKE CONFIG_VERSION_CMAKE PROGRAMS FILES INCLUDE_DIRS MODULE_DIRS LIBFLAGS LIBRARY_DIRS LIBRARY_NAMES LIBRARIES PLUGINS STLIBS)
+  if (WIN32)
+    set(sfxs ${sfxs} DLLS)
+  elseif (APPLE)
+    set(sfxs ${sfxs} FRAMEWORK_DIRS FRAMEWORK_NAMES FRAMEWORKS)
+  endif ()
+  set(sfxs ${sfxs} DEFINITIONS)
+  foreach (varsfx ${sfxs})
+    SciPrintVar(${pkg}_${varsfx})
+  endforeach ()
+endmacro()
+
+#
+# Print all autotools variables generated by SciFindPackage
+# Args:
+#   pkg: the name of the package
+#
+macro(SciPrintAutotoolsResults pkg)
+  # message("--------- RESULTS FOR ${pkg} ---------")
+  SciPrintString("")
+  SciPrintString("RESULTS FOR ${pkg}:")
+  foreach (varsfx ROOT_DIR DIR INCDIRS MODDIRS LIBS ALIBS)
+    SciPrintVar(${pkg}_${varsfx})
+  endforeach ()
+  if (WIN32)
+    SciPrintVar(${pkg}_DLLS)
+  endif ()
+endmacro()
+
+#
+# Install an executable in its own subdir
+#
+# EXECNAME: the name of the executable and also its installation subdir
+# LIBSSFX: ${EXECNAME}_${LIBSSFX} holds the libraries that need to be installed
+#
+macro(SciInstallExecutable)
+  set(oneValArgs EXECNAME LIBSSFX)
+  cmake_parse_arguments(TIE_
+    "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN}
+)
+  install(TARGETS ${TIE_EXECNAME}
+    RUNTIME DESTINATION ${TIE_EXECNAME}/bin
+    LIBRARY DESTINATION ${TIE_EXECNAME}/lib
+    ARCHIVE DESTINATION ${TIE_EXECNAME}/lib
+    PERMISSIONS OWNER_READ OWNER_WRITE
+                GROUP_READ ${SCI_GROUP_WRITE}
+                ${SCI_WORLD_FILE_PERMS}
+    COMPONENT ${TIE_EXECNAME}
+)
+  if (BUILD_SHARED_LIBS)
+# Install libraries into each executable installation
+    install(TARGETS txustd ${${TIE_EXECNAME}_${TIE_LIBSSFX}}
+      RUNTIME DESTINATION ${TIE_EXECNAME}/bin
+      LIBRARY DESTINATION ${TIE_EXECNAME}/lib
+      ARCHIVE DESTINATION ${TIE_EXECNAME}/lib
+      PERMISSIONS OWNER_READ OWNER_WRITE
+                  GROUP_READ ${SCI_GROUP_WRITE}
+                  ${SCI_WORLD_FILE_PERMS}
+      COMPONENT ${TIE_EXECNAME}
+)
+  endif ()
+endmacro()
+
+#
+# Replace compiler flags in specified flags variable
+#
+# Required arguments:
+# CMPTYPE: compiler type
+# BLDTYPE: build type
+#
+# Optional arguments:
+# RMVFLG: the flag to be removed
+# ADDFLG: the flag to be added
+#
+macro(SciRplCompilerFlags CMPTYPE BLDTYPE)
+# parse the path argument
+  set(oneValArgs RMVFLG ADDFLG)
+# parse the input argument
+  cmake_parse_arguments(RPLFLGS "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN})
+
+  # Determine default values if none specified
+  if (NOT RPLFLGS_RMVFLG)
+    if (WIN32)
+      if (BUILD_WITH_SHARED_RUNTIME OR BUILD_SHARED_LIBS)
+        set(RPLFLGS_RMVFLG "/MT")
+      else ()
+        set(RPLFLGS_RMVFLG "/MD")
+      endif ()
+    endif ()
+  endif ()
+  if (NOT RPLFLGS_ADDFLG)
+    if (WIN32)
+      if (BUILD_WITH_SHARED_RUNTIME OR BUILD_SHARED_LIBS)
+        set(RPLFLGS_ADDFLG "/MD")
+      else ()
+        set(RPLFLGS_ADDFLG "/MT")
+      endif ()
+    endif ()
+  endif ()
+
+  if (NOT (RPLFLGS_RMVFLG EQUAL RPLFLGS_ADDFLG))
+# Assemble the variable name and copy the associated value
+    set(thisvar "CMAKE_${CMPTYPE}_FLAGS_${BLDTYPE}")
+    set(thisval "${${thisvar}}")
+# check if the remove flag is in the current variable
+    string(FIND "${thisval}" "${RPLFLGS_RMVFLG}" md_found)
+    if (md_found EQUAL -1) # if not just append the desired one
+      string(FIND "${thisval}" "${RPLFLGS_ADDFLG}" des_found)
+      if (des_found EQUAL -1) # only add desired one if not there
+        set(thisval "${thisval} ${RPLFLGS_ADDFLG}")
+      endif ()
+    else () # otherwise replace the unwantedflag with the wanted flag
+      string(REPLACE "${RPLFLGS_RMVFLG}" "${RPLFLGS_ADDFLG}" thisval "${thisval}")
+    endif ()
+  endif ()
+
+# append /bigobj to the current compiler arguments
+# ...but only if it's not already there
+  string(FIND "${thisval}" "/bigobj" bigobj_found)
+  if (bigobj_found EQUAL -1)
+    set(thisval "${thisval} /bigobj")
+  endif ()
+# force the compiler argument to be recached
+  set(${thisvar} "${thisval}" CACHE STRING "Flags used by the ${CMPTYPE} compiler during ${BLDTYPE} builds" FORCE)
+
+endmacro()
+
+#
+# Add generation of doxygen documentation, generated in doxdir
+# Args:
+#   doxdir: the subdirectory where the documentation is made
+#
+macro(SciAddDox doxdir)
+  if (ENABLE_DEVELDOCS)
+    find_package(SciDoxygen)
+    if (DOXYGEN_FOUND)
+      find_package(SciGraphviz)
+    else ()
+      message(FATAL_ERROR "ENABLE_DEVELDOCS set, but Doxygen not found.")
+    endif ()
+    if (Graphviz_dot)
+      set(HAVE_GRAPHVIZ_DOT YES)
+    else ()
+      set(HAVE_GRAPHVIZ_DOT NO)
+    endif ()
+    message(STATUS "Adding ${doxdir} subdir.")
+    add_subdirectory(${doxdir})
+  else ()
+    message(STATUS "ENABLE_DEVELDOCS not set. Not adding ${doxdir} subdir.")
+  endif ()
+endmacro()
+
+#
+# Add static analysis, when build matches bld
+# Args:
+#   bld: the build that must be matched for cppcheck to be run
+#
+macro(SciAddCppCheck bld)
+  find_package(SciCppCheck)
+  find_package(SciPcre)  # Needed for location of shared libs
+  if (PCRE_FOUND)
+    SciAddSharedLibDirs(ADDPATH ${Pcre_LIBRARY_DIRS})
+    if (CPPCHECK_FOUND)
+      SciCppCheckSource(${bld})
+    endif ()
+  endif ()
+endmacro()
+
+#
+# Generate an export header that has a general define for the
+# export header created by cmake
+# basedef The define that will lead to the directory definition
+# incincfile The name of the file to be generated
+# dirdef The definition created when basedef is not defined
+# dirincfile The file to be included
+#
+macro(SciGenExportHeaderContainer basedef incincfile dirdef dirincfile)
+  get_filename_component(def ${incincfile} NAME)
+  string(TOUPPER "${def}" def)
+  string(REGEX REPLACE "[\\.-]" "_" def "${def}")
+  set(declinc
+"
+/**
+ * Generated header, do not edit
+ */
+#ifndef ${def}
+#define ${def}
+
+#if !defined(${basedef}) || defined(__CUDA_ARCH__)
+#define ${dirdef}
+#endif
+#include <${dirincfile}>
+
+#endif // ${def}
+
+"
+  )
+  file(WRITE ${incincfile} "${declinc}")
+endmacro()
+
+# A macro for using hdf5
+#
+# libvar the library variable to add hdf5 to
+# Validated for cori-gcc-ser, cori-intel-ser, cori-gcc-par, cori-intel-par
+macro (addHdf5MpiZDlLibs libvar)
+  link_directories(${Hdf5_LIBRARY_DIRS})
+  if (ENABLE_PARALLEL AND NOT SCI_HAVE_MPICXX_COMPILER_WRAPPER)
+    link_directories(${MPI_LIBRARY_DIRS})
+  endif ()
+
+  if (USE_STATIC_SYSLIBS)
+    set(${libvar} ${${libvar}} ${Hdf5_STLIBS})
+  else ()
+    set(${libvar} ${${libvar}} ${Hdf5_LIBRARY_NAMES})
+  endif ()
+  if (ENABLE_PARALLEL AND NOT SCI_HAVE_MPICXX_COMPILER_WRAPPER)
+    set(${libvar} ${${libvar}} ${MPI_LIBRARIES})
+  endif ()
+  set(${libvar} ${${libvar}} ${Z_LIBRARY_NAMES})
+  if (LINUX)
+    set(${libvar} ${${libvar}} dl)
+  endif ()
+endmacro ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciGetDepsFromInstall.cmake superlu_dist5-5.1.3/scimake/SciGetDepsFromInstall.cmake
--- SuperLU_DIST_5.1.3/scimake/SciGetDepsFromInstall.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciGetDepsFromInstall.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,121 @@
+######################################################################
+#
+# SciGetDepsFromInstall: From the installation of one project, find
+#   the installations of other other projects from config.summary.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciSeparateLibs.cmake)
+
+# SciGetDepsFromInstall
+#
+# Args:
+#  cmname:     cmake name of the dependency to find variables of
+#  founddir: directory of the found installation, under which one finds
+#              config.summary
+#  atname:   autotools name of the dependency to find variables of
+#
+function(SciGetDepsFromInstall cmname founddir atname)
+
+  if (EXISTS ${founddir}/share/config.summary)
+    set(configfile ${founddir}/share/config.summary)
+  else ()
+    message(STATUS "${founddir}/share/config.summary does not exist!")
+    if (ENABLE_PARALLEL)
+      set(configfilecand ${founddir}/share-par/config.summary)
+    else ()
+      set(configfilecand ${founddir}/share-ser/config.summary)
+    endif ()
+    if (EXISTS ${configfilecand})
+      set(configfile ${configfilecand})
+    else ()
+      message(STATUS "${configfilecand} does not exist!")
+      return()
+    endif ()
+  endif ()
+  if (DEBUG_CMAKE)
+    message(STATUS "configfile = ${configfile}")
+  endif ()
+
+# Look for a cmake name in the file
+  foreach (sfx DIR PROGRAMS FILES INCLUDE_DIRS MODULE_DIRS LIBFLAGS LIBRARY_DIRS LIBRARY_NAMES LIBRARIES STLIBS)
+    file(STRINGS ${configfile} ${cmname}_${sfx} REGEX ${cmname}_${sfx})
+    # message("${cmname}_${sfx} = ${${cmname}_${sfx}}")
+    string(REGEX REPLACE "^.*= *" "" ${cmname}_${sfx} "${${cmname}_${sfx}}")
+    # message("${cmname}_${sfx} = ${${cmname}_${sfx}}")
+# This comes with \;, so must remove \
+    string(REGEX REPLACE "\\\\" "" ${cmname}_${sfx} "${${cmname}_${sfx}}")
+    # message("${cmname}_${sfx} = ${${cmname}_${sfx}}")
+  endforeach ()
+
+# For each empty variable, try to resolve using the autotools name
+# Includes
+  if (NOT ${cmname}_INCLUDE_DIRS)
+    file(STRINGS ${configfile} ${atname}_INCDIR REGEX ${atname}_INCDIR)
+    string(REGEX REPLACE "^.*: *" "" ${atname}_INCDIR "${${atname}_INCDIR}")
+    string(REPLACE " " ";" ${cmname}_INCLUDE_DIRS "${${atname}_INCDIR}")
+  endif ()
+  if (${cmname}_INCLUDE_DIRS)
+    set(HAVE_${cmname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+    set(HAVE_${atname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+  endif ()
+# Modules
+  if (NOT ${cmname}_MODULE_DIRS)
+    file(STRINGS ${configfile} ${atname}_MODDIR REGEX ${atname}_MODDIR)
+    string(REGEX REPLACE "^.*: *" "" ${atname}_MODDIR "${${atname}_MODDIR}")
+    string(REPLACE " " ";" ${cmname}_MODULE_DIRS "${${atname}_MODDIR}")
+  endif ()
+  if (${cmname}_MODULE_DIRS)
+    set(HAVE_${cmname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+    set(HAVE_${atname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+  endif ()
+# Libraries
+  if (NOT ${cmname}_LIBRARIES)
+    file(STRINGS ${configfile} ${atname}_LIBS REGEX ${atname}_LIBS)
+    string(REGEX REPLACE "^.*: *" "" ${atname}_LIBS "${${atname}_LIBS}")
+    SciMakeLibList(${atname}_LIBS)
+# Separate out the different cmake variables
+    SciSeparateLibs("${${atname}_LIBS}" ${cmname}_LIBFLAGS ${cmname}_LIBRARIES ${cmname}_LIBRARY_DIRS ${cmname}_LIBRARY_NAMES ${cmname}_FRAMEWORKS)
+  endif ()
+  if (${cmname}_LIBRARIES)
+    set(HAVE_${cmname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+    set(HAVE_${atname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+  endif ()
+  if (NOT ${cmname}_STLIBS)
+    file(STRINGS ${configfile} ${atname}_ALIBS REGEX ${atname}_ALIBS)
+    string(REGEX REPLACE "^.*: *" "" ${atname}_ALIBS "${${atname}_ALIBS}")
+    string(REPLACE " " ";" ${cmname}_STLIBS "${${atname}_ALIBS}")
+  endif ()
+  if (${cmname}_LIBRARIES OR ${cmname}_INCLUDE_DIRS)
+# Assume finding either works
+    set(HAVE_${cmname} 1 CACHE BOOL "Whether the ${cmname} package found.")
+    set(HAVE_${atname} 1 CACHE BOOL "Whether the ${atname} package found.")
+    set(${cmname}_FOUND TRUE PARENT_SCOPE)
+    set(${atname}_FOUND TRUE PARENT_SCOPE)
+  else ()
+    set(HAVE_${cmname} 0 CACHE BOOL "Whether the ${cmname} package found.")
+    set(HAVE_${atname} 0 CACHE BOOL "Whether the ${atname} package found.")
+    set(${cmname}_FOUND FALSE PARENT_SCOPE)
+    set(${atname}_FOUND FALSE PARENT_SCOPE)
+  endif ()
+
+# Get all vars to parent scope
+  foreach (varpart DIR PROGRAMS FILES INCLUDE_DIRS MODULE_DIRS LIBFLAGS LIBRARY_DIRS LIBRARY_NAMES LIBRARIES STLIBS)
+    set(${cmname}_${varpart} "${${cmname}_${varpart}}" PARENT_SCOPE)
+  endforeach ()
+  SciPrintCMakeResults(${cmname})
+
+# Print atname variables
+  foreach (varpart INCDIR MODDIR LIBS ALIBS)
+    set(${atname}_${varpart} "${${atname}_${varpart}}" PARENT_SCOPE)
+  endforeach ()
+  SciPrintAutotoolsResults(${atname})
+
+endfunction()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciInit.cmake superlu_dist5-5.1.3/scimake/SciInit.cmake
--- SuperLU_DIST_5.1.3/scimake/SciInit.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciInit.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,339 @@
+######################################################################
+#
+# SciInit: Do the startup stuff for any package
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+string(TOUPPER ${PROJECT_NAME} PROJECT_NAMEUC)
+set(HAVE_CMAKE 1 CACHE STRING "Whether built with CMake")
+set(${PROJECT_NAMEUC}_HAVE_CMAKE TRUE)
+
+#####################################################################
+#
+# Pull in useful macros
+#
+#####################################################################
+
+if (NOT DEFINED SCIMAKE_DIR)
+  message(STATUS "[SciInit]: CMAKE_CURRENT_LIST_DIR = ${CMAKE_CURRENT_LIST_DIR}.")
+  set(SCIMAKE_DIR ${CMAKE_CURRENT_LIST_DIR})
+endif ()
+include(${SCIMAKE_DIR}/SciFuncsMacros.cmake)
+include(${SCIMAKE_DIR}/SciGetDepsFromInstall.cmake)
+include(GenerateExportHeader)
+
+#####################################################################
+#
+# Clean out config.summary
+#
+#####################################################################
+
+set(CONFIG_SUMMARY ${PROJECT_BINARY_DIR}/config.summary)
+file(REMOVE ${CONFIG_SUMMARY})
+SciPrintString(
+  "CONFIGURING ${CMAKE_PROJECT_NAME} with scimake in ${PROJECT_BINARY_DIR}.")
+
+#####################################################################
+#
+# Set some vars to upper case for case-free comparisons
+#
+#####################################################################
+
+if (NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE Release)
+endif ()
+message(STATUS "[SciInit]: CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}.")
+string(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UC)
+
+#####################################################################
+#
+# Set group write installation perm
+# May need to be different on different machines
+#
+#####################################################################
+
+if (NOT DEFINED SCI_GROUP_WRITE)
+  set(SCI_GROUP_WRITE ""
+      CACHE STRING "Value of group write permissions")
+endif ()
+if (NOT DEFINED SCI_WORLD_PERMS)
+  set(SCI_WORLD_PERMS ""
+      CACHE STRING "Value of world permissions")
+endif ()
+
+#####################################################################
+#
+# Set OS-specific flags
+#
+#####################################################################
+
+message(STATUS "[SciInit]: CMAKE_SYSTEM_NAME is ${CMAKE_SYSTEM_NAME}")
+if ("${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
+  set(MACX TRUE CACHE BOOL "True if compiled on Mac OS X")
+  message(STATUS "[SciInit]: Compiling on MAC, CMAKE_SYSTEM = ${CMAKE_SYSTEM}.")
+elseif ("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
+  set(LINUX TRUE CACHE BOOL "True if compiled on Linux")
+  message(STATUS "[SciInit]: Compiling on LINUX")
+elseif (WIN32)
+  set(WINDOWS TRUE CACHE BOOL "True if compiled on Windows")
+  message(STATUS "[SciInit]: Compiling on WINDOWS")
+else ()
+  message(FATAL_ERROR "[SciInit.cmake] Unrecognized OS!")
+endif ()
+SciPrintString("CMAKE_SYSTEM_PROCESSOR = ${CMAKE_SYSTEM_PROCESSOR}.")
+set(HOST_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR})
+if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL x86_64)
+  set(HAVE_X86_64 TRUE)
+endif ()
+
+######################################################################
+#
+# Set up standard paths
+#
+######################################################################
+
+cmake_policy(SET CMP0017 OLD) # Use our modules over theirs
+set(CMAKE_MODULE_PATH
+  ${SCIMAKE_DIR}/Modules
+)
+
+if (DEBUG_CMAKE)
+  message(STATUS "[SciInit]: CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}")
+  set(SCI_DEBUG_VAR DEBUG)
+endif ()
+
+# message("SUPRA_SEARCH_PATH = ${SUPRA_SEARCH_PATH}")
+if (SUPRA_SEARCH_PATH)
+  set(SUPRA_SEARCH_PATH "${SUPRA_SEARCH_PATH}")
+else ()
+  if (WIN32)
+# According to JRC the following must be turned off to compile under
+# Windows(AP)
+    # set(SUPRA_SEARCH_PATH $ENV{HOME}/software /winsame/internal /winsame/volatile /winsame/contrib /opt /usr/local)
+  else ()
+# JRC: SUPRA_SEARCH_PATH should include only top directory
+# also, system paths should not be needed due to cmake's system search
+    set(SUPRA_SEARCH_PATH $ENV{HOME}/software /internal /volatile /contrib /opt /usr/local)
+  endif ()
+endif ()
+SciPrintString("SUPRA_SEARCH_PATH = ${SUPRA_SEARCH_PATH}")
+
+######################################################################
+#
+# Get system description
+#
+######################################################################
+
+find_program(HOSTNAME_CMD NAMES hostname)
+exec_program(${HOSTNAME_CMD} ARGS OUTPUT_VARIABLE HOSTNAME)
+SciPrintString("scimake running on ${HOSTNAME}")
+# This not always accurate
+string(REGEX REPLACE "\\..*$" "" UQHOSTNAME "${HOSTNAME}")
+SciPrintString("UQHOSTNAME = ${UQHOSTNAME}")
+string(REGEX REPLACE "${UQHOSTNAME}\\." "" DOMAINNAME "${HOSTNAME}")
+SciPrintString("DOMAINNAME = ${DOMAINNAME}")
+
+find_program(UNAME NAMES uname)
+macro(getuname name flag)
+  exec_program("${UNAME}" ARGS "${flag}" OUTPUT_VARIABLE "${name}")
+endmacro(getuname)
+
+if (UNAME)
+  getuname(osname -s)
+  getuname(osrel  -r)
+  getuname(cpu    -m)
+  set(HOSTTYPE "${osname}-${cpu}")
+  SciPrintString("HOSTTYPE = ${HOSTTYPE}")
+  site_name(HOSTNAME)
+  SciPrintString("hostname is ${HOSTNAME}")
+else ()
+  message(WARNING "SciInit: find_program for 'uname' returned nothing")
+endif ()
+
+######################################################################
+#
+# Other useful provenance
+#
+######################################################################
+
+# Calling it "ENV Var" + "NAME" to avoid conflicts elsewhere
+set(HOMENAME $ENV{HOME})
+set(USERNAME $ENV{USER})
+set(SCRATCHNAME $ENV{SCRATCH})
+
+######################################################################
+#
+# Get revisions
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciSvnInfo.cmake)
+
+######################################################################
+#
+# config.h
+#
+######################################################################
+
+if (NOT NO_CONFIG_H)
+  if (WIN32)
+    add_definitions(/DHAVE_CONFIG_H)
+  else ()
+    add_definitions(-DHAVE_CONFIG_H)
+  endif ()
+endif ()
+
+######################################################################
+#
+# Fix shared flags on windows
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciWinFlags.cmake)
+
+######################################################################
+#
+# Load Find Package (also contains code for computing static libraries)
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/Modules/SciFindPackage.cmake)
+
+######################################################################
+#
+# C, CXX, Fortran Checks
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciCChecks.cmake)
+if (NOT NOCXX)
+  include(${SCIMAKE_DIR}/SciCxxChecks.cmake)
+endif ()
+if (NOT NOFORTRAN)
+  message("")
+  message("--------- SciFortranChecking ---------")
+# Enable Fortran to all those variables
+  enable_language(Fortran)
+  include(${CMAKE_ROOT}/Modules/CMakeDetermineFortranCompiler.cmake)
+  include(${SCIMAKE_DIR}/SciFortranChecks.cmake)
+else ()
+  message(STATUS "[SciInit]: No Fortran, so no implicit fortran link libraries known.")
+endif ()
+
+######################################################################
+#
+# OpenMP, SSE, AVX, OpenCL
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciOmpSseAvx.cmake)
+option(ENABLE_OPENCL    "Whether to enable OpenCL" OFF)
+if (ENABLE_OPENCL)
+include(${SCIMAKE_DIR}/Modules/FindSciOpenCL.cmake)
+endif ()
+include(${SCIMAKE_DIR}/SciMultiArchKernels.cmake)
+
+######################################################################
+#
+# Link checks
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciLinkChecks.cmake)
+
+######################################################################
+#
+# Search for static or shared libs?
+#
+######################################################################
+
+if (ENABLE_SHARED)
+  message(WARNING "ENABLE_SHARED is deprecated.  Use BUILD_SHARED_LIBS.")
+  if (NOT DEFINED BUILD_SHARED_LIBS)
+    set(BUILD_SHARED_LIBS TRUE)
+  endif ()
+endif ()
+if (BUILD_SHARED_LIBS AND NOT DEFINED USE_SHARED_LIBS)
+  set(USE_SHARED_LIBS TRUE)
+endif ()
+
+######################################################################
+#
+# For MinGW set libraries to Windows style
+#
+######################################################################
+
+if (USING_MINGW)
+  message("")
+  message("--------- Setting MinGW library prefix and suffix to windows style  ---------")
+  set(CMAKE_STATIC_LIBRARY_PREFIX "")
+  set(CMAKE_STATIC_LIBRARY_SUFFIX .lib)
+  message(STATUS "[SciInit]: CMAKE_STATIC_LIBRARY_PREFIX = ${CMAKE_STATIC_LIBRARY_PREFIX}.")
+  message(STATUS "[SciInit]: CMAKE_STATIC_LIBRARY_SUFFIX = ${CMAKE_STATIC_LIBRARY_SUFFIX}.")
+endif ()
+
+######################################################################
+#
+# Look for MPI
+#
+######################################################################
+
+option(ENABLE_PARALLEL "Enable parallel build" OFF)
+message("")
+if (ENABLE_PARALLEL)
+  message(STATUS "[SciInit]: ENABLE_PARALLEL requested.  Will search for MPI.")
+elseif (INSTALL_PARALLEL)
+  message(STATUS "[SciInit]: INSTALL_PARALLEL requested.  Will search for MPI.")
+else ()
+  message(STATUS "[SciInit]: Not searching for MPI because ENABLE_PARALLEL or INSTALL_PARALLEL not set.")
+endif ()
+if (ENABLE_PARALLEL OR INSTALL_PARALLEL)
+  find_package(SciMpi REQUIRED)
+endif ()
+
+######################################################################
+#
+# Any needed results
+#
+######################################################################
+
+message("")
+if (NOT RESULTS_DIR)
+  message(STATUS "[SciInit]: RESULTS_DIR not specified.")
+endif ()
+if (RESULTS_DIR_BASE AND NOT RESULTS_DIR)
+  message(STATUS "[SciInit]: Looking for results starting with ${RESULTS_DIR_BASE}.")
+# Get potential files
+  file(GLOB resultsdirs RELATIVE ${CMAKE_SOURCE_DIR}
+    "${RESULTS_DIR_BASE}-*" "${RESULTS_DIR_BASE}"
+  )
+  message(STATUS "[SciInit]: resultsdirs = ${resultsdirs}.")
+# Looks for first that is a directory
+  foreach (resdir ${resultsdirs})
+   if (IS_DIRECTORY ${CMAKE_SOURCE_DIR}/${resdir})
+     set(RESULTS_DIR ${CMAKE_SOURCE_DIR}/${resdir})
+     break()
+   endif ()
+  endforeach ()
+  if (NOT RESULTS_DIR)
+    message(STATUS "[SciInit]: RESULTS_DIR not found.")
+  endif ()
+endif ()
+if (RESULTS_DIR)
+  message(STATUS "[SciInit]: RESULTS_DIR = ${RESULTS_DIR}.")
+endif ()
+
+######################################################################
+#
+# Testing macros
+#
+######################################################################
+
+include(${SCIMAKE_DIR}/SciUnitTestMacros.cmake)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciLinkChecks.cmake superlu_dist5-5.1.3/scimake/SciLinkChecks.cmake
--- SuperLU_DIST_5.1.3/scimake/SciLinkChecks.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciLinkChecks.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,136 @@
+######################################################################
+#
+# SciLinkChecks: check/set various link flags
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+message(STATUS "")
+message(STATUS "[SciLinkChecks]: STARTING.")
+message(STATUS "")
+
+######################################################################
+#
+# rpaths
+#
+######################################################################
+
+if (BUILD_SHARED_LIBS)
+  if (APPLE)
+# Follow convention that libraries are installed with full path
+    set(CMAKE_MACOSX_RPATH FALSE)
+    if (NOT DEFINED CMAKE_INSTALL_NAME_DIR)
+# Set library directory as needed by package managers
+      set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/lib)
+    endif ()
+  elseif (LINUX)
+    set(CMAKE_EXE_LINKER_FLAGS "-Wl,-rpath,\$ORIGIN ${CMAKE_EXE_LINKER_FLAGS}")
+    set(CMAKE_SHARED_LINKER_FLAGS "-Wl,-rpath,\$ORIGIN ${CMAKE_SHARED_LINKER_FLAGS}")
+  endif ()
+# Add the automatically determined parts of the RPATH that
+# point to directories outside the build tree to the install RPATH
+# See: http://www.itk.org/Wiki/CMake_RPATH_handling
+  if (NOT DEFINED CMAKE_INSTALL_RPATH_USE_LINK_PATH)
+# Add the automatically determined parts of the RPATH that
+# point to directories outside the build tree to the install RPATH
+    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+  endif ()
+  message(STATUS "[SciLinkChecks]: After further modification:")
+  foreach (type EXE SHARED)
+    SciPrintVar(CMAKE_${type}_LINKER_FLAGS)
+  endforeach ()
+endif ()
+
+######################################################################
+#
+# This works around the bug discussed in
+# http://www.personal.psu.edu/stm134/Software.html
+# where one can download DynamicCastTest.zip
+# This is known to be a problem with Snow Leopard and Mountain Lion
+#
+######################################################################
+
+if ("${CMAKE_SYSTEM_NAME}" STREQUAL Darwin)
+# Get major version
+  string(REPLACE "Darwin-" "" SCI_SYSTEM_VERSION "${CMAKE_SYSTEM}")
+  message(STATUS "[SciLinkChecks]: SCI_SYSTEM_VERSION = ${SCI_SYSTEM_VERSION}.")
+  string(REGEX REPLACE "\\..*$" "" SCI_SYSTEM_MAJVER "${SCI_SYSTEM_VERSION}")
+  if ("${SCI_SYSTEM_MAJVER}" LESS 11)   # Before Lion (Snow Leopard or before)
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -mmacosx-version-min=10.4")
+    set(CMAKE_SKIP_RPATH TRUE)        # -rpath isn't available until 10.5
+    set(CMAKE_SKIP_BUILD_RPATH TRUE)
+    set(CMAKE_SKIP_INSTALL_RPATH TRUE)
+  elseif ("${SCI_SYSTEM_MAJVER}" LESS 13) # Before Mavericks
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -mmacosx-version-min=10.5")
+  else ()
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -mmacosx-version-min=10.7")
+  endif ()
+endif ()
+
+######################################################################
+#
+# Need to add library paths from compiler for rpath
+#
+######################################################################
+
+if ("${CMAKE_SYSTEM_NAME}" STREQUAL Linux)
+
+  message(STATUS "")
+  message(STATUS "--------- Determining version of glibc ---------")
+  execute_process(
+    COMMAND ldd --version
+    COMMAND head -1
+    COMMAND sed "s/^.* //"
+    OUTPUT_VARIABLE GLIBC_VERSION
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+  )
+  SciPrintVar(GLIBC_VERSION)
+
+  if ("${CMAKE_C_COMPILER_ID}" STREQUAL GNU)
+    message(STATUS "")
+    message(STATUS "--------- Adding location of libstdc++ to rpath ---------")
+    execute_process(COMMAND ${CMAKE_C_COMPILER} -print-file-name=libstdc++.so
+      OUTPUT_VARIABLE libcxx)
+    message(STATUS "libcxx is ${libcxx}")
+    if (${libcxx} MATCHES "^/")
+      get_filename_component(CXX_LIBDIR ${libcxx}/.. REALPATH)
+      message(STATUS "[SciLinkChecks]: libstdc++ is in ${CXX_LIBDIR}.")
+# Add to build rpath
+      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,${CXX_LIBDIR}")
+      set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath,${CXX_LIBDIR}")
+    endif ()
+  endif ()
+
+endif ()
+
+######################################################################
+#
+# Parallel
+#
+######################################################################
+
+if (MPI_LINK_FLAGS AND NOT SCI_HAVE_MPICXX_COMPILER_WRAPPER)
+  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_LINK_FLAGS}")
+endif ()
+
+######################################################################
+#
+# Print results
+#
+######################################################################
+
+message(STATUS "")
+message(STATUS "[SciLinkChecks]: Link flags:")
+foreach (type EXE SHARED)
+  foreach (bld FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+    SciPrintVar(CMAKE_${type}_LINKER_FLAGS_${bld})
+  endforeach ()
+  SciPrintVar(CMAKE_${type}_LINKER_FLAGS)
+  message(STATUS "")
+endforeach ()
+
+message(STATUS "[SciLinkChecks]: FINISHED.")
diff -ruN SuperLU_DIST_5.1.3/scimake/SciMpiLauncher.cmake superlu_dist5-5.1.3/scimake/SciMpiLauncher.cmake
--- SuperLU_DIST_5.1.3/scimake/SciMpiLauncher.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciMpiLauncher.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,32 @@
+######################################################################
+#
+# Polyswift.cmake: Compute Polyswift specific options
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# First look in specified path
+find_program(${sciexecvar}
+  "${sciexec}"
+  PATHS ${scipath}
+  PATH_SUFFIXES "${sciexecsubdirs}"
+  NO_DEFAULT_PATH
+  DOC "Path to the ${sciexec} executable"
+  )
+
+# MPILAUNCHER for parallel runs
+if (NOT DEFINED MPILAUNCHER)
+    set(MPILAUNCHER ${MPILAUNCHER:FILEPATH})
+endif ()
+
+if (NOT DEFINED NPROCS)
+  if (ENABLE_PARALLEL)
+    set(NPROCS "2")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciMultiArchKernels.cmake superlu_dist5-5.1.3/scimake/SciMultiArchKernels.cmake
--- SuperLU_DIST_5.1.3/scimake/SciMultiArchKernels.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciMultiArchKernels.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,103 @@
+######################################################################
+#
+# SciMultiArchKernels: Capabilities for building multiarch libraries
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2015-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+message("")
+message(STATUS "--------- Setting up multi-arch capabilities ---------")
+
+######################################################################
+# Define the set of architectures we're building for
+######################################################################
+set(ALL_INSTRUCTION_SETS Generic SSE2 AVX AVX2 AVX512)
+if (SCI_MULTIARCH_INSTRUCTION_SETS)
+# If SCI_MULTIARCH_INSTRUCTION_SETS has been explicitly set we use that
+# value
+else ()
+  option(SCI_BUILD_ALL_INSTRUCTION_SETS
+         "Whether to build for all architectures"
+         FALSE)
+  if (SCI_BUILD_ALL_INSTRUCTION_SETS)
+    SciPrintString("Building multiarch kernels for maximal set of ISAs")
+    set(SCI_MULTIARCH_INSTRUCTION_SETS Generic)
+    foreach(instSet ${ALL_INSTRUCTION_SETS})
+      if (${instSet}_COMPILES)
+        list(APPEND SCI_MULTIARCH_INSTRUCTION_SETS ${instSet})
+      endif()
+    endforeach()
+  else ()
+    SciPrintString("Building multiarch kernels for minimal set of ISAs")
+    set(SCI_MULTIARCH_INSTRUCTION_SETS Generic ${SCI_MOST_POWERFUL_ISA})
+  endif ()
+endif ()
+list(REMOVE_DUPLICATES SCI_MULTIARCH_INSTRUCTION_SETS)
+SciPrintVar(SCI_MULTIARCH_INSTRUCTION_SETS)
+
+# We use the SCI_MULTI_ARCH_cmp_FLAGS variables to construct compiler
+# flags for the multi-architecture libraries.  We start from the FULL
+# flags and remove all architecture specific flags.  The architecture
+# specific flags are later put back one by one in a controlled way for
+# each supported architecture.
+foreach(cmp C CXX)
+  set(SCI_MULTI_ARCH_${cmp}_FLAGS ${CMAKE_${cmp}_FLAGS_FULL})
+  foreach(instSet ${ALL_INSTRUCTION_SETS})
+    string(REPLACE "${${instSet}_FLAG}" " "
+           SCI_MULTI_ARCH_${cmp}_FLAGS
+           ${SCI_MULTI_ARCH_${cmp}_FLAGS})
+  endforeach()
+  SciPrintVar(SCI_MULTI_ARCH_${cmp}_FLAGS)
+endforeach()
+
+#
+# SciAddMultiArchLibrary: Create a multi architecture library
+#
+# Multi architecture libraries are libraries containing code for
+# multiple CPU instruction set architectures (ISAs).  They are created
+# by compiling the source files of the library multiple times.  This
+# process leads to multiple libraries, one for each ISA.  For each
+# library appropriate compiler flags are set to create binaries for one
+# specific ISA.  The set of ISAs for which binaries are created is
+# controlled by the SCI_MULTIARCH_INSTRUCTION_SETS architecture.
+#
+# Typical usage of this function is as follows:
+#
+# add_library(example_lib generic.cpp)
+# set(EXAMPLE_LIB_SRCS foo.cpp bar.cpp)
+# SciAddMultiArchLibrary(
+#   example_lib_multiarch example_lib ${EXAMPLE_LIB_SRCS})
+# add_executable(main main.cpp)
+# target_link_libaries(main example_lib ${example_lib_multiarch})
+#
+#
+# Args:
+#   multiarch_libraries: On entry the name of the multi architecture
+#                        library.  On exit this variable contains the
+#                        list of libraries that constitute the multi
+#                        architecture libraries.
+#   library:             The generic library associated with the multi
+#                        architecture library.  This controls the
+#                        -Dlib_EXPORTS macro for symbol visibility.
+#
+function(SciAddMultiArchLibrary multiarch_libraries library)
+  set(library_targets)
+  foreach(ia ${SCI_MULTIARCH_INSTRUCTION_SETS})
+    set(library_name ${multiarch_libraries}_${ia})
+    add_library(${library_name} ${ARGN})
+    if (${${ia}_FLAG})
+      set_target_properties(${library_name} PROPERTIES
+                            COMPILE_FLAGS ${${ia}_FLAG})
+    endif ()
+    target_compile_definitions(${library_name} PRIVATE
+                               -DSCI_ARCH=${ia} -DSCI_BUILDING_${ia} -D${library}_EXPORTS)
+    list(APPEND library_targets ${library_name})
+  endforeach()
+  set(${multiarch_libraries} ${library_targets} PARENT_SCOPE)
+endfunction()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciOmpSseAvx.cmake superlu_dist5-5.1.3/scimake/SciOmpSseAvx.cmake
--- SuperLU_DIST_5.1.3/scimake/SciOmpSseAvx.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciOmpSseAvx.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,358 @@
+######################################################################
+#
+# SciSseAvx: Determine sse and avx capabilities to processor and add
+#            to appropriate flags.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+SciPrintString(" Optimization checking ")
+message("")
+message(STATUS "--------- Analyzing vector capabilities ---------")
+
+######################################################################
+# Determine the processor
+######################################################################
+
+if (EXISTS /proc/cpuinfo)
+  message(STATUS "Working on LINUX.")
+  if (DISABLE_CPUCHECK) # For BGP
+    message(STATUS "CPU check disabled.")
+  else ()
+    execute_process(COMMAND cat /proc/cpuinfo
+        COMMAND grep "model name"
+        COMMAND head -1
+        OUTPUT_VARIABLE SCIC_CPU
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+# For Blue Gene
+    if (SCIC_CPU)
+      string(REGEX REPLACE "^.*: " "" SCIC_CPU ${SCIC_CPU})
+      execute_process(COMMAND cat /proc/cpuinfo
+          COMMAND grep "flags"
+          COMMAND head -1
+          OUTPUT_VARIABLE CPU_CAPABILITIES
+          OUTPUT_STRIP_TRAILING_WHITESPACE)
+    else ()
+      execute_process(COMMAND cat /proc/cpuinfo
+          COMMAND grep "^cpu"
+          COMMAND head -1
+          OUTPUT_VARIABLE SCIC_CPU
+          OUTPUT_STRIP_TRAILING_WHITESPACE)
+      if (SCIC_CPU)
+        string(REGEX REPLACE "^.*: " "" SCIC_CPU ${SCIC_CPU})
+        string(REGEX REPLACE "^.*, *" "" CPU_CAPABILITIES ${SCIC_CPU})
+        string(REGEX REPLACE ",.*$" "" SCIC_CPU ${SCIC_CPU})
+      endif ()
+    endif ()
+  endif ()
+elseif (APPLE)
+  execute_process(COMMAND sysctl -a machdep.cpu.brand_string
+      OUTPUT_VARIABLE SCIC_CPU
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+  string(REGEX REPLACE "^.*: " "" SCIC_CPU "${SCIC_CPU}")
+  execute_process(COMMAND sysctl -a machdep.cpu.features
+      COMMAND head -1
+      OUTPUT_VARIABLE CPU_CAPABILITIES
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+  string(REGEX REPLACE "^.*: *" "" CPU_CAPABILITIES "${CPU_CAPABILITIES}")
+  # string(REGEX REPLACE "SSE" "sse" CPU_CAPABILITIES "${CPU_CAPABILITIES}")
+  string(TOLOWER "${CPU_CAPABILITIES}" CPU_CAPABILITIES)
+endif ()
+message(STATUS "CPU = ${SCIC_CPU}.")
+message(STATUS "CPU_CAPABILITIES = ${CPU_CAPABILITIES}.")
+
+######################################################################
+# Sort into sse or avx
+######################################################################
+
+if (CPU_CAPABILITIES)
+  separate_arguments(CPU_CAPABILITIES)
+  # message(STATUS "CPU capabilities are ${CPU_CAPABILITIES}")
+  foreach (cap ${CPU_CAPABILITIES})
+    # MESSAGE("Examining ${cap}")
+    if (${cap} MATCHES "^sse")
+      list(APPEND SSE_CAPABILITIES ${cap})
+    elseif (${cap} MATCHES "^avx")
+      list(APPEND AVX_CAPABILITIES ${cap})
+    endif ()
+  endforeach ()
+  foreach (cap SSE AVX)
+    if (${cap}_CAPABILITIES)
+      list(SORT ${cap}_CAPABILITIES)
+      list(REVERSE ${cap}_CAPABILITIES)
+      list(GET ${cap}_CAPABILITIES 0 ${cap}_CAPABILITY)
+      string(REPLACE "_" "." ${cap}_CAPABILITY "${${cap}_CAPABILITY}")
+    endif ()
+  endforeach ()
+endif ()
+
+foreach (cap SSE AVX)
+  message(STATUS "${cap} capabilities are ${${cap}_CAPABILITIES}")
+  message(STATUS "${cap} capability is ${${cap}_CAPABILITY}")
+endforeach ()
+
+######################################################################
+# Check whether compilers support SSE2 or AVX if CPU supports it
+######################################################################
+
+# Handy
+include(CheckCSourceCompiles)
+include(CheckCSourceRuns)
+include(CheckCXXSourceCompiles)
+include(CheckCXXSourceRuns)
+
+message(STATUS "Checking vector capabilities.  CMAKE_REQUIRED_FLAGS = ${CMAKE_REQUIRED_FLAGS}.")
+
+set(SCI_MOST_POWERFUL_ISA Generic)
+
+set(CMAKE_REQUIRED_FLAGS_SAV "${CMAKE_REQUIRED_FLAGS}")
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${SSE2_FLAG}")
+if (WIN32)
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} /WX /W3")
+elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
+      "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror")
+endif ()
+check_c_source_compiles(
+"
+#include <emmintrin.h>
+int main(int argc, char** argv) {
+  double a[2] = {1.0, 2.0};
+  __m128d t = _mm_loadu_pd(a);
+  return 0;
+}
+"
+SSE2_COMPILES
+)
+SciPrintVar(SSE2_COMPILES)
+if (SSE2_COMPILES)
+  check_c_source_runs(
+"
+#include <emmintrin.h>
+int main(int argc, char** argv) {
+  double a[2] = {1.0, 2.0};
+  __m128d t = _mm_loadu_pd(a);
+  return 0;
+}
+"
+  SSE2_RUNS
+  )
+endif ()
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS_SAV}")
+SciPrintVar(SSE2_RUNS)
+if (SSE2_RUNS)
+  set(SCI_MOST_POWERFUL_ISA SSE2)
+endif ()
+
+# Check whether have avx.
+set(CMAKE_REQUIRED_FLAGS_SAV "${CMAKE_REQUIRED_FLAGS}")
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${AVX_FLAG}")
+if (WIN32)
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} /WX /W3")
+elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
+      "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror")
+endif ()
+check_c_source_compiles(
+"
+#include <immintrin.h>
+int main(int argc, char** argv) {
+  double a[4] = {1.0, 2.0, 3.0, 4.0};
+  __m256d t = _mm256_loadu_pd(a);
+  return 0;
+}
+"
+AVX_COMPILES
+)
+SciPrintVar(AVX_COMPILES)
+if (AVX_COMPILES)
+  check_c_source_runs(
+"
+#include <immintrin.h>
+int main(int argc, char** argv) {
+  double a[4] = {1.0, 2.0, 3.0, 4.0};
+  __m256d t = _mm256_loadu_pd(a);
+  return 0;
+}
+"
+  AVX_RUNS
+  )
+endif ()
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS_SAV}")
+SciPrintVar(AVX_RUNS)
+if (AVX_RUNS)
+  set(SCI_MOST_POWERFUL_ISA AVX)
+endif ()
+
+# Check whether have avx2.
+set(CMAKE_REQUIRED_FLAGS_SAV "${CMAKE_REQUIRED_FLAGS}")
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${AVX2_FLAG}")
+if (WIN32)
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} /WX /W3")
+elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
+      "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror")
+endif ()
+check_cxx_source_compiles(
+"
+#include <immintrin.h>
+int main(int argc, char** argv) {
+  double a[4] = {1.0, 2.0, 3.0, 4.0};
+  __m128i vindex = _mm_set_epi32(0, 2, 1, 3);
+  __m256d t = _mm256_i32gather_pd(a, vindex, 8);
+  return 0;
+}
+"
+AVX2_COMPILES
+)
+SciPrintVar(AVX2_COMPILES)
+if (AVX2_COMPILES)
+  check_cxx_source_runs(
+"
+#include <immintrin.h>
+int main(int argc, char** argv) {
+  double a[4] = {1.0, 2.0, 3.0, 4.0};
+  __m128i vindex = _mm_set_epi32(0, 2, 1, 3);
+  __m256d t = _mm256_i32gather_pd(a, vindex, 8);
+  return 0;
+}
+"
+  AVX2_RUNS
+  )
+endif ()
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS_SAV}")
+SciPrintVar(AVX2_RUNS)
+if (AVX2_RUNS)
+  set(SCI_MOST_POWERFUL_ISA AVX2)
+endif ()
+
+# Check whether have avx512.
+set(CMAKE_REQUIRED_FLAGS_SAV "${CMAKE_REQUIRED_FLAGS}")
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${AVX512_FLAG}")
+if (WIN32)
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} /WX /W3")
+elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
+      "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror")
+endif ()
+check_cxx_source_compiles(
+"
+#include <immintrin.h>
+int main(int argc, char** argv) {
+  double a[8] = {1., 2., 3., 4., 5., 6., 7., 8.};
+  __m512d t = _mm512_load_pd(a);
+  return 0;
+}
+"
+AVX512_COMPILES
+)
+SciPrintVar(AVX512_COMPILES)
+if (AVX512_COMPILES)
+  check_cxx_source_runs(
+"
+#include <immintrin.h>
+int main(int argc, char** argv) {
+  double a[8] = {1., 2., 3., 4., 5., 6., 7., 8.};
+  __m512d t = _mm512_load_pd(a);
+  return 0;
+}
+"
+  AVX512_RUNS
+  )
+endif ()
+set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS_SAV}")
+SciPrintVar(AVX512_RUNS)
+if (AVX512_RUNS)
+  set(SCI_MOST_POWERFUL_ISA AVX512)
+endif ()
+SciPrintVar(SCI_MOST_POWERFUL_ISA)
+
+######################################################################
+# Now handle the compiler flags.
+# We build the optimized build types for SSE2.
+# The Full build type is compiled for the most powerful instruction set
+# supported by the CPU we're  building on.
+######################################################################
+
+if (SSE2_COMPILES)
+  set(SSE2_BUILDS RELEASE RELWITHDEBINFO MINSIZEREL)
+  if (ALLOW_SSE2)
+    set(SSE2_BUILDS ${SSE2_BUILDS} ${CMAKE_BUILD_TYPE_UC})
+  endif ()
+  list(REMOVE_DUPLICATES SSE2_BUILDS)
+  foreach (cmp C CXX)
+    foreach (bld ${SSE2_BUILDS})
+      set(CMAKE_${cmp}_FLAGS_${bld} "${CMAKE_${cmp}_FLAGS_${bld}} ${SSE2_FLAG}")
+    endforeach ()
+  endforeach ()
+endif ()
+
+foreach (cmp C CXX)
+  set(CMAKE_${cmp}_FLAGS_FULL
+      "${CMAKE_${cmp}_FLAGS_FULL} ${${SCI_MOST_POWERFUL_ISA}_FLAG}")
+endforeach ()
+
+######################################################################
+# OpenMP detection
+######################################################################
+
+if (USE_OPENMP)
+  message(STATUS "OpenMP requested.")
+  if (OPENMP_FLAGS)
+    message(STATUS "OpenMP flag defined.")
+    set(HAVE_OPENMP TRUE)
+    set(OPENMP_FOUND TRUE CACHE STRING "Whether OpenMP is found")
+  else ()
+    message(STATUS "Seeking OpenMP.")
+    find_package(OpenMP)
+    if (OPENMP_FOUND)
+      message(STATUS "OpenMP found.")
+      set(HAVE_OPENMP TRUE)
+      set(OPENMP_FOUND TRUE CACHE STRING "Whether OpenMP is found")
+      set(OPENMP_FLAGS ${OpenMP_C_FLAGS})
+    else ()
+      message(WARNING "OpenMP requested but flags not known.")
+    endif ()
+  endif ()
+  if (HAVE_OPENMP)
+    message(STATUS "OPENMP_FLAGS = ${OPENMP_FLAGS}.")
+    set(OPENMP_FLAGS "${OPENMP_FLAGS}" CACHE STRING "OpenMP compiler flags")
+# To test for openmp4, need to add openmp flags for compilation
+    set(CMAKE_CXX_FLAGS_SAV "${CMAKE_CXX_FLAGS}")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPENMP_FLAGS}")
+    try_compile(HAVE_PRAGMA_OMP_SIMD ${PROJECT_BINARY_DIR}/scimake
+      ${SCIMAKE_DIR}/trycompile/pragma_omp_simd.cxx
+      # OUTPUT_VARIABLE BUILD_OUT
+    )
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_SAV}")
+    if (HAVE_PRAGMA_OMP_SIMD)
+      message(STATUS "OpenMP 4 pragma omp simd available")
+    else ()
+      message(STATUS "OpenMP 4 pragma omp simd NOT available")
+    endif ()
+    foreach (cmp C CXX)
+      foreach (bld FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+        set(CMAKE_${cmp}_FLAGS_${bld} "${CMAKE_${cmp}_FLAGS_${bld}} ${OPENMP_FLAGS}")
+      endforeach ()
+    endforeach ()
+  endif ()
+endif ()
+
+######################################################################
+# Print results
+######################################################################
+
+SciPrintString("After analyzing vector and thread capabilities:")
+foreach (cmp C CXX)
+  foreach (bld FULL RELEASE RELWITHDEBINFO MINSIZEREL DEBUG)
+    SciPrintVar(CMAKE_${cmp}_FLAGS_${bld})
+  endforeach ()
+  SciPrintVar(CMAKE_${cmp}_FLAGS)
+endforeach ()
+SciPrintString("")
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciSeparateLibs.cmake superlu_dist5-5.1.3/scimake/SciSeparateLibs.cmake
--- SuperLU_DIST_5.1.3/scimake/SciSeparateLibs.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciSeparateLibs.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,122 @@
+######################################################################
+#
+# SciSeparateLibs: Separate unix style libs into cmake flags and lib lists
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# SciClusterLibs
+#   From space delimited to a regular list
+macro(SciMakeLibList libsvar)
+  string(STRIP "${${libsvar}}" ${libsvar})
+  string(REGEX REPLACE "  *" " " ${libsvar} "${${libsvar}}")
+  string(REGEX REPLACE " -L  *" " -L" ${libsvar} "${${libsvar}}")
+  string(REGEX REPLACE " " ";" ${libsvar} "${${libsvar}}")
+endmacro()
+
+# SciSeparateLibs
+#
+# Args:
+#  origlibs:   libraries as a list
+#  flagsvar:   name of flags variable
+#  libsvar:    name of libs variable
+#  libdirsvar: name of libdirs variable
+#  libnamesvar:   name of libs variable
+#  frmwrksvar: name of frameworks variable
+#
+function(SciSeparateLibs
+    origlibs flagsvar libsvar libdirsvar libnamesvar frmwrksvar)
+
+# Handle empty case
+  if (NOT origlibs)
+    set(${flagsvar} "" PARENT_SCOPE)
+    set(${libsvar} "" PARENT_SCOPE)
+    set(${libdirsvar} "" PARENT_SCOPE)
+    set(${libnamesvar} "" PARENT_SCOPE)
+    set(${frmwrksvar} "" PARENT_SCOPE)
+    return()
+  endif ()
+
+# Separate out the libs
+# Assume a proper list
+  # string(STRIP "${origlibs}" origlibs)
+  # string(REPLACE " " ";" origlibs "${origlibs}")
+  if (DEBUG_CMAKE)
+    message(STATUS "Separating ${origlibs}.")
+  endif ()
+  set(lastflag)
+  foreach (scilib ${origlibs})
+    if (lastflag)
+      if (lastflag STREQUAL framework)
+        set(${frmwrksvar} ${${frmwrksvar}} "${scilib}")
+      endif ()
+      set(lastflag)
+    elseif (${scilib} STREQUAL "-framework")
+      set(lastflag "framework")
+    elseif (${scilib} MATCHES "^-l")
+      string(REGEX REPLACE "^-l" "" scilib ${scilib})
+      set(${libnamesvar} ${${libnamesvar}} ${scilib})
+    elseif (${scilib} MATCHES "^-L")
+      string(REGEX REPLACE "^-L" "" scilib ${scilib})
+      set(${libdirsvar} ${${libdirsvar}} ${scilib})
+    elseif (${scilib} MATCHES "^-Wl,-rpath")
+# Ignore rpath flags
+    else ()
+      set(${flagsvar} ${${flagsvar}} ${scilib})
+    endif ()
+  endforeach ()
+  if (${flagsvar})
+    list(REMOVE_DUPLICATES ${flagsvar})
+
+# Flags have to be strings
+    string(REPLACE ";" " " ${flagsvar} "${${flagsvar}}")
+  endif ()
+  if (DEBUG_CMAKE)
+    message(STATUS "${flagsvar} = ${${flagsvar}}.")
+  endif ()
+
+# Remove earlier occurences of duplications
+  foreach (j libnamesvar libdirsvar frmwrksvar)
+    if (${${j}})
+      list(REVERSE ${${j}})
+      list(REMOVE_DUPLICATES ${${j}})
+      list(REVERSE ${${j}})
+    endif ()
+    if (DEBUG_CMAKE)
+      message(STATUS "${${j}} = ${${${j}}}.")
+    endif ()
+  endforeach ()
+
+# Find each library
+  foreach (name ${${libnamesvar}})
+    unset(${name}_LIBRARY)
+    if (DEBUG_CMAKE)
+      message("Looking for ${name} in ${${libdirsvar}}.")
+    endif ()
+    find_library(${name}_LIBRARY ${name} ${${libdirsvar}} NO_DEFAULT_PATH)
+    if (${name}_LIBRARY)
+      if (DEBUG_CMAKE)
+        message("Found: ${${name}_LIBRARY}.")
+      endif ()
+      list(APPEND ${libsvar} ${${name}_LIBRARY})
+    else ()
+      if (DEBUG_CMAKE)
+        message("${name}_LIBRARY not found.")
+      endif ()
+    endif ()
+  endforeach ()
+
+# Put everything in parent scope
+  set(${flagsvar} "${${flagsvar}}" PARENT_SCOPE)
+  set(${libsvar} "${${libsvar}}" PARENT_SCOPE)
+  set(${libdirsvar} "${${libdirsvar}}" PARENT_SCOPE)
+  set(${libnamesvar} "${${libnamesvar}}" PARENT_SCOPE)
+  set(${frmwrksvar} "${${frmwrksvar}}" PARENT_SCOPE)
+
+endfunction()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciStart.ctest superlu_dist5-5.1.3/scimake/SciStart.ctest
--- SuperLU_DIST_5.1.3/scimake/SciStart.ctest	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciStart.ctest	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,35 @@
+######################################################################
+#
+# Start.ctest for any scimake project
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+set(CONFIG_SUMMARY ${CMAKE_CURRENT_BINARY_DIR}/config.summary)
+file(REMOVE ${CONFIG_SUMMARY})
+get_filename_component(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/.. REALPATH)
+set(CTEST_SOURCE_DIRECTORY ${PROJECT_SOURCE_DIR})
+set(CTEST_BINARY_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
+message(STATUS "CTEST_BINARY_DIRECTORY = ${CTEST_BINARY_DIRECTORY}.")
+include(${PROJECT_SOURCE_DIR}/scimake/SciFuncsMacros.cmake)
+include(${PROJECT_SOURCE_DIR}/CTestConfig.cmake)
+if (NOT DEFINED CTEST_MODEL)
+  set(CTEST_MODEL Experimental)
+endif ()
+ctest_start(${CTEST_MODEL})
+if (NOT DEFINED CTEST_CMAKE_GENERATOR)
+  if (WIN32)
+    set(CTEST_CMAKE_GENERATOR "NMake Makefiles JOM")
+  else ()
+    set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
+  endif ()
+endif ()
+ctest_configure(OPTIONS "${CMAKE_OPTIONS}" RETURN_VALUE res)
+if (CTEST_DROP_SITE AND (NOT ${CTEST_DROP_SITE} STREQUAL NONE) AND (NOT ${res} EQUAL 0))
+  ctest_submit()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciSvnInfo.cmake superlu_dist5-5.1.3/scimake/SciSvnInfo.cmake
--- SuperLU_DIST_5.1.3/scimake/SciSvnInfo.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciSvnInfo.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,139 @@
+######################################################################
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+# For getting the svn revision of a directory
+#
+######################################################################
+if (0)
+macro(Subversion_GET_VERSION dir var1 var2)
+  message(WARNING "Subversion_GET_VERSION is deprecated.  Use SciGetSvnInfo.")
+  if (EXISTS ${dir}/.svn)
+    message(STATUS "In ${dir}, executing ${SVNVERSION_BIN} -c")
+    execute_process(COMMAND ${SVNVERSION_BIN} -c
+      OUTPUT_VARIABLE ${var1}
+      OUTPUT_STRIP_TRAILING_WHITESPACE
+      WORKING_DIRECTORY ${dir}
+    )
+    string(REGEX REPLACE ".*:" "" ${var1} "${${var1}}")
+    message(STATUS "In ${dir}, executing ${SVN_BIN} info")
+    execute_process(COMMAND ${SVN_BIN} info
+      OUTPUT_FILE ${dir}/svninfo.txt
+      OUTPUT_STRIP_TRAILING_WHITESPACE
+      WORKING_DIRECTORY ${dir}
+    )
+  else ()
+    if (EXISTS ${dir}/svninfo.txt)
+      file(READ ${dir}/svninfo.txt ${var1})
+      string(REGEX REPLACE "^(.*\n)?Revision:([^\n]+).*"
+        "\\2" ${var1} "${${var1}}")
+    else ()
+      set(${var1} "unknown")
+    endif ()
+  endif ()
+  if (EXISTS ${dir}/svninfo.txt)
+      file(READ ${dir}/svninfo.txt SVNINFO)
+      string(REGEX REPLACE "^(.*\n)?URL:([^\n]+).*"
+        "\\2" ${var2} "${SVNINFO}")
+  else ()
+      set(${var2} "unknown")
+  endif ()
+endmacro(Subversion_GET_VERSION)
+endif ()
+
+# The new version
+macro(SciGetSvnInfo dir revvar urlvar usechanged)
+  # message(STATUS "usechanged = ${usechanged}.")
+  if (NOT DEFINED usechanged)
+    set(usechanged TRUE)
+  endif ()
+  if (EXISTS ${dir}/.svn)
+    if (usechanged)
+      # message(STATUS "In ${dir}, executing ${SVNVERSION_BIN} -c")
+      execute_process(COMMAND ${SVNVERSION_BIN} -c
+        OUTPUT_VARIABLE ${revvar}
+        OUTPUT_STRIP_TRAILING_WHITESPACE
+        WORKING_DIRECTORY ${dir}
+      )
+      string(REGEX REPLACE ".*:" "" ${revvar} "${${revvar}}")
+    else ()
+      # message(STATUS "In ${dir}, executing ${SVNVERSION_BIN}")
+      execute_process(COMMAND ${SVNVERSION_BIN}
+        OUTPUT_VARIABLE ${revvar}
+        OUTPUT_STRIP_TRAILING_WHITESPACE
+        WORKING_DIRECTORY ${dir}
+      )
+    endif ()
+    # message(STATUS "In ${dir}, executing ${SVN_BIN} info")
+    execute_process(COMMAND ${SVN_BIN} info
+      OUTPUT_FILE ${dir}/svninfo.txt
+      OUTPUT_STRIP_TRAILING_WHITESPACE
+      WORKING_DIRECTORY ${dir}
+    )
+  else ()
+    if (EXISTS ${dir}/svninfo.txt)
+      file(READ ${dir}/svninfo.txt ${revvar})
+      if (${usechanged})
+        string(REGEX REPLACE "^(.*\n)?Last Changed Rev:([^\n]+).*"
+          "\\2" ${revvar} "${${revvar}}")
+      else ()
+        string(REGEX REPLACE "^(.*\n)?Revision:([^\n]+).*"
+          "\\2" ${revvar} "${${revvar}}")
+      endif ()
+    else ()
+      set(${revvar} "unknown")
+    endif ()
+  endif ()
+  if (EXISTS ${dir}/svninfo.txt)
+    file(READ ${dir}/svninfo.txt SVNINFO)
+    string(REGEX REPLACE "^(.*\n)?URL:([^\n]+).*"
+        "\\2" ${urlvar} "${SVNINFO}")
+  else ()
+    set(${urlvar} "unknown")
+  endif ()
+  if (NOT ${revvar})
+    set(${revvar} "unknown")
+  endif ()
+  if (NOT ${urlvar})
+    set(${urlvar} "unknown")
+  endif ()
+endmacro()
+
+if (SVN_BINDIR)
+  set(SVN_PATH ${SVN_BINDIR} ${PATH})
+  message("Looking for svn in ${SVN_PATH}")
+  find_program(SVN_BIN NAME svn PATHS ${SVN_PATH}
+    DOC "subversion command line client" NO_DEFAULT_PATH)
+  find_program(SVNVERSION_BIN NAME svnversion PATHS ${SVN_PATH}
+    DOC "subversion version command line client" NO_DEFAULT_PATH)
+endif ()
+# If not found, search in system paths
+if (NOT SVN_BIN)
+  find_program(SVN_BIN NAME svn PATHS ${SVN_PATH}
+    DOC "subversion command line client")
+  find_program(SVNVERSION_BIN NAME svnversion PATHS ${SVN_PATH}
+    DOC "subversion version command line client")
+endif ()
+if (DEBUG_CMAKE)
+  message(STATUS "SVN_BIN is ${SVN_BIN}")
+  message(STATUS "SVNVERSION_BIN is ${SVNVERSION_BIN}")
+endif ()
+if (SVN_BIN AND SVNVERSION_BIN)
+  SciGetSvnInfo(${PROJECT_SOURCE_DIR} PROJECT_REV PROJECT_URL TRUE)
+  SciPrintVar(PROJECT_REV)
+  SciPrintVar(PROJECT_URL)
+  if (EXISTS ${SCIMAKE_DIR})
+    SciGetSvnInfo(${SCIMAKE_DIR} SCIMAKE_REV SCIMAKE_URL TRUE)
+    SciPrintVar(SCIMAKE_REV)
+    SciPrintVar(SCIMAKE_URL)
+  endif ()
+  if (EXISTS ${PROJECT_SOURCE_DIR}/config)
+    SciGetSvnInfo(${PROJECT_SOURCE_DIR}/config CONFIG_REV CONFIG_URL TRUE)
+    SciPrintVar(CONFIG_REV)
+    SciPrintVar(CONFIG_URL)
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciTestConfig.cmake superlu_dist5-5.1.3/scimake/SciTestConfig.cmake
--- SuperLU_DIST_5.1.3/scimake/SciTestConfig.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciTestConfig.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,83 @@
+######################################################################
+#
+# SciTestConfig: Set variables for testing.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+#
+# enable_testing() and include(CTest) must be called before this is included.
+#
+
+# Get project names correlated, nightly timing.
+set(CTEST_PROJECT_NAME "${CMAKE_PROJECT_NAME}")
+set(CTEST_NIGHTLY_START_TIME "01:00:00 UTC")
+
+# cmake's SITE is ctests' CTEST_SITE
+# Do we need the rest if called with ctest?
+if (NOT SITE)
+  if (SCIMAKE_SITE)
+    set(SITE "${SCIMAKE_SITE}")
+  elseif (FQHOSTNAME)
+    set(SITE "${FQHOSTNAME}")
+  else ()
+    set(SITE "unknown")
+  endif ()
+endif ()
+
+# cmake's BUILDNAME is ctests' CTEST_BUILD_NAME
+# Do we need the rest if called with ctest
+if (NOT DEFINED BUILDNAME)
+  if (DEFINED SCIMAKE_BUILD_NAME)
+    set(BUILDNAME ${SCIMAKE_BUILD_NAME})
+  else ()
+    set(BUILDNAME "${CMAKE_SYSTEM}-${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}")
+    if (SCIMAKE_BUILD)
+      set(BUILDNAME "${BUILDNAME}-${SCIMAKE_BUILD}")
+    endif ()
+  endif ()
+endif ()
+SciPrintString("[SciTestConfig]: SCIMAKE_BUILD = ${SCIMAKE_BUILD}.")
+SciPrintString("[SciTestConfig]: BUILDNAME = ${BUILDNAME}.")
+
+set(CTEST_DROP_METHOD "http")
+if (NOT CTEST_DROP_SITE AND (NOT "${CTEST_DROP_SITE}" STREQUAL NONE))
+  # set(CTEST_DROP_SITE "cdash.${DOMAINNAME}")
+endif ()
+SciPrintString("[SciTestConfig]: CTEST_DROP_SITE = ${CTEST_DROP_SITE}.")
+if (CTEST_DROP_SITE AND (NOT "${CTEST_DROP_SITE}" STREQUAL NONE))
+  set(CTEST_DROP_LOCATION "/submit.php?project=${CTEST_PROJECT_NAME}")
+  set(CTEST_DROP_SITE_CDASH TRUE)
+endif ()
+
+# Keeping this around for later
+if (FALSE)
+option(ENABLE_MEMCHECK
+  "Enables testing to use valgrind to track memory leaks in tests." OFF)
+if (ENABLE_MEMCHECK AND NOT WIN32)
+  find_program(VALGRIND_EXE valgrind)
+  if (VALGRIND_EXE)
+    set(CTEST_MEMORYCHECK_COMMAND ${VALGRIND_EXE})
+#    set(CTEST_MEMORYCHECK_COMMAND_OPTIONS "-v --tool=memcheck --leak-check=full --track-fds=yes --num-callers=50 --show-reachable=yes --track-origins=yes --mal loc-fill=0xff --free-fill=0xfe")
+  endif ()
+endif ()
+endif ()
+
+option(ENABLE_COVERAGE "Enables compiling library for coverage data (only supported on gnu c++ compilers)." OFF)
+if (ENABLE_COVERAGE)
+  if ((APPLE AND CMAKE_COMPILER_IS_CLANGXX)  # Apple's g++ doesn't support coverage data, but clang++ does
+ OR (NOT APPLE AND CMAKE_COMPILER_IS_GNUCXX))
+# Enables coverage data
+    set(CMAKE_CXX_FLAGS "-g -O0 -Wall -Wextra -fprofile-arcs -ftest-coverage")
+    set(CMAKE_C_FLAGS "-g -O0 -Wall -Wextra -fprofile-arcs -ftest-coverage")
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g -O0 -Wall -Wextra -fprofile-arcs -ftest-coverage")
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -g -O0 -Wall -Wextra -fprofile-arcs -ftest-coverage")
+    set(CTEST_CUSTOM_COVERAGE_EXCLUDE ${CTEST_CUSTOM_COVERAGE_EXCLUDE} "moc_*.cxx")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciTextCompare.cmake superlu_dist5-5.1.3/scimake/SciTextCompare.cmake
--- SuperLU_DIST_5.1.3/scimake/SciTextCompare.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciTextCompare.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,132 @@
+######################################################################
+#
+# SciTextCompare: Run an executable and check for differences between
+#                 current and accepted results.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+if (NOT SCIMAKE_DIR)
+  set(SCIMAKE_DIR "${TEST_SCIMAKE_DIR}")
+endif ()
+
+include(${SCIMAKE_DIR}/SciDiffMacros.cmake)
+
+string(REPLACE "\"" "" ARGS_LIST "${TEST_ARGS}")
+string(REPLACE " " ";" ARGS_LIST "${ARGS_LIST}")
+
+# make sure the file differ is set
+if (TEST_DIFFER)
+  # separate_arguments(TEST_DIFFER)
+else ()
+  set(TEST_DIFFER diff --strip-trailing-cr)
+endif ()
+if (TEST_SORTER)
+  message(STATUS "Sorting is on.")
+  set(SORTER_ARGS SORTER ${TEST_SORTER})
+endif ()
+message(STATUS "[SciTextCompare] DIFFER IS = ${TEST_DIFFER}.")
+message(STATUS "[SciTextCompare] SORTER IS = ${TEST_SORTER}.")
+if (TEST_MPIEXEC)
+  separate_arguments(TEST_MPIEXEC)
+endif (TEST_MPIEXEC)
+set(DIR_ARGS)
+if (TEST_TEST_DIR)
+  set(DIR_ARGS ${DIR_ARGS} TEST_DIR ${TEST_TEST_DIR})
+endif ()
+if (TEST_DIFF_DIR)
+  set(DIR_ARGS ${DIR_ARGS} DIFF_DIR ${TEST_DIFF_DIR})
+endif ()
+
+# if TEST_STDOUT_FILE is non-empty, then we use it as the output file
+# for the execute_process(), and we add it to the ${TEST_TEST_FILES}
+# to be compared. This allows us to have a test which generates one or
+# more files which are to be compared, while also comparing the stdout
+# of the test.
+
+string(REGEX REPLACE "([^\\]|^);" "\\1 " tmpStr "${ARGS_LIST}")
+string(REGEX REPLACE "[\\](.)" "\\1" tmpStr "${tmpStr}")
+set(argStr "${tmpStr}")
+message(STATUS "[SciTextCompare] EXECUTING ... ${TEST_MPIEXEC} ${TEST_PROG} ${argStr}")
+message(STATUS "[SciTextCompare] OUTPUT_FILE = ${TEST_STDOUT_FILE}")
+set(errarg)
+if (TEST_STDERR_FILE)
+  set(errarg ERROR_FILE ${TEST_STDERR_FILE})
+  message(STATUS "[SciTextCompare] ERROR_FILE = ${TEST_STDERR_FILE}")
+endif ()
+if (TEST_STDOUT_FILE)
+  execute_process(COMMAND ${TEST_MPIEXEC} ${TEST_PROG} ${ARGS_LIST}
+    RESULT_VARIABLE EXEC_ERROR
+    OUTPUT_FILE ${TEST_STDOUT_FILE} ${errarg}
+  )
+# Assume stdout is not out of order by threading
+  SciDiffFiles("${TEST_STDOUT_FILE}" "${TEST_STDOUT_FILE}" ARE_FILES_EQUAL
+      DIFFER ${TEST_DIFFER}
+      ${DIR_ARGS}
+      ${SORTER_ARGS}
+  )
+  if (ARE_FILES_EQUAL)
+    message(STATUS "Comparison of ${TEST_STDOUT_FILE} succeeded.")
+  else ()
+    message(FATAL_ERROR "Comparison failure: ${TEST_STDOUT_FILE} differ.")
+  endif ()
+else ()
+  execute_process(COMMAND ${TEST_MPIEXEC} ${TEST_PROG} ${ARGS_LIST}
+    RESULT_VARIABLE EXEC_ERROR
+    # ERROR_VARIABLE errvar
+  )
+endif ()
+
+if (EXEC_ERROR)
+  message(STATUS "EXEC_ERROR      = ${EXEC_ERROR}")
+  message(STATUS "RESULT_VARIABLE = ${RESULT_VARIABLE}")
+  message(FATAL_ERROR "Execution failure.")
+endif ()
+message(STATUS "Execution succeeded.")
+
+if (TEST_TEST_FILES)
+  # Test all the output
+  # There must be an easier way to pass a list
+  # message(STATUS "TEST_TEST_FILES = ${TEST_TEST_FILES}.")
+  string(REPLACE "\"" "" TEST_FILES_LIST "${TEST_TEST_FILES}")
+  string(REPLACE " " ";" TEST_FILES_LIST "${TEST_FILES_LIST}")
+  string(REPLACE "\"" "" DIFF_FILES_LIST "${TEST_DIFF_FILES}")
+  string(REPLACE " " ";" DIFF_FILES_LIST "${DIFF_FILES_LIST}")
+
+  list(LENGTH TEST_FILES_LIST tlen)
+  list(LENGTH DIFF_FILES_LIST dlen)
+  if (NOT ${tlen} MATCHES ${dlen})
+    message(FATAL_ERROR "The comparison lists are different sizes.")
+  elseif (${tlen} MATCHES 0)
+    #message(STATUS "Nothing to compare.")
+    return()
+  endif ()
+  message(STATUS "TEST_FILES_LIST = ${TEST_FILES_LIST}.")
+  message(STATUS "DIFF_FILES_LIST = ${DIFF_FILES_LIST}.")
+  math(EXPR loopLen "${tlen} - 1")
+
+  foreach (ifile RANGE ${loopLen})
+    list(GET TEST_FILES_LIST ${ifile} testFile)
+    list(GET DIFF_FILES_LIST ${ifile} diffFile)
+    message(STATUS "[SciTextCompare] Comparing ${testFile} and ${diffFile} using ${TEST_DIFFER} with ${SORTER_ARGS}.")
+    SciDiffFiles("${testFile}" "${diffFile}" ARE_FILES_EQUAL
+        DIFFER ${TEST_DIFFER}
+        ${DIR_ARGS}
+        ${SORTER_ARGS}
+    )
+    if (ARE_FILES_EQUAL)
+      message(STATUS "Comparison of ${testFile} succeeded.")
+    else ()
+      set(diffres "${testFile}")
+    endif ()
+  endforeach ()
+  if (diffres)
+    message(FATAL_ERROR "Comparison failure: ${diffres} differ.")
+  endif ()
+  message(STATUS "Comparison succeeded.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciTextCompareManyCmd.cmake superlu_dist5-5.1.3/scimake/SciTextCompareManyCmd.cmake
--- SuperLU_DIST_5.1.3/scimake/SciTextCompareManyCmd.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciTextCompareManyCmd.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,156 @@
+######################################################################
+#
+# @file    SciTextCompareManyCmd.cmake
+#
+# @brief   Run an executable and check for differences between
+#          current and accepted results.
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2016-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+if (NOT SCIMAKE_DIR)
+  set(SCIMAKE_DIR "${TEST_SCIMAKE_DIR}")
+endif ()
+
+include(${SCIMAKE_DIR}/SciDiffMacros.cmake)
+
+# Fix up args for CMDs
+string(REPLACE "\"" "" ARGS1_LIST "${TEST_ARGS1}")
+string(REPLACE " " ";" ARGS1_LIST "${ARGS1_LIST}")
+string(REPLACE "\"" "" ARGS2_LIST "${TEST_ARGS2}")
+string(REPLACE " " ";" ARGS2_LIST "${ARGS2_LIST}")
+
+# make sure the file differ is set
+if (TEST_DIFFER)
+  # separate_arguments(TEST_DIFFER)
+else ()
+  set(TEST_DIFFER diff --strip-trailing-cr)
+endif ()
+if (TEST_SORTER)
+  message(STATUS "Sorting is on.")
+  set(SORTER_ARGS SORTER ${TEST_SORTER})
+endif ()
+message(STATUS "[SciTextCompareManyCmd] DIFFER IS = ${TEST_DIFFER}.")
+message(STATUS "[SciTextCompareManyCmd] SORTER IS = ${TEST_SORTER}.")
+if (TEST_MPIEXEC)
+  separate_arguments(TEST_MPIEXEC)
+endif (TEST_MPIEXEC)
+set(DIR_ARGS)
+if (TEST_TEST_DIR)
+  set(DIR_ARGS ${DIR_ARGS} TEST_DIR ${TEST_TEST_DIR})
+endif ()
+if (TEST_ACCEPTED_DIR)
+  set(DIR_ARGS ${DIR_ARGS} ACCEPTED_DIR ${TEST_ACCEPTED_DIR})
+endif ()
+
+# if TEST_STDOUT_FILE is non-empty, then we use it as the output file
+# into for the execute_process(), and we add it to the ${TEST_TEST_FILES}
+# to be compared. This allows us to have a test which generates one or
+# more files which are to be compared, while also comparing the stdout
+# of the test.
+
+string(REGEX REPLACE "([^\\]|^);" "\\1 " arg1Str "${ARGS1_LIST}")
+string(REGEX REPLACE "[\\](.)" "\\1" arg1Str "${arg1Str}")
+string(REGEX REPLACE "([^\\]|^);" "\\1 " arg2Str "${ARGS2_LIST}")
+string(REGEX REPLACE "[\\](.)" "\\1" arg2Str "${arg2Str}")
+message(STATUS "[SciTextCompareManyCmd] EXECUTING ... ${TEST_MPIEXEC} ${TEST_PROG1} ${arg1Str} && ${TEST_PROG2} ${arg2Str}")
+message(STATUS "[SciTextCompareManyCmd] OUTPUT_FILE = ${TEST_STDOUT_FILE}")
+
+# Execute first command, quitting on error
+message(STATUS "Executing '${TEST_MPIEXEC} ${TEST_PROG1} ${arg1Str}'")
+execute_process(COMMAND ${TEST_MPIEXEC} ${TEST_PROG1} ${ARGS1_LIST}
+  RESULT_VARIABLE EXEC_ERROR
+)
+if (EXEC_ERROR)
+  message(STATUS "EXEC_ERROR      = ${EXEC_ERROR}")
+  message(STATUS "RESULT_VARIABLE = ${RESULT_VARIABLE}")
+  message(FATAL_ERROR "Execution failure.")
+endif ()
+message(STATUS "Execution of ${CMD1} succeeded.")
+
+# Execute second command quitting on error possibly diffing stdout
+message(STATUS "Executing '${TEST_MPIEXEC} ${TEST_PROG2} ${arg2Str}'")
+if (TEST_STDOUT_FILE)
+  execute_process(
+    COMMAND ${TEST_MPIEXEC} ${TEST_PROG2} ${ARGS2_LIST}
+    RESULT_VARIABLE EXEC_ERROR
+    OUTPUT_FILE ${TEST_STDOUT_FILE}
+  )
+else ()
+  execute_process(
+    COMMAND ${TEST_MPIEXEC} ${TEST_PROG2} ${ARGS2_LIST}
+    RESULT_VARIABLE EXEC_ERROR
+  )
+endif ()
+if (EXEC_ERROR)
+  message(STATUS "EXEC_ERROR      = ${EXEC_ERROR}")
+  message(STATUS "RESULT_VARIABLE = ${RESULT_VARIABLE}")
+  message(FATAL_ERROR "Execution failure.")
+endif ()
+message(STATUS "Execution succeeded.")
+
+# Diff stdout
+if (TEST_STDOUT_FILE)
+  SciDiffFiles("${TEST_STDOUT_FILE}" "${TEST_STDOUT_FILE}" ARE_FILES_EQUAL
+      DIFFER ${TEST_DIFFER}
+      ${DIR_ARGS}
+      ${SORTER_ARGS}
+  )
+  if (ARE_FILES_EQUAL)
+    message(STATUS "Comparison of ${TEST_STDOUT_FILE} succeeded.")
+  else ()
+    message(FATAL_ERROR "Comparison failure: ${TEST_STDOUT_FILE} differ.")
+  endif ()
+endif ()
+
+if (TEST_TEST_FILES)
+  # Test all the output
+  # There must be an easier way to pass a list
+  # message(STATUS "TEST_TEST_FILES = ${TEST_TEST_FILES}.")
+  string(REPLACE "\"" "" TEST_FILES_LIST "${TEST_TEST_FILES}")
+  string(REPLACE " " ";" TEST_FILES_LIST "${TEST_FILES_LIST}")
+  string(REPLACE "\"" "" ACCEPTED_FILES_LIST "${TEST_ACCEPTED_FILES}")
+  string(REPLACE " " ";" ACCEPTED_FILES_LIST "${ACCEPTED_FILES_LIST}")
+
+  list(LENGTH TEST_FILES_LIST tlen)
+  list(LENGTH ACCEPTED_FILES_LIST dlen)
+  if (NOT ${tlen} MATCHES ${dlen})
+    message(FATAL_ERROR "The comparison lists are different sizes.")
+  elseif (${tlen} MATCHES 0)
+    #message(STATUS "Nothing to compare.")
+    return()
+  endif ()
+  message(STATUS "TEST_FILES_LIST = ${TEST_FILES_LIST}.")
+  message(STATUS "ACCEPTED_FILES_LIST = ${ACCEPTED_FILES_LIST}.")
+  math(EXPR loopLen "${tlen} - 1")
+
+  foreach (ifile RANGE ${loopLen})
+    list(GET TEST_FILES_LIST ${ifile} testFile)
+    list(GET ACCEPTED_FILES_LIST ${ifile} diffFile)
+# If diffFile is a relative path, add TEST_ACCEPTED_DIR
+    message(STATUS "diffFile = ${diffFile}.")
+    if ((NOT diffFile MATCHES "^/") AND (NOT diffFile MATCHES "^[A-Z]:/"))
+      set(diffFile "${TEST_ACCEPTED_DIR}/${diffFile}")
+    endif ()
+    message(STATUS "[SciTextCompareManyCmd] Comparing ${testFile} and ${diffFile} using ${TEST_DIFFER} with ${SORTER_ARGS}.")
+    SciDiffFiles("${testFile}" "${diffFile}" ARE_FILES_EQUAL
+        DIFFER ${TEST_DIFFER}
+        ${DIR_ARGS}
+        ${SORTER_ARGS}
+    )
+    if (ARE_FILES_EQUAL)
+      message(STATUS "Comparison of ${testFile} succeeded.")
+    else ()
+      set(diffres "${testFile}")
+    endif ()
+  endforeach ()
+  if (diffres)
+    message(FATAL_ERROR "Comparison failure: ${diffres} differ.")
+  endif ()
+  message(STATUS "Comparison succeeded.")
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciTranspPreprocess.cmake superlu_dist5-5.1.3/scimake/SciTranspPreprocess.cmake
--- SuperLU_DIST_5.1.3/scimake/SciTranspPreprocess.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciTranspPreprocess.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,78 @@
+######################################################################
+#
+# SciTranspPreprocess:
+#    Macros for handling transp
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+include(CMakeParseArguments)
+
+# SciTranspPreprocess.cmake
+#
+# Args:
+#   FPPFILES:   List of files to preprocess
+#
+macro(SciTranspPreprocess)
+
+# Parse out the args
+  set(opts ) # no-value args
+  set(oneValArgs PACKAGE;SUBDIR)
+  set(multValArgs FPPFILES) # e.g., lists
+  cmake_parse_arguments(FD "${opts}" "${oneValArgs}" "${multValArgs}" ${ARGN})
+  if (DEFINED FD_SUBDIR)
+        set(trincdir ${CMAKE_CURRENT_SOURCE_DIR}/${FD_SUBDIR})
+  else ()
+        set(trincdir ${CMAKE_CURRENT_SOURCE_DIR})
+  endif ()
+
+#preprocess the fpp sources using transp's python script
+set(F_SOURCES)
+foreach (fpfile ${FD_FPPFILES} )
+  get_filename_component(fbname ${fpfile}
+    NAME_WE
+  )
+  get_filename_component(fext ${fpfile}
+    EXT
+  )
+  if (fext STREQUAL ".F90")
+    set(freeFlag "-free")
+  else ()
+    set(freeFlag "")
+  endif ()
+  string(TOLOWER ${fext} fppfext)
+  set(newfilename ${fbname}${fppfext})
+  add_custom_command(
+    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${newfilename}
+    COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/fpreproc/fppfile.py ${fpfile} ${newfilename} ${freeFlag} -I${trincdir} -I${CMAKE_SOURCE_DIR}/incl_cpp/ ${CPPFLAGS}
+  )
+  set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/${newfilename} PROPERTIES GENERATED 1)
+  list(APPEND F_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/${newfilename})
+endforeach ()
+set(fsources ${FD_PACKAGE}_F_SOURCES)
+set(${fsources} ${F_SOURCES} )
+
+endmacro()
+
+# Handle the weird module issues
+macro(SciInstallModules)
+  set(opts ) # no-value args
+  set(oneValArgs PACKAGE)
+  set(multValArgs MODFILES) # e.g., lists
+  cmake_parse_arguments(FD "${opts}" "${oneValArgs}" "${multValArgs}" ${ARGN})
+  if (SCI_FC_MODULENAME_CAPITALIZED)
+    string(TOUPPER "${FD_MODFILES}" FD_MODFILES)
+  endif ()
+  set(INC_MODFILES)
+  foreach (module ${FD_MODFILES})
+    set(INC_MODFILES ${INC_MODFILES} ${CMAKE_CURRENT_BINARY_DIR}/${module}.${SCI_FC_MODULE_SUFFIX})
+  endforeach ()
+  set(modfiles ${FD_PACKAGE}_INC_MODULES)
+  set(${modfiles} ${INC_MODFILES} )
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciUnitTestMacros.cmake superlu_dist5-5.1.3/scimake/SciUnitTestMacros.cmake
--- SuperLU_DIST_5.1.3/scimake/SciUnitTestMacros.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciUnitTestMacros.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,339 @@
+######################################################################
+#
+# SciUnitTestMacros: Macros for adding unit tests of various types.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright 2014-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+# Add the specified directories to the shared libraries path
+macro(SciAddSharedLibDirs)
+# parse the path argument
+  set(multiValArgs ADDPATH)
+  cmake_parse_arguments(SHLIB_DIRS "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN})
+# if 1+ directories were specified add it/them to the path in the parent scope
+  if (SHLIB_DIRS_ADDPATH)
+    set(SHLIB_CMAKE_PATH_VAL ${SHLIB_DIRS_ADDPATH} ${SHLIB_CMAKE_PATH_VAL})
+    if (NOT "${CMAKE_CURRENT_BINARY_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
+# it only makes sense to set the variable in the parent scope if not
+# in the top level directory
+      set(SHLIB_CMAKE_PATH_VAL "${SHLIB_CMAKE_PATH_VAL}" PARENT_SCOPE)
+    endif (NOT "${CMAKE_CURRENT_BINARY_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
+
+# make a system native path var containing all of the shared libraries
+# directories
+    makeNativePath(INPATH "${SHLIB_CMAKE_PATH_VAL}" OUTPATH SCIMAKE_SHLIB_NATIVE_PATH_VAL)
+  endif (SHLIB_DIRS_ADDPATH)
+endmacro()
+
+# Add current binary dir to shared lib path var. This is needed when doing
+# shared builds in order for executables to run.
+macro(SciAddCurrentBinaryDir)
+  SciAddSharedLibDirs(ADDPATH "${CMAKE_CURRENT_BINARY_DIR}")
+endmacro()
+
+# make a macro for converting a cmake path into a platform specific path
+macro(makeNativePath)
+  set(oneValArgs OUTPATH)
+  set(multiValArgs INPATH)
+  cmake_parse_arguments(TO_NATIVE "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN})
+  file(TO_NATIVE_PATH "${TO_NATIVE_INPATH}" NATIVE_OUTPATH)
+  if (WIN32)
+    # string(REPLACE "\\" "\\\\\\\\" ${NATIVE_OUTPATH} "${NATIVE_OUTPATH}")
+    string(REPLACE "\\" "\\\\" ${NATIVE_OUTPATH} "${NATIVE_OUTPATH}")
+    string(REPLACE ";" "\\;" ${TO_NATIVE_OUTPATH} "${NATIVE_OUTPATH}")
+  else ()
+    string(REPLACE ";" ":" ${TO_NATIVE_OUTPATH} "${NATIVE_OUTPATH}")
+  endif ()
+endmacro()
+
+message("")
+message("--------- Setting up testing ---------")
+
+# Set test environment
+if (WIN32)
+  set(SHLIB_PATH_VAR PATH)
+elseif (APPLE)
+  set(SHLIB_PATH_VAR DYLD_LIBRARY_PATH)
+elseif (LINUX)
+  set(SHLIB_PATH_VAR LD_LIBRARY_PATH)
+endif ()
+message(STATUS "SHLIB_PATH_VAR = ${SHLIB_PATH_VAR}.")
+
+file(TO_CMAKE_PATH "$ENV{${SHLIB_PATH_VAR}}" SHLIB_CMAKE_PATH_VAL)
+makeNativePath(INPATH "${SHLIB_CMAKE_PATH_VAL}" OUTPATH SCIMAKE_SHLIB_NATIVE_PATH_VAL)
+
+message(STATUS "In SciAddUnitTestMacros.cmake, SHLIB_CMAKE_PATH_VAL = ${SHLIB_CMAKE_PATH_VAL}")
+
+#
+# Check the source with cppcheck
+#
+macro(SciCppCheckSource build)
+  if (("${build}" STREQUAL "") OR (CppCheck_cppcheck AND ${CMAKE_INSTALL_PREFIX} MATCHES "${build}$"))
+    message(STATUS "Source code checking enabled.")
+    add_test(NAME cppcheck COMMAND ${CMAKE_COMMAND}
+      -DCppCheck_cppcheck:FILEPATH=${CppCheck_cppcheck}
+      -DCPPCHECK_SOURCE_DIR:PATH=${CMAKE_SOURCE_DIR}
+      -P ${SCIMAKE_DIR}/SciCppCheck.cmake
+    )
+    set_tests_properties(cppcheck
+      PROPERTIES ENVIRONMENT
+        "${SHLIB_PATH_VAR}=${SCIMAKE_SHLIB_NATIVE_PATH_VAL}"
+    )
+  else ()
+    message(STATUS "Source code checking not enabled.")
+  endif ()
+endmacro()
+
+# Add a unit test. If the test needs to compare its results against some
+# expected results, then RESULTS_DIR and RESULTS (or STDOUT) must be set.
+#
+# Args
+#
+#   NAME          = the name of this test (which may or may not be the same
+#                   as the executable)
+#   COMMAND       = test executable (typically same as NAME, but need not be)
+#   SOURCES       = 1+ source files to be compiled
+#   LIBS          = libraries needed to link test
+#   ARGS          = arguments to run the executable with
+#   DIFFER        = Name of executable to do diff.  If not given, assumed to
+#                   be "diff --strip-trailing-cr" in SciTextCompare.
+#   SORTER        = Name of executable to sort output with before comparing. If
+#                   not specified, no sorting is done.
+#   TEST_DIR      = Where the test files are generated.  Defaults to current
+#                   binary dir.
+#   DIFF_DIR      = Where the golden files are located.  Defaults to current
+#                   source dir.
+#   RESULTS_DIR   = Backward compatible way of specifying DIFF_DIR.
+#   STDOUT_FILE   = Name of file into which stdout should be captured. This
+#                   will be compared against a same named file in ${DIFF_DIR}.
+#   TEST_FILES    = Additional test generated files
+#   DIFF_FILES    = Golden generated files.  Should be same-length vector.
+#                   Defaults to TEST_FILES.
+#   MPIEXEC_PROG  = File to preface executable with for parallel run.
+#   NUMPROCS      = Number of processors to specify for parallel run.
+#   USE_CUDA_ADD  = Add libraries and executables using cuda
+#   JOIN_STDERR   = Join standard err to standard out
+#   LABELS        = Add these labels to the unit test
+
+macro(SciAddUnitTest)
+  set(opts USE_CUDA_ADD JOIN_STDERR)
+  set(oneValArgs NAME COMMAND ARGS TEST_DIR DIFF_DIR RESULTS_DIR STDOUT_FILE NUMPROCS MPIEXEC_PROG)
+  set(multiValArgs SORTER DIFFER RESULTS_FILES TEST_FILES DIFF_FILES
+      SOURCES LIBS LABELS
+      PROPERTIES ATTACHED_FILES)
+  cmake_parse_arguments(TEST
+      "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN}
+  )
+  if (NOT TEST_COMMAND)
+    set (TEST_COMMAND ${TEST_NAME})
+  endif ()
+  if (IS_ABSOLUTE ${TEST_COMMAND})
+    set(TEST_EXECUTABLE "${TEST_COMMAND}")
+  else ()
+    set(TEST_EXECUTABLE "${CMAKE_CURRENT_BINARY_DIR}/${TEST_COMMAND}")
+  endif ()
+# Backward compatible specification of goldern results localtion
+  if (NOT TEST_RESULTS_DIR)
+    set(TEST_RESULTS_DIR ${CMAKE_CURRENT_SOURCE_DIR})
+  endif ()
+# Actual golden results location
+  if (NOT TEST_DIFF_DIR)
+    set(TEST_DIFF_DIR ${TEST_RESULTS_DIR})
+  endif ()
+# Location of test files
+  if (NOT TEST_TEST_DIR)
+    set(TEST_TEST_DIR ${CMAKE_CURRENT_BINARY_DIR})
+  endif ()
+# make sure there are test and diff files
+  if (NOT TEST_TEST_FILES)
+    set(TEST_TEST_FILES ${TEST_RESULTS_FILES})
+  endif ()
+  if (NOT TEST_DIFF_FILES)
+    foreach (fname ${TEST_TEST_FILES})
+      get_filename_component(TEST_DIFF_FILE "${fname}" NAME)
+      set(TEST_DIFF_FILES ${TEST_DIFF_FILES} "${TEST_DIFF_FILE}")
+    endforeach ()
+  endif ()
+# if parallel set the mpiexec argument
+  if (TEST_NUMPROCS AND ENABLE_PARALLEL AND MPIEXEC)
+    set(TEST_MPIEXEC "${MPIEXEC} -np ${TEST_NUMPROCS}")
+  else ()
+    set(TEST_MPIEXEC)
+  endif (TEST_NUMPROCS AND ENABLE_PARALLEL AND MPIEXEC)
+  if (TEST_SOURCES)
+    if (TEST_USE_CUDA_ADD)
+      cuda_add_executable(${TEST_COMMAND} ${TEST_SOURCES})
+    else ()
+      add_executable(${TEST_COMMAND} ${TEST_SOURCES})
+    endif ()
+  endif ()
+  if (TEST_LIBS)
+    target_link_libraries(${TEST_COMMAND} ${TEST_LIBS})
+  endif ()
+# Have stderr go to same file as stdout if requested.
+  set (stdoutarg)
+  if (TEST_STDOUT_FILE)
+    set (stdoutarg ${stdoutarg} "-DTEST_STDOUT_FILE:STRING=${TEST_STDOUT_FILE}")
+  endif ()
+  if (TEST_JOIN_STDERR)
+    set (stdoutarg ${stdoutarg} -DTEST_STDERR_FILE:STRING=${TEST_STDOUT_FILE})
+  endif ()
+  add_test(NAME ${TEST_NAME} COMMAND ${CMAKE_COMMAND}
+      "-DTEST_SORTER:BOOL=${TEST_SORTER}"
+      "-DTEST_DIFFER:STRING=${TEST_DIFFER}"
+      -DTEST_PROG:FILEPATH=${TEST_EXECUTABLE}
+      -DTEST_MPIEXEC:STRING=${TEST_MPIEXEC}
+      "-DTEST_ARGS:STRING=${TEST_ARGS}"
+      ${stdoutarg}
+      -DTEST_TEST_DIR:PATH=${TEST_TEST_DIR}
+      -DTEST_TEST_FILES:STRING=${TEST_TEST_FILES}
+      -DTEST_DIFF_DIR:PATH=${TEST_DIFF_DIR}
+      -DTEST_DIFF_FILES:STRING=${TEST_DIFF_FILES}
+      -DTEST_SCIMAKE_DIR:PATH=${SCIMAKE_DIR}
+      -P ${SCIMAKE_DIR}/SciTextCompare.cmake
+  )
+  if (TEST_LABELS)
+    set_tests_properties(${TEST_NAME} PROPERTIES LABELS "${TEST_LABELS}")
+  endif ()
+
+# ATTACHED_FILES is a list of files to attach and if non-empty, it
+# overrides the default, which is ${TEST_RESULTS_FILES}.
+  if (TEST_ATTACHED_FILES)
+    set(FILES_TO_ATTACH ${TEST_ATTACHED_FILES})
+  else ()
+    set(FILES_TO_ATTACH ${TEST_RESULTS_FILES})
+  endif ()
+  set_tests_properties(${TEST_NAME}
+    PROPERTIES ENVIRONMENT
+      "${SHLIB_PATH_VAR}=${SCIMAKE_SHLIB_NATIVE_PATH_VAL}" ${TEST_PROPERTIES}
+    ATTACHED_FILES_ON_FAIL "${FILES_TO_ATTACH}"
+  )
+
+# Add command to replace results
+  add_custom_target(${TEST_NAME}ReplaceResults)
+  string(REPLACE " " ";" resfiles "${TEST_TEST_FILES}")
+  foreach (file ${TEST_STDOUT_FILE} ${resfiles})
+    add_custom_command(TARGET ${TEST_NAME}ReplaceResults
+      COMMAND ${CMAKE_COMMAND} -E copy ${file} ${TEST_DIFF_DIR}
+      WORKING_DIRECTORY ${TEST_TEST_DIR}
+    )
+  endforeach ()
+
+endmacro()
+
+# Add a unit test with more than one command.
+# If the test needs to compare its results against some
+# expected results, then RESULTS_DIR and RESULTS (or STDOUT) must be set.
+#
+# Args
+#
+# NAME          = the name of this test (which may or may not be the same
+#                 as the executable)
+# CMD1          = first test executable (NAME is set to this if NAME undef)
+# ARGS1         = arguments to run the first executable with
+# CMD2          = secon test executable
+# ARGS2         = arguments to run the second executable with
+# DIFFER        = Name of executable to do diff.  If not given, assumed to
+#                 be "diff --strip-trailing-cr" in SciTextCompare.
+# SORTER        = Name of executable to sort output with before comparing. If
+#                 not specified, no sorting is done.
+# TEST_DIR      = Where the test files are generated.  Defaults to current
+#                 binary dir.
+# ACCEPTED_DIR  = Where the golden files are located.  Defaults to current
+#                 source dir.
+# STDOUT_FILE   = Name of file into which stdout should be captured. This
+#                 will be compared against same named file in ${ACCEPTED_DIR}.
+# TEST_FILES    = Additional test generated files
+# ACCEPTED_FILES  = Golden generated files.  Should be same-length vector.
+#                 Defaults to TEST_FILES.
+# MPIEXEC_PROG  = File to preface executable with for parallel run.
+# NUMPROCS      = Number of processors to specify for parallel run.
+# LABELS        = Add these labels to the unit test
+
+macro(SciAddUnitTestMultiCmd)
+
+  set(oneValArgs NAME CMD1 ARGS1 CMD2 ARGS2 TEST_DIR ACCEPTED_DIR STDOUT_FILE NUMPROCS MPIEXEC_PROG)
+  set(multiValArgs SORTER DIFFER TEST_FILES ACCEPTED_FILES LABELS)
+  cmake_parse_arguments(TEST
+      "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN}
+  )
+  if (NOT TEST_CMD1)
+    set (TEST_CMD1 ${TEST_NAME})
+  endif ()
+  if (IS_ABSOLUTE ${TEST_CMD1})
+    set(TEST_EXEC1 "${TEST_CMD1}")
+  else ()
+    set(TEST_EXEC1 "${CMAKE_CURRENT_BINARY_DIR}/${TEST_CMD1}")
+  endif ()
+  if (IS_ABSOLUTE ${TEST_CMD2})
+    set(TEST_EXEC2 "${TEST_CMD2}")
+  else ()
+    set(TEST_EXEC2 "${CMAKE_CURRENT_BINARY_DIR}/${TEST_CMD2}")
+  endif ()
+# Backward compatible specification of new results location
+  if (NOT TEST_RESULTS_DIR)
+    set(TEST_RESULTS_DIR ${CMAKE_CURRENT_SOURCE_DIR})
+  endif ()
+# Actual golden results location
+  if (NOT TEST_ACCEPTED_DIR)
+    set(TEST_ACCEPTED_DIR ${TEST_RESULTS_DIR})
+  endif ()
+# Location of test files
+  if (NOT TEST_TEST_DIR)
+    set(TEST_TEST_DIR ${CMAKE_CURRENT_BINARY_DIR})
+  endif ()
+# make sure there are test and diff files
+  if (NOT TEST_TEST_FILES)
+    set(TEST_TEST_FILES ${TEST_RESULTS_FILES})
+  endif ()
+  if (NOT TEST_ACCEPTED_FILES)
+    foreach (fname ${TEST_TEST_FILES})
+      get_filename_component(TEST_DIFF_FILE "${fname}" NAME)
+      set(TEST_ACCEPTED_FILES ${TEST_ACCEPTED_FILES} "${TEST_DIFF_FILE}")
+    endforeach ()
+  endif ()
+# if parallel set the mpiexec argument
+  if (TEST_NUMPROCS AND ENABLE_PARALLEL AND MPIEXEC)
+    set(TEST_MPIEXEC "${MPIEXEC} -np ${TEST_NUMPROCS}")
+  else ()
+    set(TEST_MPIEXEC)
+  endif (TEST_NUMPROCS AND ENABLE_PARALLEL AND MPIEXEC)
+
+# Add the test using  SciTextCompare
+  add_test(NAME ${TEST_NAME} COMMAND ${CMAKE_COMMAND}
+      -DTEST_PROG1:FILEPATH=${TEST_EXEC1}
+      -DTEST_ARGS1:STRING=${TEST_ARGS1}
+      -DTEST_PROG2:FILEPATH=${TEST_EXEC2}
+      -DTEST_ARGS2:STRING=${TEST_ARGS2}
+      "-DTEST_SORTER:BOOL=${TEST_SORTER}"
+      "-DTEST_DIFFER:STRING=${TEST_DIFFER}"
+      -DTEST_MPIEXEC:STRING=${TEST_MPIEXEC}
+      -DTEST_STDOUT_FILE:STRING=${TEST_STDOUT_FILE}
+      -DTEST_TEST_DIR:PATH=${TEST_TEST_DIR}
+      -DTEST_TEST_FILES:STRING=${TEST_TEST_FILES}
+      -DTEST_ACCEPTED_DIR:PATH=${TEST_ACCEPTED_DIR}
+      -DTEST_ACCEPTED_FILES:STRING=${TEST_ACCEPTED_FILES}
+      -DTEST_SCIMAKE_DIR:PATH=${SCIMAKE_DIR}
+      -P ${SCIMAKE_DIR}/SciTextCompareManyCmd.cmake
+  )
+  if (TEST_LABELS)
+    set_tests_properties(${TEST_NAME} PROPERTIES LABELS "${TEST_LABELS}")
+  endif ()
+
+# Add command to replace results
+  add_custom_target(${TEST_NAME}ReplaceResults)
+  string(REPLACE " " ";" resfiles "${TEST_TEST_FILES}")
+  foreach (file ${TEST_STDOUT_FILE} ${resfiles})
+    add_custom_command(TARGET ${TEST_NAME}ReplaceResults
+      COMMAND ${CMAKE_COMMAND} -E copy ${file} ${TEST_ACCEPTED_DIR}
+      WORKING_DIRECTORY ${TEST_TEST_DIR}
+    )
+  endforeach ()
+
+endmacro()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/SciWinFlags.cmake superlu_dist5-5.1.3/scimake/SciWinFlags.cmake
--- SuperLU_DIST_5.1.3/scimake/SciWinFlags.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/SciWinFlags.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,52 @@
+######################################################################
+#
+# Include for common Windows flags and settings.
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+#
+######################################################################
+
+if (WIN32)
+# ICL needs to be defined here (Intel compiler and Visual Studio) for
+# trilinos: ml_utils.h
+  add_definitions(-DWIN32)
+  set(_USE_MATH_DEFINES 1
+    CACHE STRING "Define whether to use math defines(for Windows)")
+  string(REGEX MATCH "^.*icl\\.*" USING_ICL "${CMAKE_C_COMPILER}")
+  string(REGEX MATCH "^.*cl\\.*" USING_CL "${CMAKE_C_COMPILER}")
+  string(REGEX MATCH "^.*mingw.*" USING_MINGW "${CMAKE_C_COMPILER}")
+  if (USING_ICL)
+    add_definitions(-DICL)
+    set(_TIMEVAL_DEFINED 1
+        CACHE STRING "Define whether system has timeval(for Windows)")
+    foreach (i DEBUG RELEASE MINSIZERELEASE REWITHDEBINFO)
+      set(CMAKE_C_FLAGS_${i} "${CMAKE_C_FLAGS_${i}} /Qstd:c99")
+    endforeach ()
+  elseif (USING_CL)
+
+    # There are so many things wrong with giving "-DCL" to the compiler
+    # just because the compiler is cl.exe.  So commenting out this
+    # blanket macro.  Rationale:
+    #
+    # - Non standard.  _MSC_VER is the existing standard.
+    # - Applies to Fortran code also, perhaps one that we cannot change.
+    #   Fortran code will have small identifiers and capitalized too.
+    # - Not easy to grep where it is used (imagine PTCL, PARTICLE, etc).
+    # - Weird error messages when CL is a variable name.
+    # - The compiler/preprocessor does not need to be told its identity!
+    #
+    # If some code breaks, use builtin _MSC_VER there instead of CL.
+    #
+    # -- CJ
+
+    # add_definitions(-DCL)
+
+    set(_TIMEVAL_DEFINED 1
+        CACHE STRING "Define whether system has timeval(for Windows)")
+  endif ()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/svninfo.txt superlu_dist5-5.1.3/scimake/svninfo.txt
--- SuperLU_DIST_5.1.3/scimake/svninfo.txt	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/svninfo.txt	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,13 @@
+Path: .
+Working Copy Root Path: /scratch/source_code/nimall-clean/nimdevel/scimake
+URL: https://ice.txcorp.com/svnrepos/code/scimake/trunk
+Relative URL: ^/trunk
+Repository Root: https://ice.txcorp.com/svnrepos/code/scimake
+Repository UUID: 03405629-b146-45b9-a56f-558d5653c1c1
+Revision: 1136
+Node Kind: directory
+Schedule: normal
+Last Changed Author: cary
+Last Changed Rev: 1136
+Last Changed Date: 2017-02-20 14:03:27 -0700 (Mon, 20 Feb 2017)
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/checkCompilerRTTI.cxx superlu_dist5-5.1.3/scimake/trycompile/checkCompilerRTTI.cxx
--- SuperLU_DIST_5.1.3/scimake/trycompile/checkCompilerRTTI.cxx	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/checkCompilerRTTI.cxx	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,111 @@
+/**
+ *
+ * @file    checkCompilerRTTI.cxx
+ *
+ * @brief   For checking RTTI capabilities of compiler
+ *
+ * @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+ *
+ * Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+ * See LICENSE file (EclipseLicense.txt) for conditions of use.
+ */
+
+#include <typeinfo>
+#include <iostream>
+#include <string>
+
+template <class T>
+class shared_ptr {
+  public:
+
+    shared_ptr(T* t) : ptr(t) {
+    }
+
+    T* get() {
+      return ptr;
+    }
+
+  private:
+
+    T* ptr;
+};
+
+struct Base2 {
+  virtual void foo() {
+  }
+
+};
+
+struct Derived2 : public Base2 {
+  void foo() {
+  }
+
+};
+
+template <class T>
+struct Base {
+  virtual void foo() {
+  }
+
+};
+
+template <class T>
+struct Derived : public Base<T> {
+  void foo() {
+  }
+
+};
+
+class Foo {
+  public:
+
+    bool checkType(shared_ptr<Base<double> >& s) {
+      return std::string(typeid(*s.get()).name()) ==
+             std::string(typeid(Derived<double>).name());
+    }
+
+};
+
+class Foo2 {
+  public:
+
+    bool checkType(shared_ptr<Base2>& s) {
+      return std::string(typeid(*s.get()).name()) ==
+             std::string(typeid(Derived2).name());
+    }
+
+};
+
+template <class T>
+bool testTemplate() {
+  shared_ptr<Base<double> > b(new T());
+  Foo f;
+  return f.checkType(b);
+}
+
+template <class T>
+bool testNonTemplate() {
+  shared_ptr<Base2> b(new T());
+  Foo2 f;
+  return f.checkType(b);
+}
+
+int main() {
+  // per convention, return of 0 is pass, 1 is fail. So in the end we
+  // need to
+  // take the compliment of the flag value.
+  bool flag = true;
+
+  shared_ptr<Base<double> > shared(new Derived<double>());
+  Base<double>* base = new Derived<double>();
+
+  flag = (typeid(*base) == typeid(Derived<double>)) &&
+      (typeid(*shared.get()) == typeid(Derived<double>));
+  flag = flag && testNonTemplate<Derived2>();
+  flag = flag && testTemplate<Derived<double> >();
+
+  delete base;
+
+  return !flag;
+}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/gendeclstatics.cxx superlu_dist5-5.1.3/scimake/trycompile/gendeclstatics.cxx
--- SuperLU_DIST_5.1.3/scimake/trycompile/gendeclstatics.cxx	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/gendeclstatics.cxx	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,23 @@
+/**
+ * $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+ *
+ * Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+ * See LICENSE file (EclipseLicense.txt) for conditions of use.
+ */
+
+template <class TYPE>
+class X {
+  public:
+    static int r;
+};
+
+template <class TYPE>
+int X<TYPE>::r = 0;
+
+int main (int argc, char* argv[]) {
+  X<double> x;
+// cppcheck not seeing above static member initialization
+// cppcheck-suppress uninitStructMember
+  int rr = x.r + X<float>::r;
+}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/Makefile.am superlu_dist5-5.1.3/scimake/trycompile/Makefile.am
--- SuperLU_DIST_5.1.3/scimake/trycompile/Makefile.am	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/Makefile.am	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,19 @@
+# #############################################################
+#
+# File:    Makefile.am
+#
+# Purpose: Purpose: Needed for cmake in an autotools project
+#
+# $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+# #############################################################
+
+SUBDIRS =
+
+EXTRA_DIST = \
+  checkCompilerRTTI.cxx gendeclstatics.cxx modulesrcfile.f90 \
+  mpi_mod.f90 mpi_h.cxx stdabsdbl.cxx
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/modulesrcfile.f90 superlu_dist5-5.1.3/scimake/trycompile/modulesrcfile.f90
--- SuperLU_DIST_5.1.3/scimake/trycompile/modulesrcfile.f90	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/modulesrcfile.f90	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,15 @@
+!
+! @file    modulesrcfile.f90
+!
+! @brief   Source code for detecting module file name
+!
+! @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+!
+! Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+! See LICENSE file (EclipseLicense.txt) for conditions of use.
+!
+
+module moduleNAME
+  integer :: j
+end module moduleNAME
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/mpi_h.cxx superlu_dist5-5.1.3/scimake/trycompile/mpi_h.cxx
--- SuperLU_DIST_5.1.3/scimake/trycompile/mpi_h.cxx	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/mpi_h.cxx	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,13 @@
+/**
+ * $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+ *
+ * Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+ * See LICENSE file (EclipseLicense.txt) for conditions of use.
+ */
+
+#include <mpi.h>
+
+int main(int argc, char** argv) {
+  return 0;
+}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/mpi_mod.f90 superlu_dist5-5.1.3/scimake/trycompile/mpi_mod.f90
--- SuperLU_DIST_5.1.3/scimake/trycompile/mpi_mod.f90	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/mpi_mod.f90	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,15 @@
+!
+! @file    mpi_mod.f90
+!
+! @brief   Source code for detecting module file name
+!
+! @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+!
+! Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+! See LICENSE file (EclipseLicense.txt) for conditions of use.
+!
+
+      program mpi_mod
+        use mpi
+      end program mpi_mod
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/pragma_omp_simd.cxx superlu_dist5-5.1.3/scimake/trycompile/pragma_omp_simd.cxx
--- SuperLU_DIST_5.1.3/scimake/trycompile/pragma_omp_simd.cxx	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/pragma_omp_simd.cxx	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,24 @@
+/**
+ * $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+ *
+ * Code stub for determining whether the compiler supports simd pragmas
+ * from OpenMP 4.
+ *
+ * Copyright &copy; 2015-2017, Tech-X Corporation, Boulder, CO.
+ * See LICENSE file (EclipseLicense.txt) for conditions of use.
+ */
+#include <omp.h>
+
+int main(int argc, char** argv) {
+  float a[8] = {
+    0.0
+  }, b[8] = {
+    0.0
+  };
+#pragma omp for simd
+  for (int i = 0; i < 8; ++i) {
+    a[i] += b[i];
+  }
+  return 0;
+}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/shared_ptr.cxx superlu_dist5-5.1.3/scimake/trycompile/shared_ptr.cxx
--- SuperLU_DIST_5.1.3/scimake/trycompile/shared_ptr.cxx	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/shared_ptr.cxx	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,18 @@
+/**
+ * $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+ *
+ * Copyright &copy; 2013-2017, Tech-X Corporation, Boulder, CO.
+ * See LICENSE file (EclipseLicense.txt) for conditions of use.
+ */
+
+#include <sci_shared_ptr>
+
+struct S {
+  int i;
+};
+
+int main(int argc, char** argv) {
+  sci_shared_ptr<S> sptr;
+  return 0;
+}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/trycompile/stdabsdbl.cxx superlu_dist5-5.1.3/scimake/trycompile/stdabsdbl.cxx
--- SuperLU_DIST_5.1.3/scimake/trycompile/stdabsdbl.cxx	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/trycompile/stdabsdbl.cxx	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,17 @@
+/**
+ * $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+ *
+ * Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+ * See LICENSE file (EclipseLicense.txt) for conditions of use.
+ *
+ * Determine whether the compiler knows std::abs<double>.
+ */
+
+#include <cmath>
+
+int main(int argc, char** argv) {
+  double a = 0;
+  double b = std::abs(a);
+  return 0;
+}
+
diff -ruN SuperLU_DIST_5.1.3/scimake/UseLATEX.cmake superlu_dist5-5.1.3/scimake/UseLATEX.cmake
--- SuperLU_DIST_5.1.3/scimake/UseLATEX.cmake	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/UseLATEX.cmake	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,1401 @@
+######################################################################
+#
+# @file    UseLATEX.cmake
+#
+# @brief   Documentation goes here.
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2013-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+# File: UseLATEX.cmake
+# CMAKE commands to actually use the LaTeX compiler
+# Version: 1.10.3
+# Author: Kenneth Moreland <kmorel@sandia.gov>
+#
+# Copyright 2004 Sandia Corporation.
+# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
+# license for use of this work by or on behalf of the
+# U.S. Government. Redistribution and use in source and binary forms, with
+# or without modification, are permitted provided that this Notice and any
+# statement of authorship are reproduced on all copies.
+#
+# The following function is defined:
+#
+# ADD_LATEX_DOCUMENT(<tex_file>
+#                    [BIBFILES <bib_files>]
+#                    [INPUTS <input_tex_files>]
+#                    [IMAGE_DIRS] <image_directories>
+#                    [IMAGES] <image_files>
+#                    [CONFIGURE] <tex_files>
+#                    [DEPENDS] <tex_files>
+#                    [MULTIBIB_NEWCITES] <suffix_list>
+#                    [USE_INDEX] [USE_GLOSSARY] [USE_NOMENCL]
+#                    [DEFAULT_PDF] [DEFAULT_SAFEPDF] [DEFAULT_PS] [NO_DEFAULT]
+#                    [MANGLE_TARGET_NAMES])
+#       Adds targets that compile <tex_file>.  The latex output is placed
+#       in LATEX_OUTPUT_PATH or CMAKE_CURRENT_BINARY_DIR if the former is
+#       not set.  The latex program is picky about where files are located,
+#       so all input files are copied from the source directory to the
+#       output directory.  This includes the target tex file, any tex file
+#       listed with the INPUTS option, the bibliography files listed with
+#       the BIBFILES option, and any .cls, .bst, and .clo files found in
+#       the current source directory.  Images found in the IMAGE_DIRS
+#       directories or listed by IMAGES are also copied to the output
+#       directory and coverted to an appropriate format if necessary.  Any
+#       tex files also listed with the CONFIGURE option are also processed
+#       with the CMake CONFIGURE_FILE command (with the @ONLY flag).  Any
+#       file listed in CONFIGURE but not the target tex file or listed with
+#       INPUTS has no effect. DEPENDS can be used to specify generated files
+#       that are needed to compile the latex target.
+#
+#       The following targets are made:
+#               dvi: Makes <name>.dvi
+#               pdf: Makes <name>.pdf using pdflatex.
+#               safepdf: Makes <name>.pdf using ps2pdf.  If using the default
+#                       program arguments, this will ensure all fonts are
+#                       embedded and no lossy compression has been performed
+#                       on images.
+#               ps: Makes <name>.ps
+#               html: Makes <name>.html
+#               auxclean: Deletes <name>.aux and other auxiliary files.
+#                       This is sometimes necessary if a LaTeX error occurs
+#                       and writes a bad aux file.  Unlike the regular clean
+#                       target, it does not delete other input files, such as
+#                       converted images, to save time on the rebuild.
+#
+#       The dvi target is added to the ALL.  That is, it will be the target
+#       built by default.  If the DEFAULT_PDF argument is given, then the
+#       pdf target will be the default instead of dvi.  Likewise,
+#       DEFAULT_SAFEPDF sets the default target to safepdf.  If NO_DEFAULT
+#       is specified, then no target will be added to ALL, which is
+#       convenient when including LaTeX documentation with something else.
+#
+#       If the argument MANGLE_TARGET_NAMES is given, then each of the
+#       target names above will be mangled with the <tex_file> name.  This
+#       is to make the targets unique if ADD_LATEX_DOCUMENT is called for
+#       multiple documents.  If the argument USE_INDEX is given, then
+#       commands to build an index are made.  If the argument USE_GLOSSARY
+#       is given, then commands to build a glossary are made.  If the
+#       argument MULTIBIB_NEWCITES is given, then additional bibtex calls
+#       are added to the build to support the extra auxiliary files created
+#       with the \newcite command in the multibib package.
+#
+# History:
+#
+# 1.10.3 Check for Windows version of convert being used instead of
+#       ImageMagick's version (thanks to Martin Baute).
+#
+# 1.10.2 Use htlatex as a fallback when latex2html is not available (thanks
+#       to Tomasz Grzegurzko).
+#
+# 1.10.1 Make convert program mandatory only if actually used (thanks to
+#       Julien Schueller).
+#
+# 1.10.0 Added NO_DEFAULT and DEFAULT_PS options.
+#       Fixed issue with cleaning files for LaTeX documents originating in
+#       a subdirectory.
+#
+# 1.9.6 Fixed problem with LATEX_SMALL_IMAGES.
+#       Strengthened check to make sure the output directory does not contain
+#       the source files.
+#
+# 1.9.5 Add support for image types not directly supported by either latex
+#       or pdflatex.  (Thanks to Jorge Gerardo Pena Pastor for SVG support.)
+#
+# 1.9.4 Fix issues with filenames containing multiple periods.
+#
+# 1.9.3 Hide some variables that are now cached but should not show up in
+#       the ccmake list of variables.
+#
+# 1.9.2 Changed MACRO declarations to FUNCTION declarations.  The better
+#       FUNCTION scoping will hopefully avoid some common but subtle bugs.
+#       This implicitly increases the minimum CMake version to 4.6 (although
+#       I honestly only test it with the latest 4.8 version).
+#
+#       Since we are updating the minimum CMake version, I'm going to start
+#       using the builtin LIST commands that are now available.
+#
+#       Favor using pdftops from the Poppler package to convert from pdf to
+#       eps.  It does a much better job than ImageMagick or ghostscript.
+#
+# 1.9.1 Fixed typo that caused the LATEX_SMALL_IMAGES option to fail to
+#       activate.
+#
+# 1.9.0 Add support for the multibib package (thanks to Antonio LaTorre).
+#
+# 1.8.2 Fix corner case when an argument name was also a variable containing
+#       the text of an argument.  In this case, the CMake IF was matching
+#       the argument text with the contents of the variable with the same
+#       argument name.
+#
+# 1.8.1 Fix problem where ps2pdf was not getting the appropriate arguments.
+#
+# 1.8.0 Add support for synctex.
+#
+# 1.7.7 Support calling xindy when making glossaries.
+#
+#       Improved make clean support.
+#
+# 1.7.6 Add support for the nomencl package (thanks to Myles English).
+#
+# 1.7.5 Fix issue with bibfiles being copied two different ways, which causes
+#       Problems with dependencies (thanks to Edwin van Leeuwen).
+#
+# 1.7.4 Added the DEFAULT_SAFEPDF option (thanks to Raymond Wan).
+#
+#       Added warnings when image directories are not found (and were
+#       probably not given relative to the source directory).
+#
+# 1.7.3 Fix some issues with interactions between makeglossaries and bibtex
+#       (thanks to Mark de Wever).
+#
+# 1.7.2 Use ps2pdf to convert eps to pdf to get around the problem with
+#       ImageMagick dropping the bounding box (thanks to Lukasz Lis).
+#
+# 1.7.1 Fixed some dependency issues.
+#
+# 1.7.0 Added DEPENDS options (thanks to Theodore Papadopoulo).
+#
+# 1.6.1 Ported the makeglossaries command to CMake and embedded the port
+#       into UseLATEX.cmake.
+#
+# 1.6.0 Allow the use of the makeglossaries command.  Thanks to Oystein
+#       S. Haaland for the patch.
+#
+# 1.5.0 Allow any type of file in the INPUTS lists, not just tex file
+#       (suggested by Eric Noulard).  As a consequence, the ability to
+#       specify tex files without the .tex extension is removed.  The removed
+#       function is of dubious value anyway.
+#
+#       When copying input files, skip over any file that exists in the
+#       binary directory but does not exist in the source directory with the
+#       assumption that these files were added by some other mechanism.  I
+#       find this useful when creating large documents with multiple
+#       chapters that I want to build separately (for speed) as I work on
+#       them.  I use the same boilerplate as the starting point for all
+#       and just copy it with different configurations.  This was what the
+#       separate ADD_LATEX_DOCUMENT method was supposed to originally be for.
+#       Since its external use is pretty much deprecated, I removed that
+#       documentation.
+#
+# 1.4.1 Copy .sty files along with the other class and package files.
+#
+# 1.4.0 Added a MANGLE_TARGET_NAMES option that will mangle the target names.
+#
+#       Fixed problem with copying bib files that became apparent with
+#       CMake 2.4.
+#
+# 1.3.0 Added a LATEX_OUTPUT_PATH variable that allows you or the user to
+#       specify where the built latex documents to go.  This is especially
+#       handy if you want to do in-source builds.
+#
+#       Removed the ADD_LATEX_IMAGES macro and absorbed the functionality
+#       into ADD_LATEX_DOCUMENT.  The old interface was always kind of
+#       clunky anyway since you had to specify the image directory in both
+#       places.  It also made supporting LATEX_OUTPUT_PATH problematic.
+#
+#       Added support for jpeg files.
+#
+# 1.2.0 Changed the configuration options yet again.  Removed the NO_CONFIGURE
+#       Replaced it with a CONFIGURE option that lists input files for which
+#       configure should be run.
+#
+#       The pdf target no longer depends on the dvi target.  This allows you
+#       to build latex documents that require pdflatex.  Also added an option
+#       to make the pdf target the default one.
+#
+# 1.1.1 Added the NO_CONFIGURE option.  The @ character can be used when
+#       specifying table column separators.  If two or more are used, then
+#       will incorrectly substitute them.
+#
+# 1.1.0 Added ability include multiple bib files.  Added ability to do copy
+#       sub-tex files for multipart tex files.
+#
+# 1.0.0 If both ps and pdf type images exist, just copy the one that
+#       matches the current render mode.  Replaced a bunch of STRING
+#       commands with GET_FILENAME_COMPONENT commands that were made to do
+#       the desired function.
+#
+# 0.4.0 First version posted to CMake Wiki.
+#
+
+#############################################################################
+# Find the location of myself while originally executing.  If you do this
+# inside of a macro, it will recode where the macro was invoked.
+#############################################################################
+set(LATEX_USE_LATEX_LOCATION ${CMAKE_CURRENT_LIST_FILE}
+  CACHE INTERNAL "Location of UseLATEX.cmake file." FORCE
+  )
+
+#############################################################################
+# Generic helper functions
+#############################################################################
+
+FUNCTION(LATEX_LIST_CONTAINS var value)
+  set(input_list ${ARGN})
+  list(FIND input_list "${value}" index)
+  if (index GREATER -1)
+    set(${var} TRUE PARENT_SCOPE)
+  else ()
+    set(${var} PARENT_SCOPE)
+  endif ()
+ENDFUNCTION(LATEX_LIST_CONTAINS)
+
+# Parse function arguments.  Variables containing the results are placed
+# in the global scope for historical reasons.
+FUNCTION(LATEX_PARSE_ARGUMENTS prefix arg_names option_names)
+  set(DEFAULT_ARGS)
+  foreach (arg_name ${arg_names})
+    set(${prefix}_${arg_name} CACHE INTERNAL "${prefix} argument" FORCE)
+  endforeach (arg_name)
+  foreach (option ${option_names})
+    set(${prefix}_${option} CACHE INTERNAL "${prefix} option" FORCE)
+  endforeach (option)
+
+  set(current_arg_name DEFAULT_ARGS)
+  set(current_arg_list)
+  foreach (arg ${ARGN})
+    LATEX_LIST_CONTAINS(is_arg_name ${arg} ${arg_names})
+    LATEX_LIST_CONTAINS(is_option ${arg} ${option_names})
+    if (is_arg_name)
+      set(${prefix}_${current_arg_name} ${current_arg_list}
+        CACHE INTERNAL "${prefix} argument" FORCE)
+      set(current_arg_name ${arg})
+      set(current_arg_list)
+    elseif (is_option)
+      set(${prefix}_${arg} TRUE CACHE INTERNAL "${prefix} option" FORCE)
+    else ()
+      set(current_arg_list ${current_arg_list} ${arg})
+    endif ()
+  endforeach (arg)
+  set(${prefix}_${current_arg_name} ${current_arg_list}
+    CACHE INTERNAL "${prefix} argument" FORCE)
+ENDFUNCTION(LATEX_PARSE_ARGUMENTS)
+
+# Match the contents of a file to a regular expression.
+FUNCTION(LATEX_FILE_MATCH variable filename regexp default)
+  # The FILE STRINGS command would be a bit better, but I'm not totally sure
+  # the match will always be to a whole line, and I don't want to break things.
+  file(READ ${filename} file_contents)
+  string(REGEX MATCHALL "${regexp}"
+    match_result ${file_contents}
+    )
+  if (match_result)
+    set(${variable} "${match_result}" PARENT_SCOPE)
+  else ()
+    set(${variable} "${default}" PARENT_SCOPE)
+  endif ()
+ENDFUNCTION(LATEX_FILE_MATCH)
+
+# A version of GET_FILENAME_COMPONENT that treats extensions after the last
+# period rather than the first.  To the best of my knowledge, all filenames
+# typically used by LaTeX, including image files, have small extensions
+# after the last dot.
+FUNCTION(LATEX_GET_FILENAME_COMPONENT varname filename type)
+  set(result)
+  if ("${type}" STREQUAL "NAME_WE")
+    get_filename_component(name ${filename} NAME)
+    string(REGEX REPLACE "\\.[^.]*\$" "" result "${name}")
+  elseif ("${type}" STREQUAL "EXT")
+    get_filename_component(name ${filename} NAME)
+    string(REGEX MATCH "\\.[^.]*\$" result "${name}")
+  else ()
+    get_filename_component(result ${filename} ${type})
+  endif ()
+  set(${varname} "${result}" PARENT_SCOPE)
+ENDFUNCTION(LATEX_GET_FILENAME_COMPONENT)
+
+#############################################################################
+# Functions that perform processing during a LaTeX build.
+#############################################################################
+FUNCTION(LATEX_MAKEGLOSSARIES)
+  # This is really a bare bones port of the makeglossaries perl script into
+  # CMake scripting.
+  message("**************************** In makeglossaries")
+  if (NOT LATEX_TARGET)
+    message(SEND_ERROR "Need to define LATEX_TARGET")
+  endif ()
+
+  set(aux_file ${LATEX_TARGET}.aux)
+
+  if (NOT EXISTS ${aux_file})
+    message(SEND_ERROR "${aux_file} does not exist.  Run latex on your target file.")
+  endif ()
+
+  LATEX_FILE_MATCH(newglossary_lines ${aux_file}
+    "@newglossary[ \t]*{([^}]*)}{([^}]*)}{([^}]*)}{([^}]*)}"
+    "@newglossary{main}{glg}{gls}{glo}"
+    )
+
+  LATEX_FILE_MATCH(istfile_line ${aux_file}
+    "@istfilename[ \t]*{([^}]*)}"
+    "@istfilename{${LATEX_TARGET}.ist}"
+    )
+  string(REGEX REPLACE "@istfilename[ \t]*{([^}]*)}" "\\1"
+    istfile ${istfile_line}
+    )
+
+  string(REGEX MATCH ".*\\.xdy" use_xindy "${istfile}")
+  if (use_xindy)
+    message("*************** Using xindy")
+    if (NOT XINDY_COMPILER)
+      message(SEND_ERROR "Need to define XINDY_COMPILER")
+    endif ()
+  else ()
+    message("*************** Using makeindex")
+    if (NOT MAKEINDEX_COMPILER)
+      message(SEND_ERROR "Need to define MAKEINDEX_COMPILER")
+    endif ()
+  endif ()
+
+  foreach (newglossary ${newglossary_lines})
+    string(REGEX REPLACE
+      "@newglossary[ \t]*{([^}]*)}{([^}]*)}{([^}]*)}{([^}]*)}"
+      "\\1" glossary_name ${newglossary}
+      )
+    string(REGEX REPLACE
+      "@newglossary[ \t]*{([^}]*)}{([^}]*)}{([^}]*)}{([^}]*)}"
+      "${LATEX_TARGET}.\\2" glossary_log ${newglossary}
+      )
+    string(REGEX REPLACE
+      "@newglossary[ \t]*{([^}]*)}{([^}]*)}{([^}]*)}{([^}]*)}"
+      "${LATEX_TARGET}.\\3" glossary_out ${newglossary}
+      )
+    string(REGEX REPLACE
+      "@newglossary[ \t]*{([^}]*)}{([^}]*)}{([^}]*)}{([^}]*)}"
+      "${LATEX_TARGET}.\\4" glossary_in ${newglossary}
+      )
+
+    if (use_xindy)
+      LATEX_FILE_MATCH(xdylanguage_line ${aux_file}
+        "@xdylanguage[ \t]*{${glossary_name}}{([^}]*)}"
+        "@xdylanguage{${glossary_name}}{english}"
+        )
+      string(REGEX REPLACE
+        "@xdylanguage[ \t]*{${glossary_name}}{([^}]*)}"
+        "\\1"
+        language
+        ${xdylanguage_line}
+        )
+      # What crazy person makes a LaTeX index generater that uses different
+      # identifiers for language than babel (or at least does not support
+      # the old ones)?
+      if (${language} STREQUAL "frenchb")
+        set(language "french")
+      elseif (${language} MATCHES "^n?germanb?$")
+        set(language "german")
+      elseif (${language} STREQUAL "magyar")
+        set(language "hungarian")
+      elseif (${language} STREQUAL "lsorbian")
+        set(language "lower-sorbian")
+      elseif (${language} STREQUAL "norsk")
+        set(language "norwegian")
+      elseif (${language} STREQUAL "portuges")
+        set(language "portuguese")
+      elseif (${language} STREQUAL "russianb")
+        set(language "russian")
+      elseif (${language} STREQUAL "slovene")
+        set(language "slovenian")
+      elseif (${language} STREQUAL "ukraineb")
+        set(language "ukrainian")
+      elseif (${language} STREQUAL "usorbian")
+        set(language "upper-sorbian")
+      endif ()
+      if (language)
+        set(language_flags "-L ${language}")
+      else ()
+        set(language_flags "")
+      endif ()
+
+      LATEX_FILE_MATCH(codepage_line ${aux_file}
+        "@gls@codepage[ \t]*{${glossary_name}}{([^}]*)}"
+        "@gls@codepage{${glossary_name}}{utf}"
+        )
+      string(REGEX REPLACE
+        "@gls@codepage[ \t]*{${glossary_name}}{([^}]*)}"
+        "\\1"
+        codepage
+        ${codepage_line}
+        )
+      if (codepage)
+        set(codepage_flags "-C ${codepage}")
+      else ()
+        # Ideally, we would check that the language is compatible with the
+        # default codepage, but I'm hoping that distributions will be smart
+        # enough to specify their own codepage.  I know, it's asking a lot.
+        set(codepage_flags "")
+      endif ()
+
+      message("${XINDY_COMPILER} ${MAKEGLOSSARIES_COMPILER_FLAGS} ${language_flags} ${codepage_flags} -I xindy -M ${glossary_name} -t ${glossary_log} -o ${glossary_out} ${glossary_in}"
+        )
+      exec_program(${XINDY_COMPILER}
+        ARGS ${MAKEGLOSSARIES_COMPILER_FLAGS}
+          ${language_flags}
+          ${codepage_flags}
+          -I xindy
+          -M ${glossary_name}
+          -t ${glossary_log}
+          -o ${glossary_out}
+          ${glossary_in}
+        OUTPUT_VARIABLE xindy_output
+        )
+      message("${xindy_output}")
+
+      # So, it is possible (perhaps common?) for aux files to specify a
+      # language and codepage that are incompatible with each other.  Check
+      # for that condition, and if it happens run again with the default
+      # codepage.
+      if ("${xindy_output}" MATCHES "^Cannot locate xindy module for language (.+) in codepage (.+)\\.$")
+        message("*************** Retrying xindy with default codepage.")
+        exec_program(${XINDY_COMPILER}
+          ARGS ${MAKEGLOSSARIES_COMPILER_FLAGS}
+            ${language_flags}
+            -I xindy
+            -M ${glossary_name}
+            -t ${glossary_log}
+            -o ${glossary_out}
+            ${glossary_in}
+          )
+      endif ()
+      #ENDIF ("${xindy_output}" MATCHES "Cannot locate xindy module for language (.+) in codepage (.+)\\.")
+
+    else ()
+      message("${MAKEINDEX_COMPILER} ${MAKEGLOSSARIES_COMPILER_FLAGS} -s ${istfile} -t ${glossary_log} -o ${glossary_out} ${glossary_in}")
+      exec_program(${MAKEINDEX_COMPILER} ARGS ${MAKEGLOSSARIES_COMPILER_FLAGS}
+        -s ${istfile} -t ${glossary_log} -o ${glossary_out} ${glossary_in}
+        )
+    endif ()
+
+  endforeach (newglossary)
+ENDFUNCTION(LATEX_MAKEGLOSSARIES)
+
+FUNCTION(LATEX_MAKENOMENCLATURE)
+  message("**************************** In makenomenclature")
+  if (NOT LATEX_TARGET)
+    message(SEND_ERROR "Need to define LATEX_TARGET")
+  endif ()
+
+  if (NOT MAKEINDEX_COMPILER)
+    message(SEND_ERROR "Need to define MAKEINDEX_COMPILER")
+  endif ()
+
+  set(nomencl_out ${LATEX_TARGET}.nls)
+  set(nomencl_in ${LATEX_TARGET}.nlo)
+
+  exec_program(${MAKEINDEX_COMPILER} ARGS ${MAKENOMENCLATURE_COMPILER_FLAGS}
+    ${nomencl_in} -s "nomencl.ist" -o ${nomencl_out}
+    )
+ENDFUNCTION(LATEX_MAKENOMENCLATURE)
+
+FUNCTION(LATEX_CORRECT_SYNCTEX)
+  message("**************************** In correct SyncTeX")
+  if (NOT LATEX_TARGET)
+    message(SEND_ERROR "Need to define LATEX_TARGET")
+  endif ()
+
+  if (NOT GZIP)
+    message(SEND_ERROR "Need to define GZIP")
+  endif ()
+
+  if (NOT LATEX_SOURCE_DIRECTORY)
+    message(SEND_ERROR "Need to define LATEX_SOURCE_DIRECTORY")
+  endif ()
+
+  if (NOT LATEX_BINARY_DIRECTORY)
+    message(SEND_ERROR "Need to define LATEX_BINARY_DIRECTORY")
+  endif ()
+
+  set(synctex_file ${LATEX_BINARY_DIRECTORY}/${LATEX_TARGET}.synctex)
+  set(synctex_file_gz ${synctex_file}.gz)
+
+  if (EXISTS ${synctex_file_gz})
+
+    message("Making backup of synctex file.")
+    configure_file(${synctex_file_gz} ${synctex_file}.bak.gz COPYONLY)
+
+    message("Uncompressing synctex file.")
+    exec_program(${GZIP}
+      ARGS --decompress ${synctex_file_gz}
+      )
+
+    message("Reading synctex file.")
+    file(READ ${synctex_file} synctex_data)
+
+    message("Replacing relative with absolute paths.")
+    string(REGEX REPLACE
+      "(Input:[0-9]+:)([^/\n][^\n]*)"
+      "\\1${LATEX_SOURCE_DIRECTORY}/\\2"
+      synctex_data
+      "${synctex_data}"
+      )
+
+    message("Writing synctex file.")
+    file(WRITE ${synctex_file} "${synctex_data}")
+
+    message("Compressing synctex file.")
+    exec_program(${GZIP}
+      ARGS ${synctex_file}
+      )
+
+  else ()
+
+    message(SEND_ERROR "File ${synctex_file_gz} not found.  Perhaps synctex is not supported by your LaTeX compiler.")
+
+  endif ()
+
+ENDFUNCTION(LATEX_CORRECT_SYNCTEX)
+
+#############################################################################
+# Helper functions for establishing LaTeX build.
+#############################################################################
+
+FUNCTION(LATEX_NEEDIT VAR NAME)
+  if (NOT ${VAR})
+    message(SEND_ERROR "I need the ${NAME} command.")
+  endif ()
+ENDFUNCTION(LATEX_NEEDIT)
+
+FUNCTION(LATEX_WANTIT VAR NAME)
+  if (NOT ${VAR})
+    message(STATUS "I could not find the ${NAME} command.")
+  endif ()
+ENDFUNCTION(LATEX_WANTIT)
+
+FUNCTION(LATEX_SETUP_VARIABLES)
+  set(LATEX_OUTPUT_PATH "${LATEX_OUTPUT_PATH}"
+    CACHE PATH "If non empty, specifies the location to place LaTeX output."
+    )
+
+  find_package(LATEX)
+
+  find_program(XINDY_COMPILER
+    NAME xindy
+    PATHS ${MIKTEX_BINARY_PATH} /usr/bin
+    )
+
+  find_package(UnixCommands)
+
+  find_program(PDFTOPS_CONVERTER
+    NAMES pdftops
+    DOC "The pdf to ps converter program from the Poppler package."
+    )
+
+  MARK_AS_ADVANCED(CLEAR
+    LATEX_COMPILER
+    PDFLATEX_COMPILER
+    BIBTEX_COMPILER
+    MAKEINDEX_COMPILER
+    XINDY_COMPILER
+    DVIPS_CONVERTER
+    PS2PDF_CONVERTER
+    PDFTOPS_CONVERTER
+    LATEX2HTML_CONVERTER
+    )
+
+  LATEX_NEEDIT(LATEX_COMPILER latex)
+  LATEX_WANTIT(PDFLATEX_COMPILER pdflatex)
+  LATEX_NEEDIT(BIBTEX_COMPILER bibtex)
+  LATEX_NEEDIT(MAKEINDEX_COMPILER makeindex)
+  LATEX_WANTIT(DVIPS_CONVERTER dvips)
+  LATEX_WANTIT(PS2PDF_CONVERTER ps2pdf)
+  LATEX_WANTIT(PDFTOPS_CONVERTER pdftops)
+  # MiKTeX calls latex2html htlatex
+  if (NOT ${LATEX2HTML_CONVERTER})
+    find_program(HTLATEX_CONVERTER
+      NAMES htlatex
+      PATHS ${MIKTEX_BINARY_PATH}
+            /usr/bin
+    )
+    if (HTLATEX_CONVERTER)
+      set(USING_HTLATEX TRUE CACHE INTERNAL "True when using MiKTeX htlatex instead of latex2html" FORCE)
+      set(LATEX2HTML_CONVERTER ${HTLATEX_CONVERTER}
+        CACHE FILEPATH "htlatex taking the place of latex2html" FORCE)
+    else ()
+      set(USING_HTLATEX FALSE CACHE INTERNAL "True when using MiKTeX htlatex instead of latex2html" FORCE)
+    endif ()
+  endif ()
+  LATEX_WANTIT(LATEX2HTML_CONVERTER latex2html)
+
+  set(LATEX_COMPILER_FLAGS "-interaction=nonstopmode"
+    CACHE STRING "Flags passed to latex.")
+  set(PDFLATEX_COMPILER_FLAGS ${LATEX_COMPILER_FLAGS}
+    CACHE STRING "Flags passed to pdflatex.")
+  set(LATEX_SYNCTEX_FLAGS "-synctex=1"
+    CACHE STRING "latex/pdflatex flags used to create synctex file.")
+  set(BIBTEX_COMPILER_FLAGS ""
+    CACHE STRING "Flags passed to bibtex.")
+  set(MAKEINDEX_COMPILER_FLAGS ""
+    CACHE STRING "Flags passed to makeindex.")
+  set(MAKEGLOSSARIES_COMPILER_FLAGS ""
+    CACHE STRING "Flags passed to makeglossaries.")
+  set(MAKENOMENCLATURE_COMPILER_FLAGS ""
+    CACHE STRING "Flags passed to makenomenclature.")
+  set(DVIPS_CONVERTER_FLAGS "-Ppdf -G0 -t letter"
+    CACHE STRING "Flags passed to dvips.")
+  set(PS2PDF_CONVERTER_FLAGS "-dMaxSubsetPct=100 -dCompatibilityLevel=1.3 -dSubsetFonts=true -dEmbedAllFonts=true -dAutoFilterColorImages=false -dAutoFilterGrayImages=false -dColorImageFilter=/FlateEncode -dGrayImageFilter=/FlateEncode -dMonoImageFilter=/FlateEncode"
+    CACHE STRING "Flags passed to ps2pdf.")
+  set(PDFTOPS_CONVERTER_FLAGS -r 600
+    CACHE STRING "Flags passed to pdftops.")
+  set(LATEX2HTML_CONVERTER_FLAGS ""
+    CACHE STRING "Flags passed to latex2html.")
+  MARK_AS_ADVANCED(
+    LATEX_COMPILER_FLAGS
+    PDFLATEX_COMPILER_FLAGS
+    LATEX_SYNCTEX_FLAGS
+    BIBTEX_COMPILER_FLAGS
+    MAKEINDEX_COMPILER_FLAGS
+    MAKEGLOSSARIES_COMPILER_FLAGS
+    MAKENOMENCLATURE_COMPILER_FLAGS
+    DVIPS_CONVERTER_FLAGS
+    PS2PDF_CONVERTER_FLAGS
+    PDFTOPS_CONVERTER_FLAGS
+    LATEX2HTML_CONVERTER_FLAGS
+    )
+  separate_arguments(LATEX_COMPILER_FLAGS)
+  separate_arguments(PDFLATEX_COMPILER_FLAGS)
+  separate_arguments(LATEX_SYNCTEX_FLAGS)
+  separate_arguments(BIBTEX_COMPILER_FLAGS)
+  separate_arguments(MAKEINDEX_COMPILER_FLAGS)
+  separate_arguments(MAKEGLOSSARIES_COMPILER_FLAGS)
+  separate_arguments(MAKENOMENCLATURE_COMPILER_FLAGS)
+  separate_arguments(DVIPS_CONVERTER_FLAGS)
+  separate_arguments(PS2PDF_CONVERTER_FLAGS)
+  separate_arguments(PDFTOPS_CONVERTER_FLAGS)
+  separate_arguments(LATEX2HTML_CONVERTER_FLAGS)
+
+  find_program(IMAGEMAGICK_CONVERT convert
+    DOC "The convert program that comes with ImageMagick (available at http://www.imagemagick.org)."
+    )
+
+  option(LATEX_USE_SYNCTEX
+    "If on, have LaTeX generate a synctex file, which WYSIWYG editors can use to correlate output files like dvi and pdf with the lines of LaTeX source that generates them.  In addition to adding the LATEX_SYNCTEX_FLAGS to the command line, this option also adds build commands that \"corrects\" the resulting synctex file to point to the original LaTeX files rather than those generated by UseLATEX.cmake."
+    OFF
+    )
+
+  option(LATEX_SMALL_IMAGES
+    "If on, the raster images will be converted to 1/6 the original size.  This is because papers usually require 600 dpi images whereas most monitors only require at most 96 dpi.  Thus, smaller images make smaller files for web distributation and can make it faster to read dvi files."
+    OFF)
+  if (LATEX_SMALL_IMAGES)
+    set(LATEX_RASTER_SCALE 16 PARENT_SCOPE)
+    set(LATEX_OPPOSITE_RASTER_SCALE 100 PARENT_SCOPE)
+  else ()
+    set(LATEX_RASTER_SCALE 100 PARENT_SCOPE)
+    set(LATEX_OPPOSITE_RASTER_SCALE 16 PARENT_SCOPE)
+  endif ()
+
+  # Just holds extensions for known image types.  They should all be lower case.
+  # For historical reasons, these are all declared in the global scope.
+  set(LATEX_DVI_VECTOR_IMAGE_EXTENSIONS .eps CACHE INTERNAL "")
+  set(LATEX_DVI_RASTER_IMAGE_EXTENSIONS CACHE INTERNAL "")
+  set(LATEX_DVI_IMAGE_EXTENSIONS
+    ${LATEX_DVI_VECTOR_IMAGE_EXTENSIONS}
+    ${LATEX_DVI_RASTER_IMAGE_EXTENSIONS}
+    CACHE INTERNAL ""
+    )
+
+  set(LATEX_PDF_VECTOR_IMAGE_EXTENSIONS .pdf CACHE INTERNAL "")
+  set(LATEX_PDF_RASTER_IMAGE_EXTENSIONS .png .jpeg .jpg CACHE INTERNAL "")
+  set(LATEX_PDF_IMAGE_EXTENSIONS
+    ${LATEX_PDF_VECTOR_IMAGE_EXTENSIONS}
+    ${LATEX_PDF_RASTER_IMAGE_EXTENSIONS}
+    CACHE INTERNAL ""
+    )
+
+  set(LATEX_OTHER_VECTOR_IMAGE_EXTENSIONS .svg CACHE INTERNAL "")
+  set(LATEX_OTHER_RASTER_IMAGE_EXTENSIONS .tif .tiff .gif CACHE INTERNAL "")
+  set(LATEX_OTHER_IMAGE_EXTENSIONS
+    ${LATEX_OTHER_VECTOR_IMAGE_EXTENSIONS}
+    ${LATEX_OTHER_RASTER_IMAGE_EXTENSIONS}
+    CACHE INTERNAL ""
+    )
+
+  set(LATEX_VECTOR_IMAGE_EXTENSIONS
+    ${LATEX_DVI_VECTOR_IMAGE_EXTENSIONS}
+    ${LATEX_PDF_VECTOR_IMAGE_EXTENSIONS}
+    ${LATEX_OTHER_VECTOR_IMAGE_EXTENSIONS}
+    CACHE INTERNAL ""
+    )
+  set(LATEX_RASTER_IMAGE_EXTENSIONS
+    ${LATEX_DVI_RASTER_IMAGE_EXTENSIONS}
+    ${LATEX_PDF_RASTER_IMAGE_EXTENSIONS}
+    ${LATEX_OTHER_RASTER_IMAGE_EXTENSIONS}
+    CACHE INTERNAL ""
+    )
+  set(LATEX_IMAGE_EXTENSIONS
+    ${LATEX_DVI_IMAGE_EXTENSIONS}
+    ${LATEX_PDF_IMAGE_EXTENSIONS}
+    ${LATEX_OTHER_IMAGE_EXTENSIONS}
+    CACHE INTERNAL ""
+    )
+ENDFUNCTION(LATEX_SETUP_VARIABLES)
+
+FUNCTION(LATEX_GET_OUTPUT_PATH var)
+  set(latex_output_path)
+  if (LATEX_OUTPUT_PATH)
+    get_filename_component(
+      LATEX_OUTPUT_PATH_FULL "${LATEX_OUTPUT_PATH}" ABSOLUTE
+      )
+    if ("${LATEX_OUTPUT_PATH_FULL}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
+      message(SEND_ERROR "You cannot set LATEX_OUTPUT_PATH to the same directory that contains LaTeX input files.")
+    else ()
+      set(latex_output_path "${LATEX_OUTPUT_PATH_FULL}")
+    endif ()
+  else ()
+    if ("${CMAKE_CURRENT_BINARY_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
+      message(SEND_ERROR "LaTeX files must be built out of source or you must set LATEX_OUTPUT_PATH.")
+    else ()
+      set(latex_output_path "${CMAKE_CURRENT_BINARY_DIR}")
+    endif ()
+  endif ()
+  set(${var} ${latex_output_path} PARENT_SCOPE)
+ENDFUNCTION(LATEX_GET_OUTPUT_PATH)
+
+FUNCTION(LATEX_ADD_CONVERT_COMMAND
+    output_path
+    input_path
+    output_extension
+    input_extension
+    flags
+    )
+  SET (require_imagemagick_convert TRUE)
+  SET (convert_flags "")
+  if (${input_extension} STREQUAL ".eps" AND ${output_extension} STREQUAL ".pdf")
+    # ImageMagick has broken eps to pdf conversion
+    # use ps2pdf instead
+    if (PS2PDF_CONVERTER)
+      SET (require_imagemagick_convert FALSE)
+      SET (converter ${PS2PDF_CONVERTER})
+      SET (convert_flags -dEPSCrop ${PS2PDF_CONVERTER_FLAGS})
+    else ()
+      message(SEND_ERROR "Using postscript files with pdflatex requires ps2pdf for conversion.")
+    endif ()
+  elseif (${input_extension} STREQUAL ".pdf" AND ${output_extension} STREQUAL ".eps")
+    # ImageMagick can also be sketchy on pdf to eps conversion.  Not good with
+    # color spaces and tends to unnecessarily rasterize.
+    # use pdftops instead
+    if (PDFTOPS_CONVERTER)
+      SET (require_imagemagick_convert FALSE)
+      set(converter ${PDFTOPS_CONVERTER})
+      set(convert_flags -eps ${PDFTOPS_CONVERTER_FLAGS})
+    else ()
+      message(STATUS "Consider getting pdftops from Poppler to convert PDF images to EPS images.")
+      SET (convert_flags ${flags})
+    endif ()
+  else ()
+    SET (convert_flags ${flags})
+  endif ()
+
+  if (require_imagemagick_convert)
+    if (IMAGEMAGICK_CONVERT)
+      if (${IMAGEMAGICK_CONVERT} MATCHES "system32[/\\\\]convert\\.exe")
+        message(SEND_ERROR "IMAGEMAGICK_CONVERT set to Window's convert.exe for changing file systems rather than ImageMagick's convert for changing image formats.  Please make sure ImageMagick is installed (available at http://www.imagemagick.org) and it's convert program is used for IMAGEMAGICK_CONVERT.  (It is helpful if ImageMagick's path is before the Windows system paths.)")
+      else ()
+        SET (converter ${IMAGEMAGICK_CONVERT})
+      endif ()
+    else ()
+      message(SEND_ERROR "Could not find convert program. Please download ImageMagick from http://www.imagemagick.org and install.")
+    endif ()
+  endif ()
+
+  ADD_CUSTOM_COMMAND(OUTPUT ${output_path}
+    COMMAND ${converter}
+      ARGS ${convert_flags} ${input_path} ${output_path}
+    DEPENDS ${input_path}
+    )
+ENDFUNCTION(LATEX_ADD_CONVERT_COMMAND)
+
+# Makes custom commands to convert a file to a particular type.
+FUNCTION(LATEX_CONVERT_IMAGE
+    output_files_var
+    input_file
+    output_extension
+    convert_flags
+    output_extensions
+    other_files
+    )
+  set(output_file_list)
+  set(input_dir ${CMAKE_CURRENT_SOURCE_DIR})
+  LATEX_GET_OUTPUT_PATH(output_dir)
+
+  LATEX_GET_FILENAME_COMPONENT(extension "${input_file}" EXT)
+
+  # Check input filename for potential problems with LaTeX.
+  LATEX_GET_FILENAME_COMPONENT(name "${input_file}" NAME_WE)
+  if (name MATCHES ".*\\..*")
+    string(REPLACE "." "-" suggested_name "${name}")
+    set(suggested_name "${suggested_name}${extension}")
+    message(WARNING "Some LaTeX distributions have problems with image file names with multiple extensions.  Consider changing ${name}${extension} to something like ${suggested_name}.")
+  endif ()
+
+  string(REGEX REPLACE "\\.[^.]*\$" ${output_extension} output_file
+    "${input_file}")
+
+  LATEX_LIST_CONTAINS(is_type ${extension} ${output_extensions})
+  if (is_type)
+    if (convert_flags)
+      LATEX_ADD_CONVERT_COMMAND(${output_dir}/${output_file}
+        ${input_dir}/${input_file} ${output_extension} ${extension}
+        "${convert_flags}")
+      set(output_file_list ${output_file_list} ${output_dir}/${output_file})
+    else ()
+      # As a shortcut, we can just copy the file.
+      ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${input_file}
+        COMMAND ${CMAKE_COMMAND}
+        ARGS -E copy ${input_dir}/${input_file} ${output_dir}/${input_file}
+        DEPENDS ${input_dir}/${input_file}
+        )
+      set(output_file_list ${output_file_list} ${output_dir}/${input_file})
+    endif ()
+  else ()
+    set(do_convert TRUE)
+    # Check to see if there is another input file of the appropriate type.
+    foreach (valid_extension ${output_extensions})
+      string(REGEX REPLACE "\\.[^.]*\$" ${output_extension} try_file
+        "${input_file}")
+      LATEX_LIST_CONTAINS(has_native_file "${try_file}" ${other_files})
+      if (has_native_file)
+        set(do_convert FALSE)
+      endif ()
+    endforeach (valid_extension)
+
+    # If we still need to convert, do it.
+    if (do_convert)
+      LATEX_ADD_CONVERT_COMMAND(${output_dir}/${output_file}
+        ${input_dir}/${input_file} ${output_extension} ${extension}
+        "${convert_flags}")
+      set(output_file_list ${output_file_list} ${output_dir}/${output_file})
+    endif ()
+  endif ()
+
+  set(${output_files_var} ${output_file_list} PARENT_SCOPE)
+ENDFUNCTION(LATEX_CONVERT_IMAGE)
+
+# Adds custom commands to process the given files for dvi and pdf builds.
+# Adds the output files to the given variables (does not replace).
+FUNCTION(LATEX_PROCESS_IMAGES dvi_outputs_var pdf_outputs_var)
+  LATEX_GET_OUTPUT_PATH(output_dir)
+  set(dvi_outputs)
+  set(pdf_outputs)
+  foreach (file ${ARGN})
+    if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}")
+      LATEX_GET_FILENAME_COMPONENT(extension "${file}" EXT)
+      set(convert_flags)
+
+      # Check to see if we need to downsample the image.
+      LATEX_LIST_CONTAINS(is_raster "${extension}"
+        ${LATEX_RASTER_IMAGE_EXTENSIONS})
+      if (LATEX_SMALL_IMAGES)
+        if (is_raster)
+          set(convert_flags -resize ${LATEX_RASTER_SCALE}%)
+        endif ()
+      endif ()
+
+      # Make sure the output directory exists.
+      LATEX_GET_FILENAME_COMPONENT(path "${output_dir}/${file}" PATH)
+      MAKE_DIRECTORY("${path}")
+
+      # Do conversions for dvi.
+      LATEX_CONVERT_IMAGE(output_files "${file}" .eps "${convert_flags}"
+        "${LATEX_DVI_IMAGE_EXTENSIONS}" "${ARGN}")
+      set(dvi_outputs ${dvi_outputs} ${output_files})
+
+      # Do conversions for pdf.
+      if (is_raster)
+        LATEX_CONVERT_IMAGE(output_files "${file}" .png "${convert_flags}"
+          "${LATEX_PDF_IMAGE_EXTENSIONS}" "${ARGN}")
+        set(pdf_outputs ${pdf_outputs} ${output_files})
+      else ()
+        LATEX_CONVERT_IMAGE(output_files "${file}" .pdf "${convert_flags}"
+          "${LATEX_PDF_IMAGE_EXTENSIONS}" "${ARGN}")
+        set(pdf_outputs ${pdf_outputs} ${output_files})
+      endif ()
+    else ()
+      message(WARNING "Could not find file ${CMAKE_CURRENT_SOURCE_DIR}/${file}.  Are you sure you gave relative paths to IMAGES?")
+    endif ()
+  endforeach (file)
+
+  set(${dvi_outputs_var} ${dvi_outputs} PARENT_SCOPE)
+  set(${pdf_outputs_var} ${pdf_outputs} PARENT_SCOPE)
+ENDFUNCTION(LATEX_PROCESS_IMAGES)
+
+FUNCTION(ADD_LATEX_IMAGES)
+  message(SEND_ERROR "The ADD_LATEX_IMAGES function is deprecated.  Image directories are specified with LATEX_ADD_DOCUMENT.")
+ENDFUNCTION(ADD_LATEX_IMAGES)
+
+FUNCTION(LATEX_COPY_GLOBBED_FILES pattern dest)
+  file(GLOB file_list ${pattern})
+  foreach (in_file ${file_list})
+    LATEX_GET_FILENAME_COMPONENT(out_file ${in_file} NAME)
+    configure_file(${in_file} ${dest}/${out_file} COPYONLY)
+  endforeach (in_file)
+ENDFUNCTION(LATEX_COPY_GLOBBED_FILES)
+
+FUNCTION(LATEX_COPY_INPUT_FILE file)
+  LATEX_GET_OUTPUT_PATH(output_dir)
+
+  if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file})
+    LATEX_GET_FILENAME_COMPONENT(path ${file} PATH)
+    file(MAKE_DIRECTORY ${output_dir}/${path})
+
+    LATEX_LIST_CONTAINS(use_config ${file} ${LATEX_CONFIGURE})
+    if (use_config)
+      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${file}
+        ${output_dir}/${file}
+        @ONLY
+        )
+      ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${file}
+        COMMAND ${CMAKE_COMMAND}
+        ARGS ${CMAKE_BINARY_DIR}
+        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${file}
+        )
+    else ()
+      ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${file}
+        COMMAND ${CMAKE_COMMAND}
+        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file} ${output_dir}/${file}
+        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${file}
+        )
+    endif ()
+  else ()
+    if (EXISTS ${output_dir}/${file})
+      # Special case: output exists but input does not.  Assume that it was
+      # created elsewhere and skip the input file copy.
+    else ()
+      message("Could not find input file ${CMAKE_CURRENT_SOURCE_DIR}/${file}")
+    endif ()
+  endif ()
+ENDFUNCTION(LATEX_COPY_INPUT_FILE)
+
+#############################################################################
+# Commands provided by the UseLATEX.cmake "package"
+#############################################################################
+
+FUNCTION(LATEX_USAGE command message)
+  message(SEND_ERROR
+    "${message}\nUsage: ${command}(<tex_file>\n           [BIBFILES <bib_file> <bib_file> ...]\n           [INPUTS <tex_file> <tex_file> ...]\n           [IMAGE_DIRS <directory1> <directory2> ...]\n           [IMAGES <image_file1> <image_file2>\n           [CONFIGURE <tex_file> <tex_file> ...]\n           [DEPENDS <tex_file> <tex_file> ...]\n           [MULTIBIB_NEWCITES] <suffix_list>\n           [USE_INDEX] [USE_GLOSSARY] [USE_NOMENCL]\n           [DEFAULT_PDF] [DEFAULT_SAFEPDF] [DEFAULT_PS] [NO_DEFAULT]\n           [MANGLE_TARGET_NAMES])"
+    )
+ENDFUNCTION(LATEX_USAGE command message)
+
+# Parses arguments to ADD_LATEX_DOCUMENT and ADD_LATEX_TARGETS and sets the
+# variables LATEX_TARGET, LATEX_IMAGE_DIR, LATEX_BIBFILES, LATEX_DEPENDS, and
+# LATEX_INPUTS.
+FUNCTION(PARSE_ADD_LATEX_ARGUMENTS command)
+  LATEX_PARSE_ARGUMENTS(
+    LATEX
+    "BIBFILES;MULTIBIB_NEWCITES;INPUTS;IMAGE_DIRS;IMAGES;CONFIGURE;DEPENDS"
+    "USE_INDEX;USE_GLOSSARY;USE_GLOSSARIES;USE_NOMENCL;DEFAULT_PDF;DEFAULT_SAFEPDF;DEFAULT_PS;NO_DEFAULT;MANGLE_TARGET_NAMES"
+    ${ARGN}
+    )
+
+  # The first argument is the target latex file.
+  if (LATEX_DEFAULT_ARGS)
+    list(GET LATEX_DEFAULT_ARGS 0 latex_main_input)
+    list(REMOVE_AT LATEX_DEFAULT_ARGS 0)
+    LATEX_GET_FILENAME_COMPONENT(latex_target ${latex_main_input} NAME_WE)
+    set(LATEX_MAIN_INPUT ${latex_main_input} CACHE INTERNAL "" FORCE)
+    set(LATEX_TARGET ${latex_target} CACHE INTERNAL "" FORCE)
+  else ()
+    LATEX_USAGE(${command} "No tex file target given to ${command}.")
+  endif ()
+
+  if (LATEX_DEFAULT_ARGS)
+    LATEX_USAGE(${command} "Invalid or depricated arguments: ${LATEX_DEFAULT_ARGS}")
+  endif ()
+
+  # Backward compatibility between 1.6.0 and 1.6.1.
+  if (LATEX_USE_GLOSSARIES)
+    set(LATEX_USE_GLOSSARY TRUE CACHE INTERNAL "" FORCE)
+  endif ()
+ENDFUNCTION(PARSE_ADD_LATEX_ARGUMENTS)
+
+FUNCTION(ADD_LATEX_TARGETS_INTERNAL)
+  if (LATEX_USE_SYNCTEX)
+    set(synctex_flags ${LATEX_SYNCTEX_FLAGS})
+  else ()
+    set(synctex_flags)
+  endif ()
+
+  # The commands to run LaTeX.  They are repeated multiple times.
+  set(latex_build_command
+    ${LATEX_COMPILER} ${LATEX_COMPILER_FLAGS} ${synctex_flags} ${LATEX_MAIN_INPUT}
+    )
+  set(pdflatex_build_command
+    ${PDFLATEX_COMPILER} ${PDFLATEX_COMPILER_FLAGS} ${synctex_flags} ${LATEX_MAIN_INPUT}
+    )
+
+  # Set up target names.
+  if (LATEX_MANGLE_TARGET_NAMES)
+    set(dvi_target      ${LATEX_TARGET}_dvi)
+    set(pdf_target      ${LATEX_TARGET}_pdf)
+    set(ps_target       ${LATEX_TARGET}_ps)
+    set(safepdf_target  ${LATEX_TARGET}_safepdf)
+    set(html_target     ${LATEX_TARGET}_html)
+    set(auxclean_target ${LATEX_TARGET}_auxclean)
+  else ()
+    set(dvi_target      dvi)
+    set(pdf_target      pdf)
+    set(ps_target       ps)
+    set(safepdf_target  safepdf)
+    set(html_target     html)
+    set(auxclean_target auxclean)
+  endif ()
+
+  # Probably not all of these will be generated, but they could be.
+  # Note that the aux file is added later.
+  set(auxiliary_clean_files
+    ${output_dir}/${LATEX_TARGET}.aux
+    ${output_dir}/${LATEX_TARGET}.bbl
+    ${output_dir}/${LATEX_TARGET}.blg
+    ${output_dir}/${LATEX_TARGET}-blx.bib
+    ${output_dir}/${LATEX_TARGET}.glg
+    ${output_dir}/${LATEX_TARGET}.glo
+    ${output_dir}/${LATEX_TARGET}.gls
+    ${output_dir}/${LATEX_TARGET}.idx
+    ${output_dir}/${LATEX_TARGET}.ilg
+    ${output_dir}/${LATEX_TARGET}.ind
+    ${output_dir}/${LATEX_TARGET}.ist
+    ${output_dir}/${LATEX_TARGET}.log
+    ${output_dir}/${LATEX_TARGET}.out
+    ${output_dir}/${LATEX_TARGET}.toc
+    ${output_dir}/${LATEX_TARGET}.lof
+    ${output_dir}/${LATEX_TARGET}.xdy
+    ${output_dir}/${LATEX_TARGET}.synctex.gz
+    ${output_dir}/${LATEX_TARGET}.synctex.bak.gz
+    ${output_dir}/${LATEX_TARGET}.dvi
+    ${output_dir}/${LATEX_TARGET}.ps
+    ${output_dir}/${LATEX_TARGET}.pdf
+    )
+
+  set(image_list ${LATEX_IMAGES})
+
+  # For each directory in LATEX_IMAGE_DIRS, glob all the image files and
+  # place them in LATEX_IMAGES.
+  foreach (dir ${LATEX_IMAGE_DIRS})
+    if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${dir})
+      message(WARNING "Image directory ${CMAKE_CURRENT_SOURCE_DIR}/${dir} does not exist.  Are you sure you gave relative directories to IMAGE_DIRS?")
+    endif ()
+    foreach (extension ${LATEX_IMAGE_EXTENSIONS})
+      file(GLOB files ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/*${extension})
+      foreach (file ${files})
+        LATEX_GET_FILENAME_COMPONENT(filename ${file} NAME)
+        set(image_list ${image_list} ${dir}/${filename})
+      endforeach (file)
+    endforeach (extension)
+  endforeach (dir)
+
+  LATEX_PROCESS_IMAGES(dvi_images pdf_images ${image_list})
+
+  set(make_dvi_command
+    ${CMAKE_COMMAND} -E chdir ${output_dir}
+    ${latex_build_command})
+  set(make_pdf_command
+    ${CMAKE_COMMAND} -E chdir ${output_dir}
+    ${pdflatex_build_command}
+    )
+
+  set(make_dvi_depends ${LATEX_DEPENDS} ${dvi_images})
+  set(make_pdf_depends ${LATEX_DEPENDS} ${pdf_images})
+  foreach (input ${LATEX_MAIN_INPUT} ${LATEX_INPUTS})
+    set(make_dvi_depends ${make_dvi_depends} ${output_dir}/${input})
+    set(make_pdf_depends ${make_pdf_depends} ${output_dir}/${input})
+    if (${input} MATCHES "\\.tex$")
+      # Dependent .tex files might have their own .aux files created.  Make
+      # sure these get cleaned as well.  This might replicate the cleaning
+      # of the main .aux file, which is OK.
+      string(REGEX REPLACE "\\.tex$" "" input_we ${input})
+      set(auxiliary_clean_files ${auxiliary_clean_files}
+        ${output_dir}/${input_we}.aux
+        ${output_dir}/${input}.aux
+        )
+    endif ()
+  endforeach (input)
+
+  if (LATEX_USE_GLOSSARY)
+    foreach (dummy 0 1)   # Repeat these commands twice.
+      set(make_dvi_command ${make_dvi_command}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${CMAKE_COMMAND}
+        -D LATEX_BUILD_COMMAND=makeglossaries
+        -D LATEX_TARGET=${LATEX_TARGET}
+        -D MAKEINDEX_COMPILER=${MAKEINDEX_COMPILER}
+        -D XINDY_COMPILER=${XINDY_COMPILER}
+        -D MAKEGLOSSARIES_COMPILER_FLAGS=${MAKEGLOSSARIES_COMPILER_FLAGS}
+        -P ${LATEX_USE_LATEX_LOCATION}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${latex_build_command}
+        )
+      set(make_pdf_command ${make_pdf_command}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${CMAKE_COMMAND}
+        -D LATEX_BUILD_COMMAND=makeglossaries
+        -D LATEX_TARGET=${LATEX_TARGET}
+        -D MAKEINDEX_COMPILER=${MAKEINDEX_COMPILER}
+        -D XINDY_COMPILER=${XINDY_COMPILER}
+        -D MAKEGLOSSARIES_COMPILER_FLAGS=${MAKEGLOSSARIES_COMPILER_FLAGS}
+        -P ${LATEX_USE_LATEX_LOCATION}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${pdflatex_build_command}
+        )
+    endforeach (dummy)
+  endif ()
+
+  if (LATEX_USE_NOMENCL)
+    foreach (dummy 0 1)   # Repeat these commands twice.
+      set(make_dvi_command ${make_dvi_command}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${CMAKE_COMMAND}
+        -D LATEX_BUILD_COMMAND=makenomenclature
+        -D LATEX_TARGET=${LATEX_TARGET}
+        -D MAKEINDEX_COMPILER=${MAKEINDEX_COMPILER}
+        -D MAKENOMENCLATURE_COMPILER_FLAGS=${MAKENOMENCLATURE_COMPILER_FLAGS}
+        -P ${LATEX_USE_LATEX_LOCATION}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${latex_build_command}
+        )
+      set(make_pdf_command ${make_pdf_command}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${CMAKE_COMMAND}
+        -D LATEX_BUILD_COMMAND=makenomenclature
+        -D LATEX_TARGET=${LATEX_TARGET}
+        -D MAKEINDEX_COMPILER=${MAKEINDEX_COMPILER}
+        -D MAKENOMENCLATURE_COMPILER_FLAGS=${MAKENOMENCLATURE_COMPILER_FLAGS}
+        -P ${LATEX_USE_LATEX_LOCATION}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${pdflatex_build_command}
+        )
+    endforeach (dummy)
+  endif ()
+
+  if (LATEX_BIBFILES)
+    if (LATEX_MULTIBIB_NEWCITES)
+      foreach (multibib_auxfile ${LATEX_MULTIBIB_NEWCITES})
+        LATEX_GET_FILENAME_COMPONENT(multibib_target ${multibib_auxfile} NAME_WE)
+        set(make_dvi_command ${make_dvi_command}
+          COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+          ${BIBTEX_COMPILER} ${BIBTEX_COMPILER_FLAGS} ${multibib_target})
+        set(make_pdf_command ${make_pdf_command}
+          COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+          ${BIBTEX_COMPILER} ${BIBTEX_COMPILER_FLAGS} ${multibib_target})
+        set(auxiliary_clean_files ${auxiliary_clean_files}
+          ${output_dir}/${multibib_target}.aux)
+      endforeach (multibib_auxfile ${LATEX_MULTIBIB_NEWCITES})
+    else ()
+      set(make_dvi_command ${make_dvi_command}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${BIBTEX_COMPILER} ${BIBTEX_COMPILER_FLAGS} ${LATEX_TARGET})
+      set(make_pdf_command ${make_pdf_command}
+        COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${BIBTEX_COMPILER} ${BIBTEX_COMPILER_FLAGS} ${LATEX_TARGET})
+    endif ()
+
+    foreach (bibfile ${LATEX_BIBFILES})
+      set(make_dvi_depends ${make_dvi_depends} ${output_dir}/${bibfile})
+      set(make_pdf_depends ${make_pdf_depends} ${output_dir}/${bibfile})
+    endforeach (bibfile ${LATEX_BIBFILES})
+  else ()
+    if (LATEX_MULTIBIB_NEWCITES)
+      message(WARNING "MULTIBIB_NEWCITES has no effect without BIBFILES option.")
+    endif ()
+  endif ()
+
+  if (LATEX_USE_INDEX)
+    set(make_dvi_command ${make_dvi_command}
+      COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+      ${latex_build_command}
+      COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+      ${MAKEINDEX_COMPILER} ${MAKEINDEX_COMPILER_FLAGS} ${LATEX_TARGET}.idx)
+    set(make_pdf_command ${make_pdf_command}
+      COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+      ${pdflatex_build_command}
+      COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+      ${MAKEINDEX_COMPILER} ${MAKEINDEX_COMPILER_FLAGS} ${LATEX_TARGET}.idx)
+  endif ()
+
+  set(make_dvi_command ${make_dvi_command}
+    COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+    ${latex_build_command}
+    COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+    ${latex_build_command})
+  set(make_pdf_command ${make_pdf_command}
+    COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+    ${pdflatex_build_command}
+    COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+    ${pdflatex_build_command})
+
+  if (LATEX_USE_SYNCTEX)
+    if (NOT GZIP)
+      message(SEND_ERROR "UseLATEX.cmake: USE_SYNTEX option requires gzip program.  Set GZIP variable.")
+    endif ()
+    set(make_dvi_command ${make_dvi_command}
+      COMMAND ${CMAKE_COMMAND}
+      -D LATEX_BUILD_COMMAND=correct_synctex
+      -D LATEX_TARGET=${LATEX_TARGET}
+      -D GZIP=${GZIP}
+      -D "LATEX_SOURCE_DIRECTORY=${CMAKE_CURRENT_SOURCE_DIR}"
+      -D "LATEX_BINARY_DIRECTORY=${output_dir}"
+      -P ${LATEX_USE_LATEX_LOCATION}
+      )
+    set(make_pdf_command ${make_pdf_command}
+      COMMAND ${CMAKE_COMMAND}
+      -D LATEX_BUILD_COMMAND=correct_synctex
+      -D LATEX_TARGET=${LATEX_TARGET}
+      -D GZIP=${GZIP}
+      -D "LATEX_SOURCE_DIRECTORY=${CMAKE_CURRENT_SOURCE_DIR}"
+      -D "LATEX_BINARY_DIRECTORY=${output_dir}"
+      -P ${LATEX_USE_LATEX_LOCATION}
+      )
+  endif ()
+
+  # Add commands and targets for building dvi outputs.
+  ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${LATEX_TARGET}.dvi
+    COMMAND ${make_dvi_command}
+    DEPENDS ${make_dvi_depends}
+    )
+  if (LATEX_NO_DEFAULT OR LATEX_DEFAULT_PDF OR LATEX_DEFAULT_SAFEPDF OR DEFAULT_PS)
+    add_custom_target(${dvi_target}
+      DEPENDS ${output_dir}/${LATEX_TARGET}.dvi)
+  else ()
+    add_custom_target(${dvi_target} ALL
+      DEPENDS ${output_dir}/${LATEX_TARGET}.dvi)
+  endif ()
+
+  # Add commands and targets for building pdf outputs (with pdflatex).
+  if (PDFLATEX_COMPILER)
+    ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${LATEX_TARGET}.pdf
+      COMMAND ${make_pdf_command}
+      DEPENDS ${make_pdf_depends}
+      )
+    if (LATEX_DEFAULT_PDF)
+      add_custom_target(${pdf_target} ALL
+        DEPENDS ${output_dir}/${LATEX_TARGET}.pdf)
+    else ()
+      add_custom_target(${pdf_target}
+        DEPENDS ${output_dir}/${LATEX_TARGET}.pdf)
+    endif ()
+  endif ()
+
+  if (DVIPS_CONVERTER)
+    ADD_CUSTOM_COMMAND(OUTPUT ${output_dir}/${LATEX_TARGET}.ps
+      COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${DVIPS_CONVERTER} ${DVIPS_CONVERTER_FLAGS} -o ${LATEX_TARGET}.ps ${LATEX_TARGET}.dvi
+      DEPENDS ${output_dir}/${LATEX_TARGET}.dvi)
+    if (LATEX_DEFAULT_PS)
+      add_custom_target(${ps_target} ALL
+        DEPENDS ${output_dir}/${LATEX_TARGET}.ps)
+    else ()
+      add_custom_target(${ps_target}
+        DEPENDS ${output_dir}/${LATEX_TARGET}.ps)
+    endif ()
+    if (PS2PDF_CONVERTER)
+      # Since both the pdf and safepdf targets have the same output, we
+      # cannot properly do the dependencies for both.  When selecting safepdf,
+      # simply force a recompile every time.
+      if (LATEX_DEFAULT_SAFEPDF)
+        add_custom_target(${safepdf_target} ALL
+          ${CMAKE_COMMAND} -E chdir ${output_dir}
+          ${PS2PDF_CONVERTER} ${PS2PDF_CONVERTER_FLAGS} ${LATEX_TARGET}.ps ${LATEX_TARGET}.pdf
+          )
+      else ()
+        add_custom_target(${safepdf_target}
+          ${CMAKE_COMMAND} -E chdir ${output_dir}
+          ${PS2PDF_CONVERTER} ${PS2PDF_CONVERTER_FLAGS} ${LATEX_TARGET}.ps ${LATEX_TARGET}.pdf
+          )
+      endif ()
+      add_dependencies(${safepdf_target} ${ps_target})
+    endif ()
+  endif ()
+
+  if (LATEX2HTML_CONVERTER)
+    if (USING_HTLATEX)
+      # htlatex places the output in a different location
+      SET (HTML_OUTPUT "${output_dir}/${LATEX_TARGET}.html")
+    else ()
+      SET (HTML_OUTPUT "${output_dir}/${LATEX_TARGET}/${LATEX_TARGET}.html")
+    endif ()
+    ADD_CUSTOM_COMMAND(OUTPUT ${HTML_OUTPUT}
+      COMMAND ${CMAKE_COMMAND} -E chdir ${output_dir}
+        ${LATEX2HTML_CONVERTER} ${LATEX2HTML_CONVERTER_FLAGS} ${LATEX_MAIN_INPUT}
+      DEPENDS ${output_dir}/${LATEX_TARGET}.tex
+      )
+    add_custom_target(${html_target}
+      DEPENDS ${HTML_OUTPUT}
+      )
+    add_dependencies(${html_target} ${dvi_target})
+  endif ()
+
+  SET_DIRECTORY_PROPERTIES(.
+    ADDITIONAL_MAKE_CLEAN_FILES "${auxiliary_clean_files}"
+    )
+
+  add_custom_target(${auxclean_target}
+    COMMENT "Cleaning auxiliary LaTeX files."
+    COMMAND ${CMAKE_COMMAND} -E remove ${auxiliary_clean_files}
+    )
+ENDFUNCTION(ADD_LATEX_TARGETS_INTERNAL)
+
+FUNCTION(ADD_LATEX_TARGETS)
+  LATEX_GET_OUTPUT_PATH(output_dir)
+  PARSE_ADD_LATEX_ARGUMENTS(ADD_LATEX_TARGETS ${ARGV})
+
+  ADD_LATEX_TARGETS_INTERNAL()
+ENDFUNCTION(ADD_LATEX_TARGETS)
+
+FUNCTION(ADD_LATEX_DOCUMENT)
+  LATEX_GET_OUTPUT_PATH(output_dir)
+  if (output_dir)
+    PARSE_ADD_LATEX_ARGUMENTS(ADD_LATEX_DOCUMENT ${ARGV})
+
+    LATEX_COPY_INPUT_FILE(${LATEX_MAIN_INPUT})
+
+    foreach (bib_file ${LATEX_BIBFILES})
+      LATEX_COPY_INPUT_FILE(${bib_file})
+    endforeach (bib_file)
+
+    foreach (input ${LATEX_INPUTS})
+      LATEX_COPY_INPUT_FILE(${input})
+    endforeach (input)
+
+    LATEX_COPY_GLOBBED_FILES(${CMAKE_CURRENT_SOURCE_DIR}/*.cls ${output_dir})
+    LATEX_COPY_GLOBBED_FILES(${CMAKE_CURRENT_SOURCE_DIR}/*.bst ${output_dir})
+    LATEX_COPY_GLOBBED_FILES(${CMAKE_CURRENT_SOURCE_DIR}/*.clo ${output_dir})
+    LATEX_COPY_GLOBBED_FILES(${CMAKE_CURRENT_SOURCE_DIR}/*.sty ${output_dir})
+    LATEX_COPY_GLOBBED_FILES(${CMAKE_CURRENT_SOURCE_DIR}/*.ist ${output_dir})
+
+    ADD_LATEX_TARGETS_INTERNAL()
+  endif ()
+ENDFUNCTION(ADD_LATEX_DOCUMENT)
+
+#############################################################################
+# Actually do stuff
+#############################################################################
+
+if (LATEX_BUILD_COMMAND)
+  set(command_handled)
+
+  if ("${LATEX_BUILD_COMMAND}" STREQUAL makeglossaries)
+    LATEX_MAKEGLOSSARIES()
+    set(command_handled TRUE)
+  endif ()
+
+  if ("${LATEX_BUILD_COMMAND}" STREQUAL makenomenclature)
+    LATEX_MAKENOMENCLATURE()
+    set(command_handled TRUE)
+  endif ()
+
+  if ("${LATEX_BUILD_COMMAND}" STREQUAL correct_synctex)
+    LATEX_CORRECT_SYNCTEX()
+    set(command_handled TRUE)
+  endif ()
+
+  if (NOT command_handled)
+    message(SEND_ERROR "Unknown command: ${LATEX_BUILD_COMMAND}")
+  endif ()
+
+else ()
+  # Must be part of the actual configure (included from CMakeLists.txt).
+  LATEX_SETUP_VARIABLES()
+endif ()
+
diff -ruN SuperLU_DIST_5.1.3/scimake/xvfb-run.sh superlu_dist5-5.1.3/scimake/xvfb-run.sh
--- SuperLU_DIST_5.1.3/scimake/xvfb-run.sh	1969-12-31 17:00:00.000000000 -0700
+++ superlu_dist5-5.1.3/scimake/xvfb-run.sh	2017-02-23 12:45:30.000000000 -0700
@@ -0,0 +1,229 @@
+#!/bin/sh
+######################################################################
+#
+# @file    xvfb-run.sh
+#
+# @brief   Make links from one directory to another if distinct.  Create target.
+
+# This script starts an instance of Xvfb, the "fake" X server, runs a command
+# with that server available, and kills the X server when done.  The return
+# value of the command becomes the return value of this script.
+#
+# If anyone is using this to build a Debian package, make sure the package
+# Build-Depends on xvfb, xbase-clients, and xfonts-base.
+#
+# JRC, 20111211: copied script over to here after installation, appended .sh,
+# added part of fix at
+# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=617851
+# to work when tempfile is absent.
+#
+# Must install xorg-x11-server-Xvfb:
+# sudo yum install xorg-x11-server-Xvfb
+# sudo /usr/local/bin/rcom-nodes yum install xorg-x11-server-Xvfb
+#
+# @version $Rev: 1133 $ $Date: 2017-02-14 12:43:27 -0700 (Tue, 14 Feb 2017) $
+#
+# Copyright &copy; 2012-2017, Tech-X Corporation, Boulder, CO.
+# See LICENSE file (EclipseLicense.txt) for conditions of use.
+#
+######################################################################
+
+set -e
+
+PROGNAME=xvfb-run
+SERVERNUM=99
+AUTHFILE=
+ERRORFILE=/dev/null
+STARTWAIT=3
+XVFBARGS="-screen 0 1280x960x16"
+LISTENTCP="-nolisten tcp"
+XAUTHPROTO=.
+
+# Query the terminal to establish a default number of columns to use for
+# displaying messages to the user.  This is used only as a fallback in the event
+# the COLUMNS variable is not set.  ($COLUMNS can react to SIGWINCH while the
+# script is running, and this cannot, only being calculated once.)
+DEFCOLUMNS=$(stty size 2>/dev/null | awk '{print $2}') || true
+if ! expr "$DEFCOLUMNS" : "[[:digit:]]\+$" >/dev/null 2>&1; then
+    DEFCOLUMNS=80
+fi
+
+# Display a message, wrapping lines at the terminal width.
+message () {
+    echo "$PROGNAME: $*" | fmt -t -w ${COLUMNS:-$DEFCOLUMNS}
+}
+
+# Display an error message.
+error () {
+    message "error: $*" >&2
+}
+
+# Display a usage message.
+usage () {
+    if [ -n "$*" ]; then
+        message "usage error: $*"
+    fi
+    cat <<EOF
+Usage: $PROGNAME [OPTION ...] COMMAND
+Run COMMAND (usually an X client) in a virtual X server environment.
+Options:
+-a        --auto-servernum          try to get a free server number, starting at
+                                    --server-num
+-e FILE   --error-file=FILE         file used to store xauth errors and Xvfb
+                                    output (default: $ERRORFILE)
+-f FILE   --auth-file=FILE          file used to store auth cookie
+                                    (default: ./.Xauthority)
+-h        --help                    display this usage message and exit
+-n NUM    --server-num=NUM          server number to use (default: $SERVERNUM)
+-l        --listen-tcp              enable TCP port listening in the X server
+-p PROTO  --xauth-protocol=PROTO    X authority protocol name to use
+                                    (default: xauth command's default)
+-s ARGS   --server-args=ARGS        arguments (other than server number and
+                                    "-nolisten tcp") to pass to the Xvfb server
+                                    (default: "$XVFBARGS")
+-w DELAY  --wait=DELAY              delay in seconds to wait for Xvfb to start
+                                    before running COMMAND (default: $STARTWAIT)
+EOF
+}
+
+# Find a free server number by looking at .X*-lock files in /tmp.
+find_free_servernum() {
+    # Sadly, the "local" keyword is not POSIX.  Leave the next line commented in
+    # the hope Debian Policy eventually changes to allow it in /bin/sh scripts
+    # anyway.
+    #local i
+
+    i=$SERVERNUM
+    while [ -f /tmp/.X$i-lock ]; do
+        i=$(($i + 1))
+    done
+    echo $i
+}
+
+# Clean up files
+clean_up() {
+    if [ -e "$AUTHFILE" ]; then
+        XAUTHORITY=$AUTHFILE xauth remove ":$SERVERNUM" >>"$ERRORFILE" 2>&1
+    fi
+    if [ -n "$XVFB_RUN_TMPDIR" ]; then
+        if ! rm -r "$XVFB_RUN_TMPDIR"; then
+            error "problem while cleaning up temporary directory"
+            exit 5
+        fi
+    fi
+}
+
+# Parse the command line.
+ARGS=$(getopt --options +ae:f:hn:lp:s:w: \
+       --long auto-servernum,error-file:,auth-file:,help,server-num:,listen-tcp,xauth-protocol:,server-args:,wait: \
+       --name "$PROGNAME" -- "$@")
+GETOPT_STATUS=$?
+
+if [ $GETOPT_STATUS -ne 0 ]; then
+    error "internal error; getopt exited with status $GETOPT_STATUS"
+    exit 6
+fi
+
+eval set -- "$ARGS"
+
+while :; do
+    case "$1" in
+        -a|--auto-servernum) SERVERNUM=$(find_free_servernum); AUTONUM="yes" ;;
+        -e|--error-file) ERRORFILE="$2"; shift ;;
+        -f|--auth-file) AUTHFILE="$2"; shift ;;
+        -h|--help) SHOWHELP="yes" ;;
+        -n|--server-num) SERVERNUM="$2"; shift ;;
+        -l|--listen-tcp) LISTENTCP="" ;;
+        -p|--xauth-protocol) XAUTHPROTO="$2"; shift ;;
+        -s|--server-args) XVFBARGS="$2"; shift ;;
+        -w|--wait) STARTWAIT="$2"; shift ;;
+        --) shift; break ;;
+        *) error "internal error; getopt permitted \"$1\" unexpectedly"
+           exit 6
+           ;;
+    esac
+    shift
+done
+
+if [ "$SHOWHELP" ]; then
+    usage
+    exit 0
+fi
+
+if [ -z "$*" ]; then
+    usage "need a command to run" >&2
+    exit 2
+fi
+
+if ! which xauth >/dev/null; then
+    error "xauth command not found"
+    exit 3
+fi
+
+# tidy up after ourselves
+trap clean_up EXIT
+
+# If the user did not specify an X authorization file to use, set up a temporary
+# directory to house one.
+if [ -z "$AUTHFILE" ]; then
+    XVFB_RUN_TMPDIR="$(mktemp -d -t $PROGNAME.XXXXXX)"
+
+    set +e
+    TEMPFILE_INSTALLED=$(tempfile --help 2>/dev/null)
+
+    if [ $? -eq 0 ]; then
+      TEMPFILE_INSTALLED=yes
+    else
+      TEMPFILE_INSTALLED=no
+    fi
+    set -e
+
+    # Create empty file to avoid xauth warning
+    if [ "$TEMPFILE_INSTALLED" = "yes" ]; then
+      AUTHFILE=$(tempfile -n "$XVFB_RUN_TMPDIR/Xauthority")
+    else
+      AUTHFILE=$(mktemp -p "$XVFB_RUN_TMPDIR" Xauthority.XXXXXX)
+    fi
+fi
+
+# Start Xvfb.
+MCOOKIE=$(mcookie)
+tries=10
+while [ $tries -gt 0 ]; do
+    tries=$(( $tries - 1 ))
+    XAUTHORITY=$AUTHFILE xauth source - << EOF >>"$ERRORFILE" 2>&1
+add :$SERVERNUM $XAUTHPROTO $MCOOKIE
+EOF
+    XAUTHORITY=$AUTHFILE Xvfb ":$SERVERNUM" $XVFBARGS $LISTENTCP >>"$ERRORFILE" 2>&1 &
+    XVFBPID=$!
+
+    sleep "$STARTWAIT"
+    if kill -0 $XVFBPID 2>/dev/null; then
+        break
+    elif [ -n "$AUTONUM" ]; then
+        # The display is in use so try another one (if '-a' was specified).
+        SERVERNUM=$((SERVERNUM + 1))
+        SERVERNUM=$(find_free_servernum)
+        continue
+    fi
+    error "Xvfb failed to start" >&2
+    exit 1
+done
+
+# Start the command and save its exit status.
+set +e
+DISPLAY=:$SERVERNUM XAUTHORITY=$AUTHFILE "$@" 2>&1
+RETVAL=$?
+set -e
+
+# Kill Xvfb now that the command has exited.
+kill $XVFBPID
+
+# Give it a second to quit
+sleep 1
+
+# Return the executed command's exit status.
+exit $RETVAL
+
+# vim:set ai et sts=4 sw=4 tw=80:
+
diff -ruN SuperLU_DIST_5.1.3/SRC/CMakeLists.txt superlu_dist5-5.1.3/SRC/CMakeLists.txt
--- SuperLU_DIST_5.1.3/SRC/CMakeLists.txt	2017-02-13 21:51:02.000000000 -0700
+++ superlu_dist5-5.1.3/SRC/CMakeLists.txt	2017-02-23 12:43:59.000000000 -0700
@@ -118,7 +118,7 @@
 
 add_library(superlu_dist ${sources} ${HEADERS})
 target_link_libraries(superlu_dist
-                      ${MPI_C_LIBRARIES} ${BLAS_LIB} ${PARMETIS_LIB} m)
+                      ${MPI_C_LIBRARIES} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} ${PARMETIS_LIBRARIES} m)
 set_target_properties(superlu_dist PROPERTIES
                       VERSION ${PROJECT_VERSION} SOVERSION ${VERSION_MAJOR}
 )
diff -ruN SuperLU_DIST_5.1.3/SRC/get_perm_c.c superlu_dist5-5.1.3/SRC/get_perm_c.c
--- SuperLU_DIST_5.1.3/SRC/get_perm_c.c	2017-02-13 21:51:02.000000000 -0700
+++ superlu_dist5-5.1.3/SRC/get_perm_c.c	2017-02-23 12:43:59.000000000 -0700
@@ -74,6 +74,7 @@
 
     /* Call metis */
 #undef USEEND
+#ifdef HAVE_PARMETIS
 #ifdef USEEND
     METIS_EdgeND(&nm, b_colptr_int, b_rowind_int, &numflag, metis_options,
 		 perm, iperm);
@@ -88,6 +89,7 @@
 
     /*check_perm_dist("metis perm",  n, perm);*/
 #endif
+#endif
 
     /* Copy the permutation vector into SuperLU data structure. */
     for (i = 0; i < n; ++i) perm_c[i] = iperm[i];
diff -ruN SuperLU_DIST_5.1.3/SRC/get_perm_c_parmetis.c superlu_dist5-5.1.3/SRC/get_perm_c_parmetis.c
--- SuperLU_DIST_5.1.3/SRC/get_perm_c_parmetis.c	2017-02-13 21:51:02.000000000 -0700
+++ superlu_dist5-5.1.3/SRC/get_perm_c_parmetis.c	2017-02-23 12:43:59.000000000 -0700
@@ -24,7 +24,9 @@
 /* limits.h:  the largest positive integer (INT_MAX) */
 #include <limits.h>
 #include <math.h>
+#ifdef HAVE_PARMETIS
 #include "parmetis.h"
+#endif
 #include "superlu_ddefs.h"
 
 /*
@@ -246,12 +248,16 @@
 #endif
 #endif
     
+#ifdef HAVE_PARMETIS
   if ( iam < noDomains) {
 
     ParMETIS_V3_NodeND(vtxdist_o, b_rowptr, b_colind, 
 		       &numflag, options,
 		       dist_order, l_sizes, metis_comm);
   }
+#else
+      ABORT ("SUPERLU_DIST not linked to parmetis");
+#endif
 
   if (bnz) SUPERLU_FREE (b_colind);
   SUPERLU_FREE (b_rowptr);
